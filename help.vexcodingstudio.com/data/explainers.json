{"block":{"controller::lcd::setCursor(int32_t row, int32_t col)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Controller.Screen.setCursor command in the snippet above is being used to have the cursor appear at the coordinates (1,1) before printing “Hello!” on the screen.</li>\n<li>Controller.Screen.setCursor moves the cursor to the named coordinates that end the command. For example, Controller1.Screen.setCursor (3,8) would move the cursor three positions to the right and eight positions up on the controller’s screen.</li>\n<li>Use setCursor so that when you have the controller print, the controller displays text or other symbols on its screen exactly where you want them.</li>\n</ul>","controller::lcd::print(T value)":"<h3>The Role of this Command in Programming</h3>\r\n<ul>\r\n<li>The Controller.Screen.print commands in this snippet are being used to have the controller display “Hello!” and “World!” on its screen.</li>\r\n<li>This command can be used to print in the default location on the screen or be used in combination with commands like Controller.Screen.setCursor and Controller.Screen.newLine to control exactly where text is displayed on the controller’s screen.</li>\r\n</ul>","controller::lcd::clearScreen(void)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Controller.Screen.clearScreen command in the snippet above is being used to make sure that the screen is clear before “Hello!” and “World!” are printed, or displayed, on it.</li>\n<li>Use the Controller.Screen.clearScreen command whenever the screen should be completely clear before the program continues.</li>\n<li>Using the Controller.Screen.clearScreen command will also reset the cursor to the top left corner of the screen.</li>\n</ul>","controller::lcd::clearLine(void)":"<h3>The Role of this Command in Programming</h3>\r\n<ul>\r\n<li>The Controller.Screen.clearLine command in this snippet is being used to clear a single line of text from the screen.</li>\r\n<li>Use the Controller.Screen.clearLine command to clear a single named line instead of clearing the entire screen.</li>\r\n<li>This command can also be used to have a single line on the screen serve as a message display where multiple messages can be displayed one at a time, then cleared and replaced with a new line of displayed text.</li>\r\n</ul>","motor::setVelocity(double velocity, percentUnits units)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The motor.setVelocity commands in the snippet above are being used to set the velocities of the Left and Right Motors to 50 percent before they spin forward for 3 seconds.  50 percent is the default velocity for the command, so there is no need for change.</li>\n<li>Use motor.setVelocity to have a motor spin at any velocity between backward at full velocity (-100 percent) to forward at full velocity (100 percent).</li>\n<li>Use motor.setVelocity before commands for spinning or turning the motors so that you can set it to something other than 50%, should the program require more or less speed.</li>\n</ul>","motor::spin(directionType dir)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The motor.spin command moves a motor either forward or backward. In this snippet, motor.spin commands are being used to spin the Left and Right Motors forward.</li>\n<li>The motor.spin command will make the designated (named) motor spin until there is a change within its programming. That’s because it is <a href=\"https://help.vex.com/article/120-how-to-use-blocking-vs-non-blocking-code\">non-blocking</a>. For example, LeftMotor.spin(directionType::fwd) command will make the motor spin continuously until the motor is instructed to do something else in the program.</li>\n<li>Use motor.spin to have the motor continue to spin in the same direction at the same velocity.</li>\n<li>Use motor.spin with a task::sleep() command if the motor should spin for a specified amount of time before the program moves on to the next command.</li>\n</ul>","motor::rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Motor.rotateFor command in the snippet above is being used to rotate the left and right motors for a specific target rotational distance.</li>\n<li>Motor.rotateFor can be used either as a <a href=\"https://help.vex.com/article/120-how-to-use-blocking-vs-non-blocking-code\">blocking</a> or non-blocking command. If there is not a parameter included for waitForCompletion, it is blocking by default and the program will wait until the motor reaches its target rotational value.</li>\n<li>In the snippet, LeftMotor.rotateFor is non-blocking by including ‘false’ as the waitForCompletion parameter so that the RightMotor.rotateFor can be run at the same time allowing the robot to move in a straight line for some distance.</li>\n<li>This command can be used not only with wheel motors but also with arm or claw motors, allowing them to be moved specific distances while safely avoiding overextensions without the need for a limit switch.</li>\n</ul>","motor::startRotateFor(double rotation, rotationUnits units)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Motor.startRotateFor command in the snippet above is being used to move the robot forward for one revolution. The Left Motor uses startRotateFor so that the program then continues and moves the Right Motor for one revolution as well.</li>\n<li>This command is <a href=\"https://help.vex.com/article/120-how-to-use-blocking-vs-non-blocking-code\">non-blocking</a> because it is only starting the rotation. Then the program moves on to the next command.</li\n<li>Use startRotateFor to move a motor and then have the program do something else – like move a second motor in parallel or take sensor readings.</li>\n<li>In some programs, consider using the Motor.startRotateFor instead of using Motor.rotateFor with the waitForCompletion parameter turned off (set to false).</li>\n<ul>","motor::stop(void)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The motor.stop commands in the snippet above are being used to stop both the Left and Right Motors.</li>\n<li>Use motor.stop whenever a motor needs to be stopped as part of a program.</li>\n<li>Use motor.stop after some non-blocking commands - for example, motor.spin - so that the motors eventually stop.</li>\n</ul>"},"cpp":{"controller::lcd::setCursor(int32_t row, int32_t col)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Controller.Screen.setCursor command in the snippet above is being used to have the cursor appear at the coordinates (1,1) before printing “Hello!” on the screen.</li>\n<li>Controller.Screen.setCursor moves the cursor to the named coordinates that end the command. For example, Controller1.Screen.setCursor (3,8) would move the cursor three positions to the right and eight positions up on the controller’s screen.</li>\n<li>Use setCursor so that when you have the controller print, the controller displays text or other symbols on its screen exactly where you want them.</li>\n</ul>","controller::lcd::print(const char *format,...)":"<h3>The Role of this Command in Programming</h3>\r\n<ul>\r\n<li>The Controller.Screen.print commands in this snippet are being used to have the controller display “Hello!” and “World!” on its screen.</li>\r\n<li>This command can be used to print in the default location on the screen or be used in combination with commands like Controller.Screen.setCursor and Controller.Screen.newLine to control exactly where text is displayed on the controller’s screen.</li>\r\n</ul>","controller::lcd::clearScreen(void)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Controller.Screen.clearScreen command in the snippet above is being used to make sure that the screen is clear before “Hello!” and “World!” are printed, or displayed, on it.</li>\n<li>Use the Controller.Screen.clearScreen command whenever the screen should be completely clear before the program continues.</li>\n<li>Using the Controller.Screen.clearScreen command will also reset the cursor to the top left corner of the screen.</li>\n</ul>","controller::lcd::clearLine(void)":"<h3>The Role of this Command in Programming</h3>\r\n<ul>\r\n<li>The Controller.Screen.clearLine command in this snippet is being used to clear a single line of text from the screen.</li>\r\n<li>Use the Controller.Screen.clearLine command to clear a single named line instead of clearing the entire screen.</li>\r\n<li>This command can also be used to have a single line on the screen serve as a message display where multiple messages can be displayed one at a time, then cleared and replaced with a new line of displayed text.</li>\r\n</ul>","controller::lcd::newLine(void)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Controller.Screen.newLine command in the snippet above is being used to have the controller’s screen display “Hello!” “World!” on two separate lines.</li>\n<li>Controller.Screen.newLine moves the cursor down to the beginning of the next line on the controller’s screen.</li>\n<li>Use Controller.Screen.newLine when the cursor is already set at a coordinate – for example, (1,1) – but you want to move the cursor down and to the left side of that lower line – (0,2).</li>\n<li>If the cursor should be moved to a different set of coordinates completely – for example, (3,3), use Controller.Screen.setCursor (3,3) instead.</li>\n</ul>","motor::setVelocity(double velocity, velocityUnits units)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The motor.setVelocity commands in the snippet above are being used to set the velocities of the Left and Right Motors to 50 percent before they spin forward for 3 seconds.  50 percent is the default velocity for the command, so there is no need for change.</li>\n<li>Use motor.setVelocity to have a motor spin at any velocity between backward at full velocity (-100 percent) to forward at full velocity (100 percent).</li>\n<li>Use motor.setVelocity before commands for spinning or turning the motors so that you can set it to something other than 50%, should the program require more or less speed.</li>\n</ul>","motor::spin(directionType dir)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The motor.spin command moves a motor either forward or backward. In this snippet, motor.spin commands are being used to spin the Left and Right Motors forward.</li>\n<li>The motor.spin command will make the designated (named) motor spin until there is a change within its programming. That’s because it is <a href=\"https://help.vex.com/article/120-how-to-use-blocking-vs-non-blocking-code\">non-blocking</a>. For example, LeftMotor.spin(directionType::fwd) command will make the motor spin continuously until the motor is instructed to do something else in the program.</li>\n<li>Use motor.spin to have the motor continue to spin in the same direction at the same velocity.</li>\n<li>Use motor.spin with a task::sleep() command if the motor should spin for a specified amount of time before the program moves on to the next command.</li>\n</ul>","motor::spin(directionType dir, double velocity, velocityUnits units)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The motor.spin command moves a motor either forward or backward. In this snippet, motor.spin commands are being used to spin the Left and Right Motors forward.</li>\n<li>The motor.spin command will make the designated (named) motor spin until there is a change within its programming. That’s because it is <a href=\"https://help.vex.com/article/120-how-to-use-blocking-vs-non-blocking-code\">non-blocking</a>. For example, LeftMotor.spin(directionType::fwd) command will make the motor spin continuously until the motor is instructed to do something else in the program.</li>\n<li>Use motor.spin to have the motor continue to spin in the same direction at the same velocity.</li>\n<li>Use motor.spin with a task::sleep() command if the motor should spin for a specified amount of time before the program moves on to the next command.</li>\n</ul>","motor::rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Motor.rotateFor command in the snippet above is being used to rotate the left and right motors for a specific target rotational distance.</li>\n<li>Motor.rotateFor can be used either as a <a href=\"https://help.vex.com/article/120-how-to-use-blocking-vs-non-blocking-code\">blocking</a> or non-blocking command. If there is not a parameter included for waitForCompletion, it is blocking by default and the program will wait until the motor reaches its target rotational value.</li>\n<li>In the snippet, LeftMotor.rotateFor is non-blocking by including ‘false’ as the waitForCompletion parameter so that the RightMotor.rotateFor can be run at the same time allowing the robot to move in a straight line for some distance.</li>\n<li>This command can be used not only with wheel motors but also with arm or claw motors, allowing them to be moved specific distances while safely avoiding overextensions without the need for a limit switch.</li>\n</ul>","motor::startRotateFor(double rotation, rotationUnits units)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The Motor.startRotateFor command in the snippet above is being used to move the robot forward for one revolution. The Left Motor uses startRotateFor so that the program then continues and moves the Right Motor for one revolution as well.</li>\n<li>This command is <a href=\"https://help.vex.com/article/120-how-to-use-blocking-vs-non-blocking-code\">non-blocking</a> because it is only starting the rotation. Then the program moves on to the next command.</li\n<li>Use startRotateFor to move a motor and then have the program do something else – like move a second motor in parallel or take sensor readings.</li>\n<li>In some programs, consider using the Motor.startRotateFor instead of using Motor.rotateFor with the waitForCompletion parameter turned off (set to false).</li>\n<ul>","motor::stop(void)":"<h3>The Role of this Command in Programming</h3>\n<ul>\n<li>The motor.stop commands in the snippet above are being used to stop both the Left and Right Motors.</li>\n<li>Use motor.stop whenever a motor needs to be stopped as part of a program.</li>\n<li>Use motor.stop after some non-blocking commands - for example, motor.spin - so that the motors eventually stop.</li>\n</ul>"},"pro":{}}