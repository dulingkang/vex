{"changes":[{"version":"20180820.10.20","pro":{"added":["namespacevex/percentUnits.pct","namespacevex/timeUnits.sec","namespacevex/timeUnits.msec","namespacevex/currentUnits.amp","namespacevex/voltageUnits.volt","namespacevex/voltageUnits.mV","namespacevex/powerUnits.watt","namespacevex/torqueUnits.Nm","namespacevex/torqueUnits.InLb","namespacevex/rotationUnits.deg","namespacevex/rotationUnits.rev","namespacevex/rotationUnits.raw","namespacevex/velocityUnits.pct","namespacevex/velocityUnits.rpm","namespacevex/velocityUnits.dps","namespacevex/distanceUnits.mm","namespacevex/distanceUnits.in","namespacevex/distanceUnits.cm","namespacevex/analogUnits.pct","namespacevex/analogUnits.range8bit","namespacevex/analogUnits.range10bit","namespacevex/analogUnits.range12bit","namespacevex/analogUnits.mV","namespacevex/directionType.fwd","namespacevex/directionType.rev","namespacevex/brakeType.coast","namespacevex/brakeType.brake","namespacevex/brakeType.hold","namespacevex/gearSetting.ratio36_1","namespacevex/gearSetting.ratio18_1","namespacevex/gearSetting.ratio6_1","namespacevex/fontType.mono20","namespacevex/fontType.mono30","namespacevex/fontType.mono40","namespacevex/fontType.mono60","namespacevex/fontType.prop20","namespacevex/fontType.prop30","namespacevex/fontType.prop40","namespacevex/fontType.prop60","namespacevex/fontType.mono15","namespacevex/fontType.mono12","namespacevex/triportType.analogInput","namespacevex/triportType.analogOutput","namespacevex/triportType.digitalInput","namespacevex/triportType.digitalOutput","namespacevex/triportType.button","namespacevex/triportType.potentiometer","namespacevex/triportType.lineSensor","namespacevex/triportType.lightSensor","namespacevex/triportType.gyro","namespacevex/triportType.accelerometer","namespacevex/triportType.motor","namespacevex/triportType.servo","namespacevex/triportType.quadEncoder","namespacevex/triportType.sonar","namespacevex/triportType.motorS","namespacevex/controllerType.primary","namespacevex/controllerType.partner","namespacevex/classvex_1_1accelerometer/accelerometer(triport::port &port)","namespacevex/classvex_1_1accelerometer/value(percentUnits units)","namespacevex/classvex_1_1accelerometer/value(analogUnits units)","namespacevex/classvex_1_1accelerometer/changed(void(*callback)(void))","namespacevex/classvex_1_1analog__in/analog_in(triport::port &port)","namespacevex/classvex_1_1analog__in/value(percentUnits units)","namespacevex/classvex_1_1analog__in/value(analogUnits units)","namespacevex/classvex_1_1analog__in/changed(void(*callback)(void))","namespacevex/classvex_1_1brain/Timer","namespacevex/classvex_1_1brain/Screen","namespacevex/classvex_1_1brain/Battery","namespacevex/classvex_1_1brain/SDcard","namespacevex/classvex_1_1brain/brain()","namespacevex/classvex_1_1brain/timer(timeUnits units)","namespacevex/classvex_1_1brain/resetTimer()","namespacevex/classvex_1_1brain/setTimer(double value, timeUnits units)","namespacevex/classvex_1_1brain_1_1battery/capacity(percentUnits units=percentUnits::pct)","namespacevex/classvex_1_1brain_1_1battery/temperature(percentUnits units=percentUnits::pct)","namespacevex/classvex_1_1brain_1_1lcd/setCursor(int32_t row, int32_t col)","namespacevex/classvex_1_1brain_1_1lcd/setFont(fontType font)","namespacevex/classvex_1_1brain_1_1lcd/setPenWidth(uint32_t width)","namespacevex/classvex_1_1brain_1_1lcd/setOrigin(int32_t x, int32_t y)","namespacevex/classvex_1_1brain_1_1lcd/column()","namespacevex/classvex_1_1brain_1_1lcd/row()","namespacevex/classvex_1_1brain_1_1lcd/setPenColor(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/setPenColor(int hue)","namespacevex/classvex_1_1brain_1_1lcd/setPenColor(const char *color)","namespacevex/classvex_1_1brain_1_1lcd/setFillColor(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/setFillColor(int hue)","namespacevex/classvex_1_1brain_1_1lcd/setFillColor(const char *color)","namespacevex/classvex_1_1brain_1_1lcd/print(const char *format,...)","namespacevex/classvex_1_1brain_1_1lcd/printAt(int32_t x, int32_t y, const char *format,...)","namespacevex/classvex_1_1brain_1_1lcd/printAt(int32_t x, int32_t y, bool bOpaque, const char *format,...)","namespacevex/classvex_1_1brain_1_1lcd/clearScreen(void)","namespacevex/classvex_1_1brain_1_1lcd/clearScreen(int hue)","namespacevex/classvex_1_1brain_1_1lcd/clearScreen(const char *color)","namespacevex/classvex_1_1brain_1_1lcd/clearScreen(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/clearLine(void)","namespacevex/classvex_1_1brain_1_1lcd/clearLine(int number, int hue)","namespacevex/classvex_1_1brain_1_1lcd/clearLine(int number, const char *color)","namespacevex/classvex_1_1brain_1_1lcd/clearLine(int number, const color &color)","namespacevex/classvex_1_1brain_1_1lcd/newLine(void)","namespacevex/classvex_1_1brain_1_1lcd/drawPixel(int x, int y)","namespacevex/classvex_1_1brain_1_1lcd/drawLine(int x1, int y1, int x2, int y2)","namespacevex/classvex_1_1brain_1_1lcd/drawRectangle(int x, int y, int width, int height)","namespacevex/classvex_1_1brain_1_1lcd/drawRectangle(int x, int y, int width, int height, int hue)","namespacevex/classvex_1_1brain_1_1lcd/drawRectangle(int x, int y, int width, int height, const char *color)","namespacevex/classvex_1_1brain_1_1lcd/drawRectangle(int x, int y, int width, int height, const color &color)","namespacevex/classvex_1_1brain_1_1lcd/drawCircle(int x, int y, int radius)","namespacevex/classvex_1_1brain_1_1lcd/drawCircle(int x, int y, int radius, int hue)","namespacevex/classvex_1_1brain_1_1lcd/drawCircle(int x, int y, int radius, const char *color)","namespacevex/classvex_1_1brain_1_1lcd/drawCircle(int x, int y, int radius, const color &color)","namespacevex/classvex_1_1brain_1_1lcd/pressed(void(*callback)(void))","namespacevex/classvex_1_1brain_1_1lcd/released(void(*callback)(void))","namespacevex/classvex_1_1brain_1_1lcd/xPosition()","namespacevex/classvex_1_1brain_1_1lcd/yPosition()","namespacevex/classvex_1_1brain_1_1lcd/pressing()","namespacevex/classvex_1_1brain_1_1lcd/render()","namespacevex/classvex_1_1brain_1_1lcd/render(bool bVsyncWait, bool bRunScheduler=true)","namespacevex/classvex_1_1brain_1_1sdcard/isInserted()","namespacevex/classvex_1_1brain_1_1sdcard/loadfile(const char *name, uint8_t *buffer, int32_t len)","namespacevex/classvex_1_1brain_1_1sdcard/savefile(const char *name, uint8_t *buffer, int32_t len)","namespacevex/classvex_1_1brain_1_1sdcard/appendfile(const char *name, uint8_t *buffer, int32_t len)","namespacevex/classvex_1_1bumper/bumper(triport::port &port)","namespacevex/classvex_1_1bumper/pressing()","namespacevex/classvex_1_1bumper/pressed(void(*callback)(void))","namespacevex/classvex_1_1bumper/released(void(*callback)(void))","namespacevex/classvex_1_1color/black","namespacevex/classvex_1_1color/white","namespacevex/classvex_1_1color/red","namespacevex/classvex_1_1color/green","namespacevex/classvex_1_1color/blue","namespacevex/classvex_1_1color/yellow","namespacevex/classvex_1_1color/orange","namespacevex/classvex_1_1color/purple","namespacevex/classvex_1_1color/cyan","namespacevex/classvex_1_1color/transparent","namespacevex/classvex_1_1color/color(int value)","namespacevex/classvex_1_1color/color(uint8_t r, uint8_t g, uint8_t b)","namespacevex/classvex_1_1color/isTransparent() const","namespacevex/classvex_1_1color/hsv(uint32_t hue, double sat, double value)","namespacevex/classvex_1_1color/web(const char *color)","namespacevex/classvex_1_1competition/bStopTasksBetweenModes","namespacevex/classvex_1_1competition/competition()","namespacevex/classvex_1_1competition/autonomous(void(*callback)(void))","namespacevex/classvex_1_1competition/drivercontrol(void(*callback)(void))","namespacevex/classvex_1_1competition/isEnabled()","namespacevex/classvex_1_1competition/isDriverControl()","namespacevex/classvex_1_1competition/isAutonomous()","namespacevex/classvex_1_1competition/isCompetitionSwitch()","namespacevex/classvex_1_1competition/isFieldControl()","namespacevex/classvex_1_1controller/ButtonL1","namespacevex/classvex_1_1controller/ButtonL2","namespacevex/classvex_1_1controller/ButtonR1","namespacevex/classvex_1_1controller/ButtonR2","namespacevex/classvex_1_1controller/ButtonUp","namespacevex/classvex_1_1controller/ButtonDown","namespacevex/classvex_1_1controller/ButtonLeft","namespacevex/classvex_1_1controller/ButtonRight","namespacevex/classvex_1_1controller/ButtonX","namespacevex/classvex_1_1controller/ButtonB","namespacevex/classvex_1_1controller/ButtonY","namespacevex/classvex_1_1controller/ButtonA","namespacevex/classvex_1_1controller/Axis1","namespacevex/classvex_1_1controller/Axis2","namespacevex/classvex_1_1controller/Axis3","namespacevex/classvex_1_1controller/Axis4","namespacevex/classvex_1_1controller/Screen","namespacevex/classvex_1_1controller/controller()","namespacevex/classvex_1_1controller/controller(controllerType id)","namespacevex/classvex_1_1controller/rumble(const char *str)","namespacevex/classvex_1_1controller_1_1axis/changed(void(*callback)(void))","namespacevex/classvex_1_1controller_1_1axis/value(void)","namespacevex/classvex_1_1controller_1_1axis/position(percentUnits units)","namespacevex/classvex_1_1controller_1_1button/pressed(void(*callback)(void))","namespacevex/classvex_1_1controller_1_1button/released(void(*callback)(void))","namespacevex/classvex_1_1controller_1_1button/pressing(void)","namespacevex/classvex_1_1controller_1_1lcd/setCursor(int32_t row, int32_t col)","namespacevex/classvex_1_1controller_1_1lcd/print(const char *format,...)","namespacevex/classvex_1_1controller_1_1lcd/clearScreen(void)","namespacevex/classvex_1_1controller_1_1lcd/clearLine(void)","namespacevex/classvex_1_1controller_1_1lcd/clearLine(int number)","namespacevex/classvex_1_1controller_1_1lcd/newLine(void)","namespacevex/classvex_1_1digital__in/digital_in(triport::port &port)","namespacevex/classvex_1_1digital__in/value()","namespacevex/classvex_1_1digital__in/high(void(*callback)(void))","namespacevex/classvex_1_1digital__in/low(void(*callback)(void))","namespacevex/classvex_1_1digital__out/digital_out(triport::port &port)","namespacevex/classvex_1_1digital__out/value()","namespacevex/classvex_1_1digital__out/set(bool value)","namespacevex/classvex_1_1encoder/encoder(triport::port &port)","namespacevex/classvex_1_1encoder/resetRotation(void)","namespacevex/classvex_1_1encoder/setRotation(double val, rotationUnits units)","namespacevex/classvex_1_1encoder/rotation(rotationUnits units)","namespacevex/classvex_1_1encoder/velocity(velocityUnits units)","namespacevex/classvex_1_1encoder/changed(void(*callback)(void))","namespacevex/classvex_1_1gyro/gyro(triport::port &port)","namespacevex/classvex_1_1gyro/value(rotationUnits units)","namespacevex/classvex_1_1gyro/value(percentUnits units)","namespacevex/classvex_1_1gyro/value(analogUnits units)","namespacevex/classvex_1_1gyro/startCalibration(int32_t value=0)","namespacevex/classvex_1_1gyro/isCalibrating()","namespacevex/classvex_1_1gyro/changed(void(*callback)(void))","namespacevex/classvex_1_1light/light(triport::port &port)","namespacevex/classvex_1_1light/value(percentUnits units)","namespacevex/classvex_1_1light/value(analogUnits units)","namespacevex/classvex_1_1light/changed(void(*callback)(void))","namespacevex/classvex_1_1limit/limit(triport::port &port)","namespacevex/classvex_1_1limit/pressing()","namespacevex/classvex_1_1limit/pressed(void(*callback)(void))","namespacevex/classvex_1_1limit/released(void(*callback)(void))","namespacevex/classvex_1_1line/line(triport::port &port)","namespacevex/classvex_1_1line/value(percentUnits units)","namespacevex/classvex_1_1line/value(analogUnits units)","namespacevex/classvex_1_1line/changed(void(*callback)(void))","namespacevex/classvex_1_1motor/motor(int32_t index)","namespacevex/classvex_1_1motor/motor(int32_t index, bool reverse)","namespacevex/classvex_1_1motor/motor(int32_t index, gearSetting gears)","namespacevex/classvex_1_1motor/motor(int32_t index, gearSetting gears, bool reverse)","namespacevex/classvex_1_1motor/setReversed(bool value)","namespacevex/classvex_1_1motor/setVelocity(double velocity, velocityUnits units)","namespacevex/classvex_1_1motor/setStopping(brakeType mode)","namespacevex/classvex_1_1motor/resetRotation(void)","namespacevex/classvex_1_1motor/setRotation(double value, rotationUnits units)","namespacevex/classvex_1_1motor/setTimeout(int32_t time, timeUnits units)","namespacevex/classvex_1_1motor/spin(directionType dir)","namespacevex/classvex_1_1motor/spin(directionType dir, double velocity, velocityUnits units)","namespacevex/classvex_1_1motor/rotateTo(double rotation, rotationUnits units, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/rotateTo(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/rotateFor(double time, timeUnits units)","namespacevex/classvex_1_1motor/rotateFor(double time, timeUnits units, double velocity, velocityUnits units_v)","namespacevex/classvex_1_1motor/rotateFor(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/startRotateTo(double rotation, rotationUnits units)","namespacevex/classvex_1_1motor/startRotateTo(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","namespacevex/classvex_1_1motor/startRotateFor(double rotation, rotationUnits units)","namespacevex/classvex_1_1motor/startRotateFor(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","namespacevex/classvex_1_1motor/isSpinning()","namespacevex/classvex_1_1motor/stop(void)","namespacevex/classvex_1_1motor/stop(brakeType mode)","namespacevex/classvex_1_1motor/setMaxTorque(double value, percentUnits units)","namespacevex/classvex_1_1motor/setMaxTorque(double value, torqueUnits units)","namespacevex/classvex_1_1motor/setMaxTorque(double value, currentUnits units)","namespacevex/classvex_1_1motor/direction(void)","namespacevex/classvex_1_1motor/rotation(rotationUnits units)","namespacevex/classvex_1_1motor/velocity(velocityUnits units)","namespacevex/classvex_1_1motor/current(currentUnits units)","namespacevex/classvex_1_1motor/power(powerUnits units)","namespacevex/classvex_1_1motor/torque(torqueUnits units)","namespacevex/classvex_1_1motor/efficiency(percentUnits units)","namespacevex/classvex_1_1motor/temperature(percentUnits units)","namespacevex/classvex_1_1motor29/motor29(triport::port &port)","namespacevex/classvex_1_1motor29/motor29(triport::port &port, bool reverse)","namespacevex/classvex_1_1motor29/setVelocity(double velocity, percentUnits units)","namespacevex/classvex_1_1motor29/setReversed(bool value)","namespacevex/classvex_1_1motor29/spin(directionType dir)","namespacevex/classvex_1_1motor29/spin(directionType dir, double velocity, velocityUnits units)","namespacevex/classvex_1_1motor29/stop(void)","namespacevex/classvex_1_1motor__victor/motor_victor(triport::port &port)","namespacevex/classvex_1_1motor__victor/motor_victor(triport::port &port, bool reverse)","namespacevex/classvex_1_1motor__victor/setVelocity(double velocity, percentUnits units)","namespacevex/classvex_1_1motor__victor/setReversed(bool value)","namespacevex/classvex_1_1motor__victor/spin(directionType dir)","namespacevex/classvex_1_1motor__victor/spin(directionType dir, double velocity, velocityUnits units)","namespacevex/classvex_1_1motor__victor/stop(void)","namespacevex/classvex_1_1mutex/lock()","namespacevex/classvex_1_1mutex/try_lock()","namespacevex/classvex_1_1mutex/unlock()","namespacevex/classvex_1_1pot/pot(triport::port &port)","namespacevex/classvex_1_1pot/value(percentUnits units)","namespacevex/classvex_1_1pot/value(rotationUnits units)","namespacevex/classvex_1_1pot/value(analogUnits units)","namespacevex/classvex_1_1pot/changed(void(*callback)(void))","namespacevex/classvex_1_1pwm__out/pwm_out(triport::port &port)","namespacevex/classvex_1_1pwm__out/state(int32_t value, percentUnits units)","namespacevex/classvex_1_1semaphore/lock()","namespacevex/classvex_1_1semaphore/lock(uint32_t time)","namespacevex/classvex_1_1semaphore/unlock()","namespacevex/classvex_1_1semaphore/owner()","namespacevex/classvex_1_1servo/servo(triport::port &port)","namespacevex/classvex_1_1servo/position(int32_t value, percentUnits units)","namespacevex/classvex_1_1servo/position(double value, rotationUnits units)","namespacevex/classvex_1_1sonar/sonar(triport::port &port)","namespacevex/classvex_1_1sonar/distance(distanceUnits units)","namespacevex/classvex_1_1sonar/changed(void(*callback)(void))","namespacevex/classvex_1_1task/task(int(*callback)(void))","namespacevex/classvex_1_1task/task(int(*callback)(void), int32_t priority)","namespacevex/classvex_1_1task/stop()","namespacevex/classvex_1_1task/stop(int(*callback)(void))","namespacevex/classvex_1_1task/suspend()","namespacevex/classvex_1_1task/resume()","namespacevex/classvex_1_1task/priority()","namespacevex/classvex_1_1task/setPriority(int32_t priority)","namespacevex/classvex_1_1task/sleep(uint32_t time)","namespacevex/classvex_1_1task/yield()","namespacevex/classvex_1_1thread/thread(int(*callback)(void))","namespacevex/classvex_1_1thread/thread(void(*callback)(void))","namespacevex/classvex_1_1thread/get_id()","namespacevex/classvex_1_1thread/join()","namespacevex/classvex_1_1thread/detach()","namespacevex/classvex_1_1thread/joinable()","namespacevex/classvex_1_1thread/native_handle()","namespacevex/classvex_1_1thread/swap(thread &__t)","namespacevex/classvex_1_1thread/swap(thread &__x, thread &__y)","namespacevex/classvex_1_1thread/interrupt()","namespacevex/classvex_1_1thread/setPriority(int32_t priority)","namespacevex/classvex_1_1thread/priority()","namespacevex/classvex_1_1thread/hardware_concurrency()","namespacevex/classvex_1_1timer/time() const","namespacevex/classvex_1_1timer/time(timeUnits units) const","namespacevex/classvex_1_1timer/clear()","namespacevex/classvex_1_1timer/system()","namespacevex/classvex_1_1timer/systemHighResolution()","namespacevex/classvex_1_1timer/event(void(*callback)(void), uint32_t value)","namespacevex/classvex_1_1timer/event(void(*callback)(void *), uint32_t value)","namespacevex/classvex_1_1vision/objectCount","namespacevex/classvex_1_1vision/largestObject","namespacevex/classvex_1_1vision/objects","namespacevex/classvex_1_1vision/vision(int32_t index)","namespacevex/classvex_1_1vision/vision(int32_t index, uint8_t bright, Args... sigs)","namespacevex/classvex_1_1vision/takeSnapshot(signature &sig)","namespacevex/classvex_1_1vision/takeSnapshot(code &cc)","namespacevex/classvex_1_1vision/takeSnapshot(uint32_t id)","namespacevex/classvex_1_1vision/takeSnapshot(code &cc, uint32_t count)","namespacevex/classvex_1_1vision/takeSnapshot(uint32_t id, uint32_t count)","namespacevex/classvex_1_1vision/takeSnapshot(signature &sig, uint32_t count)","namespacevex/classvex_1_1vision/setLedMode(ledMode mode)","namespacevex/classvex_1_1vision/getLedMode(void)","namespacevex/classvex_1_1vision/setLedBrightness(uint8_t percent)","namespacevex/classvex_1_1vision/getLedBrightness(void)","namespacevex/classvex_1_1vision/setLedColor(uint8_t red, uint8_t green, uint8_t blue)","namespacevex/classvex_1_1vision/getLedColor(uint8_t *red, uint8_t *green, uint8_t *blue)","namespacevex/classvex_1_1vision_1_1code/code(signature &s1, signature &s2)","namespacevex/classvex_1_1vision_1_1object/id","namespacevex/classvex_1_1vision_1_1object/originX","namespacevex/classvex_1_1vision_1_1object/originY","namespacevex/classvex_1_1vision_1_1object/centerX","namespacevex/classvex_1_1vision_1_1object/centerY","namespacevex/classvex_1_1vision_1_1object/width","namespacevex/classvex_1_1vision_1_1object/height","namespacevex/classvex_1_1vision_1_1object/angle","namespacevex/classvex_1_1vision_1_1object/exists","namespacevex/classvex_1_1vision_1_1object/object()","namespacevex/classvex_1_1vision_1_1object/set(V5_DeviceVisionObject obj)","namespacevex/classvex_1_1vision_1_1object/flipAngle()","namespacevex/classvex_1_1vision_1_1object/clear()","namespacevex/classvex_1_1vision_1_1signature/signature(int32_t id, int32_t uMin, int32_t uMax, int32_t uMean, int32_t vMin, int32_t vMax, int32_t vMean, float range, int32_t type)","namespacevex_1_1this__thread/get_id()","namespacevex_1_1this__thread/yield()","namespacevex_1_1this__thread/sleep_for(const std::chrono::duration< _Rep, _Period > &__rtime)","namespacevex_1_1this__thread/sleep_until(const std::chrono::time_point< _Clock, _Duration > &__atime)","namespacevex_1_1this__thread/setPriority(int32_t priority)","namespacevex_1_1this__thread/priority()"],"removed":[]},"cpp":{"added":["namespacevex/classvex_1_1accelerometer/accelerometer(triport::port &port)","namespacevex/classvex_1_1accelerometer/value(percentUnits units)","namespacevex/classvex_1_1accelerometer/value(analogUnits units)","namespacevex/classvex_1_1analog__in/analog_in(triport::port &port)","namespacevex/classvex_1_1analog__in/value(percentUnits units)","namespacevex/classvex_1_1analog__in/value(analogUnits units)","namespacevex/classvex_1_1brain/Timer","namespacevex/classvex_1_1brain/Screen","namespacevex/classvex_1_1brain/Battery","namespacevex/classvex_1_1brain/brain()","namespacevex/classvex_1_1brain/timer(timeUnits units)","namespacevex/classvex_1_1brain/resetTimer()","namespacevex/classvex_1_1brain/setTimer(double value, timeUnits units)","namespacevex/classvex_1_1brain_1_1battery/capacity(percentUnits units=percentUnits::pct)","namespacevex/classvex_1_1brain_1_1battery/temperature(percentUnits units=percentUnits::pct)","namespacevex/classvex_1_1brain_1_1lcd/setCursor(int32_t row, int32_t col)","namespacevex/classvex_1_1brain_1_1lcd/setFont(fontType font)","namespacevex/classvex_1_1brain_1_1lcd/setPenWidth(uint32_t width)","namespacevex/classvex_1_1brain_1_1lcd/setOrigin(int32_t x, int32_t y)","namespacevex/classvex_1_1brain_1_1lcd/column()","namespacevex/classvex_1_1brain_1_1lcd/row()","namespacevex/classvex_1_1brain_1_1lcd/setPenColor(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/setFillColor(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/print(const char *format,...)","namespacevex/classvex_1_1brain_1_1lcd/printAt(int32_t x, int32_t y, const char *format,...)","namespacevex/classvex_1_1brain_1_1lcd/clearScreen(void)","namespacevex/classvex_1_1brain_1_1lcd/clearScreen(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/clearLine(void)","namespacevex/classvex_1_1brain_1_1lcd/clearLine(int number, const color &color)","namespacevex/classvex_1_1brain_1_1lcd/newLine(void)","namespacevex/classvex_1_1brain_1_1lcd/drawPixel(int x, int y)","namespacevex/classvex_1_1brain_1_1lcd/drawLine(int x1, int y1, int x2, int y2)","namespacevex/classvex_1_1brain_1_1lcd/drawRectangle(int x, int y, int width, int height)","namespacevex/classvex_1_1brain_1_1lcd/drawRectangle(int x, int y, int width, int height, const color &color)","namespacevex/classvex_1_1brain_1_1lcd/drawCircle(int x, int y, int radius)","namespacevex/classvex_1_1brain_1_1lcd/drawCircle(int x, int y, int radius, const color &color)","namespacevex/classvex_1_1brain_1_1lcd/pressed(void(*callback)(void))","namespacevex/classvex_1_1brain_1_1lcd/released(void(*callback)(void))","namespacevex/classvex_1_1brain_1_1lcd/xPosition()","namespacevex/classvex_1_1brain_1_1lcd/yPosition()","namespacevex/classvex_1_1brain_1_1lcd/pressing()","namespacevex/classvex_1_1bumper/bumper(triport::port &port)","namespacevex/classvex_1_1bumper/pressing()","namespacevex/classvex_1_1color/black","namespacevex/classvex_1_1color/white","namespacevex/classvex_1_1color/red","namespacevex/classvex_1_1color/green","namespacevex/classvex_1_1color/blue","namespacevex/classvex_1_1color/yellow","namespacevex/classvex_1_1color/orange","namespacevex/classvex_1_1color/purple","namespacevex/classvex_1_1color/cyan","namespacevex/classvex_1_1color/transparent","namespacevex/classvex_1_1color/color(int value)","namespacevex/classvex_1_1color/color(uint8_t r, uint8_t g, uint8_t b)","namespacevex/classvex_1_1color/isTransparent() const","namespacevex/classvex_1_1competition/bStopTasksBetweenModes","namespacevex/classvex_1_1competition/autonomous(void(*callback)(void))","namespacevex/classvex_1_1competition/drivercontrol(void(*callback)(void))","namespacevex/classvex_1_1competition/isEnabled()","namespacevex/classvex_1_1competition/isDriverControl()","namespacevex/classvex_1_1competition/isAutonomous()","namespacevex/classvex_1_1competition/isCompetitionSwitch()","namespacevex/classvex_1_1competition/isFieldControl()","namespacevex/classvex_1_1controller/ButtonL1","namespacevex/classvex_1_1controller/ButtonL2","namespacevex/classvex_1_1controller/ButtonR1","namespacevex/classvex_1_1controller/ButtonR2","namespacevex/classvex_1_1controller/ButtonUp","namespacevex/classvex_1_1controller/ButtonDown","namespacevex/classvex_1_1controller/ButtonLeft","namespacevex/classvex_1_1controller/ButtonRight","namespacevex/classvex_1_1controller/ButtonX","namespacevex/classvex_1_1controller/ButtonB","namespacevex/classvex_1_1controller/ButtonY","namespacevex/classvex_1_1controller/ButtonA","namespacevex/classvex_1_1controller/Axis1","namespacevex/classvex_1_1controller/Axis2","namespacevex/classvex_1_1controller/Axis3","namespacevex/classvex_1_1controller/Axis4","namespacevex/classvex_1_1controller/Screen","namespacevex/classvex_1_1controller/controller()","namespacevex/classvex_1_1controller/controller(controllerType id)","namespacevex/classvex_1_1controller/rumble(const char *str)","namespacevex/classvex_1_1controller_1_1axis/changed(void(*callback)(void))","namespacevex/classvex_1_1controller_1_1axis/value(void)","namespacevex/classvex_1_1controller_1_1axis/position(percentUnits units)","namespacevex/classvex_1_1controller_1_1button/pressed(void(*callback)(void))","namespacevex/classvex_1_1controller_1_1button/released(void(*callback)(void))","namespacevex/classvex_1_1controller_1_1button/pressing(void)","namespacevex/classvex_1_1controller_1_1lcd/setCursor(int32_t row, int32_t col)","namespacevex/classvex_1_1controller_1_1lcd/print(const char *format,...)","namespacevex/classvex_1_1controller_1_1lcd/clearScreen(void)","namespacevex/classvex_1_1controller_1_1lcd/clearLine(void)","namespacevex/classvex_1_1controller_1_1lcd/clearLine(int number)","namespacevex/classvex_1_1controller_1_1lcd/newLine(void)","namespacevex/classvex_1_1digital__in/digital_in(triport::port &port)","namespacevex/classvex_1_1digital__in/value()","namespacevex/classvex_1_1digital__out/digital_out(triport::port &port)","namespacevex/classvex_1_1digital__out/value()","namespacevex/classvex_1_1digital__out/set(bool value)","namespacevex/classvex_1_1encoder/encoder(triport::port &port)","namespacevex/classvex_1_1encoder/resetRotation(void)","namespacevex/classvex_1_1encoder/setRotation(double val, rotationUnits units)","namespacevex/classvex_1_1encoder/rotation(rotationUnits units)","namespacevex/classvex_1_1encoder/velocity(velocityUnits units)","namespacevex/classvex_1_1gyro/gyro(triport::port &port)","namespacevex/classvex_1_1gyro/value(rotationUnits units)","namespacevex/classvex_1_1gyro/value(percentUnits units)","namespacevex/classvex_1_1gyro/value(analogUnits units)","namespacevex/classvex_1_1light/light(triport::port &port)","namespacevex/classvex_1_1light/value(percentUnits units)","namespacevex/classvex_1_1light/value(analogUnits units)","namespacevex/classvex_1_1limit/limit(triport::port &port)","namespacevex/classvex_1_1limit/pressing()","namespacevex/classvex_1_1line/line(triport::port &port)","namespacevex/classvex_1_1line/value(percentUnits units)","namespacevex/classvex_1_1line/value(analogUnits units)","namespacevex/classvex_1_1motor/motor(int32_t index)","namespacevex/classvex_1_1motor/motor(int32_t index, bool reverse)","namespacevex/classvex_1_1motor/motor(int32_t index, gearSetting gears)","namespacevex/classvex_1_1motor/motor(int32_t index, gearSetting gears, bool reverse)","namespacevex/classvex_1_1motor/setReversed(bool value)","namespacevex/classvex_1_1motor/setVelocity(double velocity, velocityUnits units)","namespacevex/classvex_1_1motor/setStopping(brakeType mode)","namespacevex/classvex_1_1motor/resetRotation(void)","namespacevex/classvex_1_1motor/setRotation(double value, rotationUnits units)","namespacevex/classvex_1_1motor/setTimeout(int32_t time, timeUnits units)","namespacevex/classvex_1_1motor/spin(directionType dir)","namespacevex/classvex_1_1motor/spin(directionType dir, double velocity, velocityUnits units)","namespacevex/classvex_1_1motor/rotateTo(double rotation, rotationUnits units, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/rotateTo(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/rotateFor(double time, timeUnits units)","namespacevex/classvex_1_1motor/rotateFor(double time, timeUnits units, double velocity, velocityUnits units_v)","namespacevex/classvex_1_1motor/rotateFor(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/startRotateTo(double rotation, rotationUnits units)","namespacevex/classvex_1_1motor/startRotateTo(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","namespacevex/classvex_1_1motor/startRotateFor(double rotation, rotationUnits units)","namespacevex/classvex_1_1motor/startRotateFor(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","namespacevex/classvex_1_1motor/isSpinning()","namespacevex/classvex_1_1motor/stop(void)","namespacevex/classvex_1_1motor/stop(brakeType mode)","namespacevex/classvex_1_1motor/setMaxTorque(double value, percentUnits units)","namespacevex/classvex_1_1motor/direction(void)","namespacevex/classvex_1_1motor/rotation(rotationUnits units)","namespacevex/classvex_1_1motor/velocity(velocityUnits units)","namespacevex/classvex_1_1motor/current(currentUnits units)","namespacevex/classvex_1_1motor/power(powerUnits units)","namespacevex/classvex_1_1motor/torque(torqueUnits units)","namespacevex/classvex_1_1motor/efficiency(percentUnits units)","namespacevex/classvex_1_1motor/temperature(percentUnits units)","namespacevex/classvex_1_1motor29/motor29(triport::port &port)","namespacevex/classvex_1_1motor29/motor29(triport::port &port, bool reverse)","namespacevex/classvex_1_1motor29/setVelocity(double velocity, percentUnits units)","namespacevex/classvex_1_1motor29/setReversed(bool value)","namespacevex/classvex_1_1motor29/spin(directionType dir)","namespacevex/classvex_1_1motor29/spin(directionType dir, double velocity, velocityUnits units)","namespacevex/classvex_1_1motor29/stop(void)","namespacevex/classvex_1_1motor__victor/motor_victor(triport::port &port)","namespacevex/classvex_1_1motor__victor/motor_victor(triport::port &port, bool reverse)","namespacevex/classvex_1_1motor__victor/setVelocity(double velocity, percentUnits units)","namespacevex/classvex_1_1motor__victor/setReversed(bool value)","namespacevex/classvex_1_1motor__victor/spin(directionType dir)","namespacevex/classvex_1_1motor__victor/spin(directionType dir, double velocity, velocityUnits units)","namespacevex/classvex_1_1motor__victor/stop(void)","namespacevex/classvex_1_1pot/pot(triport::port &port)","namespacevex/classvex_1_1pot/value(percentUnits units)","namespacevex/classvex_1_1pot/value(rotationUnits units)","namespacevex/classvex_1_1pot/value(analogUnits units)","namespacevex/classvex_1_1pwm__out/pwm_out(triport::port &port)","namespacevex/classvex_1_1pwm__out/state(int32_t value, percentUnits units)","namespacevex/classvex_1_1servo/servo(triport::port &port)","namespacevex/classvex_1_1servo/position(int32_t value, percentUnits units)","namespacevex/classvex_1_1servo/position(double value, rotationUnits units)","namespacevex/classvex_1_1sonar/sonar(triport::port &port)","namespacevex/classvex_1_1sonar/distance(distanceUnits units)","namespacevex/classvex_1_1task/task(int(*callback)(void))","namespacevex/classvex_1_1task/task(int(*callback)(void), int32_t priority)","namespacevex/classvex_1_1task/stop()","namespacevex/classvex_1_1task/stop(int(*callback)(void))","namespacevex/classvex_1_1task/priority()","namespacevex/classvex_1_1task/setPriority(int32_t priority)","namespacevex/classvex_1_1task/sleep(uint32_t time)","namespacevex/classvex_1_1task/yield()","namespacevex/classvex_1_1vision/objectCount","namespacevex/classvex_1_1vision/largestObject","namespacevex/classvex_1_1vision/objects","namespacevex/classvex_1_1vision/vision(int32_t index)","namespacevex/classvex_1_1vision/vision(int32_t index, uint8_t bright, Args... sigs)","namespacevex/classvex_1_1vision/takeSnapshot(signature &sig)","namespacevex/classvex_1_1vision/takeSnapshot(code &cc)","namespacevex/classvex_1_1vision/takeSnapshot(uint32_t id)","namespacevex/classvex_1_1vision/takeSnapshot(code &cc, uint32_t count)","namespacevex/classvex_1_1vision/takeSnapshot(uint32_t id, uint32_t count)","namespacevex/classvex_1_1vision/takeSnapshot(signature &sig, uint32_t count)","namespacevex/classvex_1_1vision/setLedMode(ledMode mode)","namespacevex/classvex_1_1vision/getLedMode(void)","namespacevex/classvex_1_1vision/setLedBrightness(uint8_t percent)","namespacevex/classvex_1_1vision/getLedBrightness(void)","namespacevex/classvex_1_1vision/setLedColor(uint8_t red, uint8_t green, uint8_t blue)","namespacevex/classvex_1_1vision/getLedColor(uint8_t *red, uint8_t *green, uint8_t *blue)","namespacevex/classvex_1_1vision_1_1code/code(signature &s1, signature &s2)","namespacevex/classvex_1_1vision_1_1object/id","namespacevex/classvex_1_1vision_1_1object/originX","namespacevex/classvex_1_1vision_1_1object/originY","namespacevex/classvex_1_1vision_1_1object/centerX","namespacevex/classvex_1_1vision_1_1object/centerY","namespacevex/classvex_1_1vision_1_1object/width","namespacevex/classvex_1_1vision_1_1object/height","namespacevex/classvex_1_1vision_1_1object/angle","namespacevex/classvex_1_1vision_1_1object/exists","namespacevex/classvex_1_1vision_1_1signature/signature(int32_t id, int32_t uMin, int32_t uMax, int32_t uMean, int32_t vMin, int32_t vMax, int32_t vMean, float range, int32_t type)"],"removed":[]},"block":{"added":["namespacevex/classvex_1_1accelerometer/value(percentUnits units)","namespacevex/classvex_1_1analog__in/value(percentUnits units)","namespacevex/classvex_1_1brain/Timer","namespacevex/classvex_1_1brain/Screen","namespacevex/classvex_1_1brain/Battery","namespacevex/classvex_1_1brain/timer(timeUnits units)","namespacevex/classvex_1_1brain/resetTimer()","namespacevex/classvex_1_1brain/setTimer(double value, timeUnits units)","namespacevex/classvex_1_1brain_1_1battery/capacity(percentUnits units=percentUnits::pct)","namespacevex/classvex_1_1brain_1_1battery/temperature(percentUnits units=percentUnits::pct)","namespacevex/classvex_1_1brain_1_1lcd/setCursor(int32_t row, int32_t col)","namespacevex/classvex_1_1brain_1_1lcd/setFont(fontType font)","namespacevex/classvex_1_1brain_1_1lcd/setPenWidth(uint32_t width)","namespacevex/classvex_1_1brain_1_1lcd/column()","namespacevex/classvex_1_1brain_1_1lcd/row()","namespacevex/classvex_1_1brain_1_1lcd/setPenColor(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/setFillColor(const color &color)","namespacevex/classvex_1_1brain_1_1lcd/print(T value)","namespacevex/classvex_1_1brain_1_1lcd/clearScreen(void)","namespacevex/classvex_1_1brain_1_1lcd/clearLine(void)","namespacevex/classvex_1_1brain_1_1lcd/newLine(void)","namespacevex/classvex_1_1brain_1_1lcd/drawPixel(int x, int y)","namespacevex/classvex_1_1brain_1_1lcd/drawLine(int x1, int y1, int x2, int y2)","namespacevex/classvex_1_1brain_1_1lcd/drawRectangle(int x, int y, int width, int height)","namespacevex/classvex_1_1brain_1_1lcd/drawCircle(int x, int y, int radius)","namespacevex/classvex_1_1brain_1_1lcd/xPosition()","namespacevex/classvex_1_1brain_1_1lcd/yPosition()","namespacevex/classvex_1_1brain_1_1lcd/pressing()","namespacevex/classvex_1_1bumper/pressing()","namespacevex/classvex_1_1competition/bStopTasksBetweenModes","namespacevex/classvex_1_1competition/isEnabled()","namespacevex/classvex_1_1competition/isDriverControl()","namespacevex/classvex_1_1competition/isAutonomous()","namespacevex/classvex_1_1competition/isCompetitionSwitch()","namespacevex/classvex_1_1competition/isFieldControl()","namespacevex/classvex_1_1controller/ButtonL1","namespacevex/classvex_1_1controller/ButtonL2","namespacevex/classvex_1_1controller/ButtonR1","namespacevex/classvex_1_1controller/ButtonR2","namespacevex/classvex_1_1controller/ButtonUp","namespacevex/classvex_1_1controller/ButtonDown","namespacevex/classvex_1_1controller/ButtonLeft","namespacevex/classvex_1_1controller/ButtonRight","namespacevex/classvex_1_1controller/ButtonX","namespacevex/classvex_1_1controller/ButtonB","namespacevex/classvex_1_1controller/ButtonY","namespacevex/classvex_1_1controller/ButtonA","namespacevex/classvex_1_1controller/Axis1","namespacevex/classvex_1_1controller/Axis2","namespacevex/classvex_1_1controller/Axis3","namespacevex/classvex_1_1controller/Axis4","namespacevex/classvex_1_1controller/Screen","namespacevex/classvex_1_1controller/rumble(const char *str)","namespacevex/classvex_1_1controller_1_1axis/position(percentUnits units)","namespacevex/classvex_1_1controller_1_1button/pressing(void)","namespacevex/classvex_1_1controller_1_1lcd/setCursor(int32_t row, int32_t col)","namespacevex/classvex_1_1controller_1_1lcd/print(T value)","namespacevex/classvex_1_1controller_1_1lcd/clearScreen(void)","namespacevex/classvex_1_1controller_1_1lcd/clearLine(void)","namespacevex/classvex_1_1controller_1_1lcd/newLine(void)","namespacevex/classvex_1_1digital__in/value()","namespacevex/classvex_1_1digital__out/value()","namespacevex/classvex_1_1digital__out/set(bool value)","namespacevex/classvex_1_1encoder/resetRotation(void)","namespacevex/classvex_1_1encoder/setRotation(double val, rotationUnits units)","namespacevex/classvex_1_1encoder/rotation(rotationUnits units)","namespacevex/classvex_1_1encoder/velocity(velocityUnits units)","namespacevex/classvex_1_1gyro/value(rotationUnits units)","namespacevex/classvex_1_1gyro/value(percentUnits units)","namespacevex/classvex_1_1light/value(percentUnits units)","namespacevex/classvex_1_1limit/pressing()","namespacevex/classvex_1_1line/value(percentUnits units)","namespacevex/classvex_1_1motor/setVelocity(double velocity, percentUnits units)","namespacevex/classvex_1_1motor/setStopping(brakeType mode)","namespacevex/classvex_1_1motor/setRotation(double value, rotationUnits units)","namespacevex/classvex_1_1motor/setTimeout(int32_t time, timeUnits units)","namespacevex/classvex_1_1motor/spin(directionType dir)","namespacevex/classvex_1_1motor/rotateTo(double rotation, rotationUnits units, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)","namespacevex/classvex_1_1motor/startRotateTo(double rotation, rotationUnits units)","namespacevex/classvex_1_1motor/startRotateFor(double rotation, rotationUnits units)","namespacevex/classvex_1_1motor/isSpinning()","namespacevex/classvex_1_1motor/stop(void)","namespacevex/classvex_1_1motor/setMaxTorque(double value, percentUnits units)","namespacevex/classvex_1_1motor/direction(void)","namespacevex/classvex_1_1motor/rotation(rotationUnits units)","namespacevex/classvex_1_1motor/velocity(velocityUnits units)","namespacevex/classvex_1_1motor/current(currentUnits units)","namespacevex/classvex_1_1motor/power(powerUnits units)","namespacevex/classvex_1_1motor/torque(torqueUnits units)","namespacevex/classvex_1_1motor/efficiency(percentUnits units)","namespacevex/classvex_1_1motor/temperature(percentUnits units)","namespacevex/classvex_1_1motor29/setVelocity(double velocity, percentUnits units)","namespacevex/classvex_1_1motor29/spin(directionType dir)","namespacevex/classvex_1_1motor29/stop(void)","namespacevex/classvex_1_1motor__victor/setVelocity(double velocity, percentUnits units)","namespacevex/classvex_1_1motor__victor/spin(directionType dir)","namespacevex/classvex_1_1motor__victor/stop(void)","namespacevex/classvex_1_1pot/value(percentUnits units)","namespacevex/classvex_1_1pot/value(rotationUnits units)","namespacevex/classvex_1_1pwm__out/state(int32_t value, percentUnits units)","namespacevex/classvex_1_1servo/position(int32_t value, percentUnits units)","namespacevex/classvex_1_1sonar/distance(distanceUnits units)","namespacevex/classvex_1_1vision/objectCount","namespacevex/classvex_1_1vision/largestObject","namespacevex/classvex_1_1vision/objects","namespacevex/classvex_1_1vision/takeSnapshot(signature &sig)","namespacevex/classvex_1_1vision_1_1object/id","namespacevex/classvex_1_1vision_1_1object/originX","namespacevex/classvex_1_1vision_1_1object/originY","namespacevex/classvex_1_1vision_1_1object/centerX","namespacevex/classvex_1_1vision_1_1object/centerY","namespacevex/classvex_1_1vision_1_1object/width","namespacevex/classvex_1_1vision_1_1object/height","namespacevex/classvex_1_1vision_1_1object/angle","namespacevex/classvex_1_1vision_1_1object/exists"],"removed":[]}}]}