{"drawer":[{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::accelerometer</span> <span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span> = <span class=\"cm-def\">vex::accelerometer</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">accelerometer</span> <span class=\"cm-instance\" data-type=\"accelerometer\">Accelerometer</span> = <span class=\"cm-def\">accelerometer</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::accelerometer::accelerometer","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::accelerometer","description":"Creates a new accelerometer object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::analogUnits::range8bit</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">analogUnits::range8bit</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the accelerometer sensor."}],"definition":"int32_t vex::accelerometer::value","argsstring":"(analogUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::accelerometer","description":"Gets the value of the accelerometer.","params":[{"type":"analogUnits","name":"units","description":"The measurement unit for the accelerometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the accelerometer sensor."}],"definition":"int32_t vex::accelerometer::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::accelerometer","description":"Gets the value of the accelerometer.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the accelerometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the accelerometer sensor."}],"definition":"int32_t vex::accelerometer::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::accelerometer","description":"Gets the value of the accelerometer.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the accelerometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::accelerometer\">Accelerometer</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::accelerometer::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::accelerometer","description":"Calls a function when the accelerometer value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::analog_in</span> <span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog_in</span> = <span class=\"cm-def\">vex::analog_in</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">analog_in</span> <span class=\"cm-instance\" data-type=\"analog_in\">Analog_in</span> = <span class=\"cm-def\">analog_in</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::analog_in::analog_in","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::analog_in","description":"Creates a new analog-in object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::analogUnits::range8bit</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">analogUnits::range8bit</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the analog-in device."}],"definition":"int32_t vex::analog_in::value","argsstring":"(analogUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::analog_in","description":"Gets the value of the analog-in device.","params":[{"type":"analogUnits","name":"units","description":"The measurement unit for the analog-in device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the analog-in device."}],"definition":"int32_t vex::analog_in::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::analog_in","description":"Gets the value of the analog-in device.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the analog-in device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the analog-in device."}],"definition":"int32_t vex::analog_in::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::analog_in","description":"Gets the value of the analog-in device.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the analog-in device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::analog_in\">Analog</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::analog_in::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::analog_in","description":"Calls a function when the analog input value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::brain</span> <span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span> = <span class=\"cm-def\">vex::brain</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">brain</span> <span class=\"cm-instance\" data-type=\"brain\">Brain</span> = <span class=\"cm-def\">brain</span>();</span></pre>","definition":"vex::brain::brain","argsstring":"()","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::brain","description":"Creates a new brain object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-sensing\">timer</span>(<span class=\"cm-variable\">seconds</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-sensing\">timer</span>(<span class=\"cm-variable\">seconds</span>);</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the value of the timer."}],"definition":"double vex::brain::timer","argsstring":"(timeUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::brain","description":"Gets the value of the timer in the units specified.","params":[{"type":"timeUnits","name":"units","description":"The unit of time that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-sensing\">timer</span>(<span class=\"cm-variable\">vex::timeUnits::sec</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-sensing\">timer</span>(<span class=\"cm-variable\">timeUnits::sec</span>);</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the value of the timer."}],"definition":"double vex::brain::timer","argsstring":"(timeUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::brain","description":"Gets the value of the timer in the units specified.","params":[{"type":"timeUnits","name":"units","description":"The unit of time that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-setting\">resetTimer</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-setting\">resetTimer</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::resetTimer","argsstring":"()","static":"no","category":"setting","languages":["block","cpp","pro"],"class":"vex::brain","description":"Resets the timer to zero."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-setting\">setTimer</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">seconds</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-setting\">setTimer</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">seconds</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::setTimer","argsstring":"(double value, timeUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::brain","description":"Sets the timer to a value and time unit.","params":[{"type":"double","name":"value","description":"The value that the timer is set to."},{"type":"timeUnits","name":"units","description":"The unit of time that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-setting\">setTimer</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">vex::timeUnits::sec</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-setting\">setTimer</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">timeUnits::sec</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::setTimer","argsstring":"(double value, timeUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::brain","description":"Sets the timer to a value and time unit.","params":[{"type":"double","name":"value","description":"The value that the timer is set to."},{"type":"timeUnits","name":"units","description":"The unit of time that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setCursor</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setCursor</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setCursor","argsstring":"(int32_t row, int32_t col)","static":"no","category":"setting","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Sets the cursor to the row and column number set in the parameters.","params":[{"type":"int32_t","name":"row","description":"Sets the row number for where the cursor is placed."},{"type":"int32_t","name":"col","description":"Sets the column number for where the cursor is placed."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFont</span>(<span class=\"cm-variable\">mono20</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFont</span>(<span class=\"cm-variable\">mono20</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setFont","argsstring":"(fontType font)","static":"no","category":"setting","languages":["block"],"class":"vex::brain::lcd","description":"Sets the font type to be displayed on the Screen that is determined by the parameter.","params":[{"type":"fontType","name":"font","description":"The type of font that is displayed."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFont</span>(<span class=\"cm-variable\">vex::fontType::mono20</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFont</span>(<span class=\"cm-variable\">fontType::mono20</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setFont","argsstring":"(fontType font)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Sets the font type to be displayed on the Screen that is determined by the parameter.","params":[{"type":"fontType","name":"font","description":"The type of font that is displayed."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenWidth</span>(<span class =\"cm-number\">5</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenWidth</span>(<span class =\"cm-number\">5</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setPenWidth","argsstring":"(uint32_t width)","static":"no","category":"setting","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Sets the pen's width.","params":[{"type":"uint32_t","name":"width","description":"This represents the width of the pen when drawing. A larger width equals a wider pen stroke."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setOrigin</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setOrigin</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setOrigin","argsstring":"(int32_t x, int32_t y)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Sets the origin of the screen to the parameters defined in the function.","params":[{"type":"int32_t","name":"x","description":"The x location of the origin."},{"type":"int32_t","name":"y","description":"The y location of the origin."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">column</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">column</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that tracks the current cursor position's column, starting at 1."}],"definition":"int32_t vex::brain::lcd::column","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"An integer that tracks the current cursor position's column, starting at 1."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">row</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">row</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that tracks the current cursor position's row, starting at 1."}],"definition":"int32_t vex::brain::lcd::row","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"An integer that tracks the current cursor position's row, starting at 1."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class=\"cm-variable\">red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class=\"cm-variable\">red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setPenColor","argsstring":"(const color &color)","static":"no","category":"setting","languages":["block"],"class":"vex::brain::lcd","description":"Sets the color of the pen to a specified color.","params":[{"type":"color","name":"color","description":"A color unit where colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class=\"cm-variable\">vex::color::red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class=\"cm-variable\">color::red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setPenColor","argsstring":"(const color &color)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Sets the color of the pen to a specified color.","params":[{"type":"color","name":"color","description":"A color unit where colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setPenColor","argsstring":"(const char *color)","static":"no","category":"setting","languages":["pro"],"class":"vex::brain::lcd","description":"Sets the color of the pen to a specified color using a hex value.","params":[{"type":"const char *","name":"color","description":"A hexadecimal value that represents color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setPenColor</span>(<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setPenColor","argsstring":"(int hue)","static":"no","category":"setting","languages":["pro"],"class":"vex::brain::lcd","description":"Sets the color of the pen to a specified color.","params":[{"type":"int","name":"hue","description":"The integer represents the hue of the color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class=\"cm-variable\">red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class=\"cm-variable\">red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setFillColor","argsstring":"(const color &color)","static":"no","category":"setting","languages":["block"],"class":"vex::brain::lcd","description":"Sets the background fill color of the screen to the specified color.","params":[{"type":"color","name":"color","description":"In a color unit, colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class=\"cm-variable\">vex::color::red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class=\"cm-variable\">color::red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setFillColor","argsstring":"(const color &color)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Sets the background fill color of the screen to the specified color.","params":[{"type":"color","name":"color","description":"In a color unit, colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setFillColor","argsstring":"(const char *color)","static":"no","category":"setting","languages":["pro"],"class":"vex::brain::lcd","description":"Sets the background fill color of the screen to the specified color.","params":[{"type":"const char *","name":"color","description":"A hexadecimal value that represents color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setFillColor</span>(<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::setFillColor","argsstring":"(int hue)","static":"no","category":"setting","languages":["pro"],"class":"vex::brain::lcd","description":"Sets the background fill color of the screen to the specified color.","params":[{"type":"int","name":"hue","description":"The integer represents the hue of the color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::print","argsstring":"(T value)","static":"no","category":"action","languages":["block"],"class":"vex::brain::lcd","description":"Prints a number, string, or Boolean.","params":[{"type":"T","name":"value","description":{"parameter_defaults_overrides":"\"Hello\"|1|true","parameter_type_overrides":"string|number|boolean","parameter_identifier_overrides":"value|value|value","__text":"Information to display on the screen."}}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::print","argsstring":"(const char *format,...)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Prints a number, string, or Boolean.","params":[{"type":"const char *","name":"format","description":"This is a reference to a char format that prints the value of variables."},{"type":"...","name":"...","description":"A variable list of parameters to insert into format string."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">printAt</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">40</span>,<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">printAt</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">40</span>,<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::printAt","argsstring":"(int32_t x, int32_t y, const char *format,...)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Prints a number, string, or Boolean at an x, y pixel location.","params":[{"type":"int32_t","name":"x","description":"The x-coordinate at which to print a message on the screen."},{"type":"int32_t","name":"y","description":"The y-coordinate at which to print a message on the screen."},{"type":"const char *","name":"format","description":"A reference to a char format to print the value of variables."},{"type":"...","name":"...","description":"A variable list of parameters to insert into format string."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">printAt</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">40</span>,<span class =\"cm-atom\">true</span>,<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">printAt</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">40</span>,<span class =\"cm-atom\">true</span>,<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::printAt","argsstring":"(int32_t x, int32_t y, bool bOpaque, const char *format,...)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Prints a number, string, or Boolean at an x, y pixel location with the ability to be transparent.","params":[{"type":"int32_t","name":"x","description":"The x pixel location where the print should start"},{"type":"int32_t","name":"y","description":"The y pixel location where the print should start"},{"type":"bool","name":"bOpaque","description":"If set to false, the print will be transparent."},{"type":"const char *","name":"format","description":"A reference to a char format to print the value of variables."},{"type":"...","name":"...","description":"A variable list of parameters to insert into format string."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearScreen","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Clears the whole Screen to a default color or otherwise specified color."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>(<span class=\"cm-variable\">vex::color::red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>(<span class=\"cm-variable\">color::red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearScreen","argsstring":"(const color &color)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Clears the whole Screen to a default color or otherwise specified color.","params":[{"type":"color","name":"color","description":"In a color unit, colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>(<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>(<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearScreen","argsstring":"(const char *color)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Clears the whole Screen to a default color or otherwise specified color.","params":[{"type":"const char *","name":"color","description":"A hexadecimal value that represents color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>(<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>(<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearScreen","argsstring":"(int hue)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Clears the whole Screen to a default color or otherwise specified color.","params":[{"type":"int","name":"hue","description":"The integer represents the hue of the color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>,<span class=\"cm-variable\">vex::color::red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>,<span class=\"cm-variable\">color::red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearLine","argsstring":"(int number, const color &color)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Clears the specified line and sets it to a specified color.","params":[{"type":"int","name":"number","description":"The integer sets the line that is to be cleared."},{"type":"color","name":"color","description":"A color unit where colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>,<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>,<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearLine","argsstring":"(int number, const char *color)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Clears the specified line and sets it to a specified color.","params":[{"type":"int","name":"number","description":"The integer sets the line that is to be cleared."},{"type":"const char *","name":"color","description":"A hexadecimal value that represents color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearLine","argsstring":"(int number, int hue)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Clears the specified line and sets it to a specified color.","params":[{"type":"int","name":"number","description":"The integer sets the line that is to be cleared."},{"type":"int","name":"hue","description":"An integer that represents the hue of the color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::clearLine","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Clears the rest of the line from where the cursor is located."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">newLine</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">newLine</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::newLine","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Clears the rest of the line from where the cursor is located and then moves the cursor to the beginning of the next line."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawPixel</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawPixel</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawPixel","argsstring":"(int x, int y)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Draws a single pixel to the screen in the specified x and y location.","params":[{"type":"int","name":"x","description":"The x location of where to draw the pixel."},{"type":"int","name":"y","description":"The y location of where to draw the pixel."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawLine</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawLine</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawLine","argsstring":"(int x1, int y1, int x2, int y2)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Draws a line connecting the two specified points in the parameters.","params":[{"type":"int","name":"x1","description":"The x location of the first point."},{"type":"int","name":"y1","description":"The y location of the first point."},{"type":"int","name":"x2","description":"The x location of the second point."},{"type":"int","name":"y2","description":"The y location of the second point."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawRectangle","argsstring":"(int x, int y, int width, int height)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the current pen and fill color.","params":[{"type":"int","name":"x","description":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","name":"y","description":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","name":"width","description":"The width of the rectangle."},{"type":"int","name":"height","description":"The height of the rectangle."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-variable\">vex::color::red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-variable\">color::red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawRectangle","argsstring":"(int x, int y, int width, int height, const color &color)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.","params":[{"type":"int","name":"x","description":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","name":"y","description":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","name":"width","description":"The width of the rectangle."},{"type":"int","name":"height","description":"The height of the rectangle."},{"type":"color","name":"color","description":"A color unit where colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawRectangle","argsstring":"(int x, int y, int width, int height, const char *color)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.","params":[{"type":"int","name":"x","description":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","name":"y","description":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","name":"width","description":"The width of the rectangle."},{"type":"int","name":"height","description":"The height of the rectangle."},{"type":"const char *","name":"color","description":"A hexadecimal value that represents color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawRectangle</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawRectangle","argsstring":"(int x, int y, int width, int height, int hue)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.","params":[{"type":"int","name":"x","description":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","name":"y","description":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","name":"width","description":"The width of the rectangle."},{"type":"int","name":"height","description":"The height of the rectangle."},{"type":"int","name":"hue","description":"The color of the rectangle."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawCircle","argsstring":"(int x, int y, int radius)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the current pen and fill color.","params":[{"type":"int","name":"x","description":"The central x location of the circle."},{"type":"int","name":"y","description":"The central y location of the circle."},{"type":"int","name":"radius","description":"Sets the radius of the circle to be drawn on the Screen."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-variable\">vex::color::red</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-variable\">color::red</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawCircle","argsstring":"(int x, int y, int radius, const color &color)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.","params":[{"type":"int","name":"x","description":"The central x location of the circle."},{"type":"int","name":"y","description":"The central y location of the circle."},{"type":"int","name":"radius","description":"Sets the radius of the circle to be drawn on the Screen."},{"type":"color","name":"color","description":"A color unit where colors can be defined as names."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class=\"cm-string\">\"#FF0000\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawCircle","argsstring":"(int x, int y, int radius, const char *color)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.","params":[{"type":"int","name":"x","description":"The central x location of the circle."},{"type":"int","name":"y","description":"The central y location of the circle."},{"type":"int","name":"radius","description":"Sets the radius of the circle to be drawn on the Screen."},{"type":"const char *","name":"color","description":"A hexadecimal value that represents color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">drawCircle</span>(<span class =\"cm-number\">50</span>,<span class =\"cm-number\">50</span>,<span class =\"cm-number\">20</span>,<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::drawCircle","argsstring":"(int x, int y, int radius, int hue)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.","params":[{"type":"int","name":"x","description":"The central x location of the circle."},{"type":"int","name":"y","description":"The central y location of the circle."},{"type":"int","name":"radius","description":"Sets the radius of the circle to be drawn on the Screen."},{"type":"int","name":"hue","description":"An integer that represents the hue of the color."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Sets the function to be called when the Screen is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::brain::lcd::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::brain::lcd","description":"Sets the function to be called when the screen is released after being pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">xPosition</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">xPosition</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the last x location pressed on the screen."}],"definition":"int32_t vex::brain::lcd::xPosition","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Gets the last x location pressed on the screen."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">yPosition</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">yPosition</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the last y location pressed on the screen."}],"definition":"int32_t vex::brain::lcd::yPosition","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Gets the last y location pressed on the screen."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean based on the state of a press on the screen. If the screen is pressed, the Boolean will be true, if the button is released, the Boolean will be false."}],"definition":"bool vex::brain::lcd::pressing","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::brain::lcd","description":"Gets the pressed status of the Screen."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">render</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">render</span>();</span></pre>","returns":[{"type":"bool","description":"Returns true if the back buffer was successfully copied to the screen."}],"definition":"bool vex::brain::lcd::render","argsstring":"()","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Switches to double buffering or renders back buffer to screen."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">render</span>(<span class =\"cm-atom\">true</span>,<span class =\"cm-atom\">true</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">render</span>(<span class =\"cm-atom\">true</span>,<span class =\"cm-atom\">true</span>);</span></pre>","returns":[{"type":"bool","description":"Returns true if the back buffer was successfully copied to the screen."}],"definition":"bool vex::brain::lcd::render","argsstring":"(bool bVsyncWait, bool bRunScheduler=true)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::lcd","description":"Switches to double buffering or renders back buffer to screen.","params":[{"type":"bool","name":"VsyncWait","description":"If true, wait for the Vsync signal to render."},{"type":"bool","name":"RunScheduler","description":"If true, run background tasks while waiting to render."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Battery</span>.<span class=\"cm-sensing\">capacity</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Battery</span>.<span class=\"cm-sensing\">capacity</span>()</span></pre>","returns":[{"type":"uint32_t","description":"Returns an integer that represents the batteries capacity in the units specified by the parameter."}],"definition":"uint32_t vex::brain::battery::capacity","argsstring":"(percentUnits units=percentUnits::pct)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::brain::battery","description":"Gets the battery capacity.","params":[{"type":"percentUnits","name":"units","description":"(Optional) The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Battery</span>.<span class=\"cm-sensing\">temperature</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">Battery</span>.<span class=\"cm-sensing\">temperature</span>()</span></pre>","returns":[{"type":"double","description":"Returns an integer that represents the batteries temperature in the units specified by the parameter."}],"definition":"double vex::brain::battery::temperature","argsstring":"(percentUnits units=percentUnits::pct)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::brain::battery","description":"Gets the battery temperature.","params":[{"type":"percentUnits","name":"units","description":"(Optional) The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-sensing\">isInserted</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-sensing\">isInserted</span>()</span></pre>","returns":[{"type":"bool","description":"Returns true if the SD card is inserted. Returns false if there is not an SD card inserted."}],"definition":"bool vex::brain::sdcard::isInserted","argsstring":"()","static":"no","category":"sensing","languages":["pro"],"class":"vex::brain::sdcard","description":"Gets the state of the SD card."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-action\">loadFile</span>(<span class=\"cm-string\">\"filename.txt\"</span>,<span class=\"cm-variable\">buffer</span>,<span class =\"cm-number\">100</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-action\">loadFile</span>(<span class=\"cm-string\">\"filename.txt\"</span>,<span class=\"cm-variable\">buffer</span>,<span class =\"cm-number\">100</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns the number of bytes read from the file."}],"definition":"int32_t vex::brain::sdcard::loadfile","argsstring":"(const char *name, uint8_t *buffer, int32_t len)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::sdcard","description":"Loads a file from the SD card.","params":[{"type":"const char *","name":"name","description":"The name of the file."},{"type":"uint8_t *","name":"buffer","description":"Pointer to a buffer for file data."},{"type":"int32_t","name":"len","description":"The length of the buffer in bytes. Usually set to the max length of the buffer."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-action\">saveFile</span>(<span class=\"cm-string\">\"filename.txt\"</span>,<span class=\"cm-variable\">buffer</span>,<span class =\"cm-number\">100</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-action\">saveFile</span>(<span class=\"cm-string\">\"filename.txt\"</span>,<span class=\"cm-variable\">buffer</span>,<span class =\"cm-number\">100</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns the number of bytes saved to the file."}],"definition":"int32_t vex::brain::sdcard::savefile","argsstring":"(const char *name, uint8_t *buffer, int32_t len)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::sdcard","description":"Saves a file to the SD card.","params":[{"type":"const char *","name":"name","description":"The name of the file."},{"type":"uint8_t *","name":"buffer","description":"Pointer to a buffer with file data."},{"type":"int32_t","name":"len","description":"The length of the buffer in bytes. Usually set to the max length of the buffer."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-action\">appendFile</span>(<span class=\"cm-string\">\"filename.txt\"</span>,<span class=\"cm-variable\">buffer</span>,<span class =\"cm-number\">100</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::brain\">Brain</span>.<span class=\"cm-instance\">SDcard</span>.<span class=\"cm-action\">appendFile</span>(<span class=\"cm-string\">\"filename.txt\"</span>,<span class=\"cm-variable\">buffer</span>,<span class =\"cm-number\">100</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns the number of bytes saved to the file."}],"definition":"int32_t vex::brain::sdcard::appendfile","argsstring":"(const char *name, uint8_t *buffer, int32_t len)","static":"no","category":"action","languages":["pro"],"class":"vex::brain::sdcard","description":"Appends data to an existing file.","params":[{"type":"const char *","name":"name","description":"The name of the file."},{"type":"uint8_t *","name":"buffer","description":"Pointer to a buffer with file data."},{"type":"int32_t","name":"len","description":"The length of the buffer in bytes. Usually set to the max length of the buffer."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::bumper</span> <span class=\"cm-instance\" data-type=\"vex::bumper\">Bumper</span> = <span class=\"cm-def\">vex::bumper</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">bumper</span> <span class=\"cm-instance\" data-type=\"bumper\">Bumper</span> = <span class=\"cm-def\">bumper</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::bumper::bumper","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::bumper","description":"Creates a new bumper object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::bumper\">Bumper</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::bumper\">Bumper</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns the state of the bumper device. If it is pressed it will return a one. If unpressed, it will return a zero."}],"definition":"int32_t vex::bumper::pressing","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::bumper","description":"Get the pressed status of the bumper device."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::bumper\">Bumper</span>.<span class=\"cm-sensing\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::bumper\">Bumper</span>.<span class=\"cm-sensing\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::bumper::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::bumper","description":"Calls a function when the bumper switch is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::bumper\">Bumper</span>.<span class=\"cm-sensing\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::bumper\">Bumper</span>.<span class=\"cm-sensing\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::bumper::released","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::bumper","description":"Calls a function when the bumper switch is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::competition</span> <span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span> = <span class=\"cm-def\">vex::competition</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">competition</span> <span class=\"cm-instance\" data-type=\"competition\">Competition</span> = <span class=\"cm-def\">competition</span>();</span></pre>","definition":"vex::competition::competition","argsstring":"()","static":"no","category":"constructor","languages":["pro"],"class":"vex::competition","description":{"linebreak":"","__text":"Creates a competition object that has access to competition methods."}},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-setting\">autonomous</span>(<span class=\"cm-variable\">autonFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-setting\">autonomous</span>(<span class=\"cm-variable\">autonFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::competition::autonomous","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::competition","description":"Calls back a function when the autonomous period starts.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-setting\">drivercontrol</span>(<span class=\"cm-variable\">driverFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-setting\">drivercontrol</span>(<span class=\"cm-variable\">driverFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::competition::drivercontrol","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::competition","description":"Calls back a function when the driver control period starts.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isEnabled</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isEnabled</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean based on if the autonomous or driver control periods is active. If either one is active, the Boolean will return true."}],"definition":"bool vex::competition::isEnabled","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::competition","description":"Gets the status of your robot when under competition control."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isDriverControl</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isDriverControl</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean based on if the Driver Control Period is active. If the Driver Control period is active, the Boolean will return true."}],"definition":"bool vex::competition::isDriverControl","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::competition","description":"Gets the status of the Driver Control period."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isAutonomous</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isAutonomous</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean based on if the Autonomous Period is active. If the Autonomous Period is active, the Boolean will return true."}],"definition":"bool vex::competition::isAutonomous","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::competition","description":"Gets the status of the Autonomous period."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isCompetitionSwitch</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isCompetitionSwitch</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean based on if the V5 is connected to the Competition Control Switch. If the Brain is connected, the Boolean will return true."}],"definition":"bool vex::competition::isCompetitionSwitch","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::competition","description":"Gets the status of the Competition Control Switch being plugged into the robot."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isFieldControl</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::competition\">Competition</span>.<span class=\"cm-sensing\">isFieldControl</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean based on if the V5 is connected to the Field Control System. If the Brain is connected, the Boolean will return true."}],"definition":"bool vex::competition::isFieldControl","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::competition","description":"Gets the status of the Field Control System being plugged into the robot."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::controller</span> <span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span> = <span class=\"cm-def\">vex::controller</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">controller</span> <span class=\"cm-instance\" data-type=\"controller\">Controller</span> = <span class=\"cm-def\">controller</span>();</span></pre>","definition":"vex::controller::controller","argsstring":"()","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::controller","description":"Creates a new controller object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::controller</span> <span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span> = <span class=\"cm-def\">vex::controller</span>(<span class=\"cm-variable\">vex::controllerType::partner</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">controller</span> <span class=\"cm-instance\" data-type=\"controller\">Controller</span> = <span class=\"cm-def\">controller</span>(<span class=\"cm-variable\">controllerType::partner</span>);</span></pre>","definition":"vex::controller::controller","argsstring":"(controllerType id)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::controller","description":"Creates a new controller object.","params":[{"type":"controllerType","name":"id","description":"The type of controller that is being created. This can be set to primary or partner."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-action\">rumble</span>(<span class=\"cm-string\">\".-.-\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-action\">rumble</span>(<span class=\"cm-string\">\".-.-\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::rumble","argsstring":"(const char *str)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::controller","description":"Rumbles the controller by a pattern defined by the parameter. Dots equal short, dashes equal long and space equals pause.","params":[{"type":"const char *","name":"str","description":"A string that consists of dots and dashes that represent the rumble pattern."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL1</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL1</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL1</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL1</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL1</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL1</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL2</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL2</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL2</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL2</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL2</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonL2</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR1</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR1</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR1</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR1</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR1</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR1</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR2</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR2</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR2</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR2</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR2</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonR2</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonUp</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonUp</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonUp</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonUp</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonUp</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonUp</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonDown</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonDown</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonDown</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonDown</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonDown</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonDown</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonLeft</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonLeft</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonLeft</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonLeft</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonLeft</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonLeft</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonRight</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonRight</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonRight</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonRight</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonRight</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonRight</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonX</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonX</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonX</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonX</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonX</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonX</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonB</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonB</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonB</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonB</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonB</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonB</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonY</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonY</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonY</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonY</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonY</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonY</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonA</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonA</span>.<span class=\"cm-setting\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonA</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonA</span>.<span class=\"cm-setting\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::button::released","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::button","description":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonA</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">ButtonA</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean value based on the pressed states of the button. If the button is pressed it will return true."}],"definition":"bool vex::controller::button::pressing","argsstring":"(void)","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::controller::button","description":"Gets the status of a button."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::axis::changed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Sets the function to be called when the joystick axis value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the value of the joystick axis."}],"definition":"int32_t vex::controller::axis::value","argsstring":"(void)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the value of the joystick axis."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis1</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::axis::changed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Sets the function to be called when the joystick axis value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the value of the joystick axis."}],"definition":"int32_t vex::controller::axis::value","argsstring":"(void)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the value of the joystick axis."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis2</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::axis::changed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Sets the function to be called when the joystick axis value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the value of the joystick axis."}],"definition":"int32_t vex::controller::axis::value","argsstring":"(void)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the value of the joystick axis."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis3</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-setting\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::axis::changed","argsstring":"(void(*callback)(void))","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Sets the function to be called when the joystick axis value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the value of the joystick axis."}],"definition":"int32_t vex::controller::axis::value","argsstring":"(void)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the value of the joystick axis."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Axis4</span>.<span class=\"cm-sensing\">position</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the position of the joystick axis as defined by the unit in the parameter."}],"definition":"int32_t vex::controller::axis::position","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::controller::axis","description":"Gets the position of the joystick axis.","params":[{"type":"percentUnits","name":"units","description":"The type of unit that will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setCursor</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-setting\">setCursor</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">1</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::lcd::setCursor","argsstring":"(int32_t row, int32_t col)","static":"no","category":"setting","languages":["block","cpp","pro"],"class":"vex::controller::lcd","description":"Sets the cursor to the row and column number set in the parameters.","params":[{"type":"int32_t","name":"row","description":"Sets the row number for where the cursor is placed."},{"type":"int32_t","name":"col","description":"Sets the column number for where the cursor is placed."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::lcd::print","argsstring":"(T value)","static":"no","category":"action","languages":["block"],"class":"vex::controller::lcd","description":"Prints a number, string, or Boolean.","params":[{"type":"T","name":"value","description":{"parameter_defaults_overrides":"\"Hello\"|1|true","parameter_type_overrides":"string|number|boolean","parameter_identifier_overrides":"value|value|value","__text":"Information to display on the screen."}}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">print</span>(<span class=\"cm-string\">\"Hello\"</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::lcd::print","argsstring":"(const char *format,...)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::controller::lcd","description":"Prints a number, string, or Boolean.","params":[{"type":"const char *","name":"format","description":"This is a reference to a char format that prints the value of variables."},{"type":"...","name":"...","description":"A variable list of parameters to insert into format string."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearScreen</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::lcd::clearScreen","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::controller::lcd","description":"Clears the controller's LCD screen."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>(<span class =\"cm-number\">1</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::lcd::clearLine","argsstring":"(int number)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::controller::lcd","description":"Clears the line specified by the parameter.","params":[{"type":"int","name":"number","description":"The line number to be cleared."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">clearLine</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::lcd::clearLine","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::controller::lcd","description":"Clears the current line."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">newLine</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::controller\">Controller</span>.<span class=\"cm-instance\">Screen</span>.<span class=\"cm-action\">newLine</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::controller::lcd::newLine","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::controller::lcd","description":"Moves the cursor to the next line."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::digital_in</span> <span class=\"cm-instance\" data-type=\"vex::digital_in\">Digital_in</span> = <span class=\"cm-def\">vex::digital_in</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">digital_in</span> <span class=\"cm-instance\" data-type=\"digital_in\">Digital_in</span> = <span class=\"cm-def\">digital_in</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::digital_in::digital_in","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::digital_in","description":"Creates a new digital-in object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_in\">DigitalIn</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_in\">DigitalIn</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the value of the digital-in device."}],"definition":"int32_t vex::digital_in::value","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::digital_in","description":"Gets the value of the digital-in device."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_in\">DigitalIn</span>.<span class=\"cm-sensing\">high</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_in\">DigitalIn</span>.<span class=\"cm-sensing\">high</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::digital_in::high","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::digital_in","description":"Calls a function when the digital input goes high.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_in\">DigitalIn</span>.<span class=\"cm-sensing\">low</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_in\">DigitalIn</span>.<span class=\"cm-sensing\">low</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::digital_in::low","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::digital_in","description":"Calls a function when the digital input goes low.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::digital_out</span> <span class=\"cm-instance\" data-type=\"vex::digital_out\">Digital_out</span> = <span class=\"cm-def\">vex::digital_out</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">digital_out</span> <span class=\"cm-instance\" data-type=\"digital_out\">Digital_out</span> = <span class=\"cm-def\">digital_out</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::digital_out::digital_out","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::digital_out","description":"Creates a new digital-out object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_out\">DigitalOut</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_out\">DigitalOut</span>.<span class=\"cm-sensing\">value</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the value of the digital-out device."}],"definition":"int32_t vex::digital_out::value","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::digital_out","description":"Gets the value of the digital-out device."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_out\">DigitalOut</span>.<span class=\"cm-action\">set</span>(<span class =\"cm-atom\">true</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::digital_out\">DigitalOut</span>.<span class=\"cm-action\">set</span>(<span class =\"cm-atom\">true</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::digital_out::set","argsstring":"(bool value)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::digital_out","description":"Sets the digital-out device to a Boolean value.","params":[{"type":"bool","name":"value","description":"A true or false Boolean value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::encoder</span> <span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span> = <span class=\"cm-def\">vex::encoder</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">encoder</span> <span class=\"cm-instance\" data-type=\"encoder\">Encoder</span> = <span class=\"cm-def\">encoder</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::encoder::encoder","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::encoder","description":"Creates a new encoder object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-setting\">resetRotation</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-setting\">resetRotation</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::encoder::resetRotation","argsstring":"(void)","static":"no","category":"setting","languages":["block","cpp","pro"],"class":"vex::encoder","description":"Resets the rotation of the encoder to zero."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::encoder::setRotation","argsstring":"(double val, rotationUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::encoder","description":"Sets the rotation of the encoder to a specific value.","params":[{"type":"double","name":"val","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::encoder::setRotation","argsstring":"(double val, rotationUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::encoder","description":"Sets the rotation of the encoder to a specific value.","params":[{"type":"double","name":"val","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current rotation of the encoder."}],"definition":"double vex::encoder::rotation","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::encoder","description":"Gets the rotation value of the encoder.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the encoder device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">vex::rotationUnits::deg</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">rotationUnits::deg</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current rotation of the encoder."}],"definition":"double vex::encoder::rotation","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::encoder","description":"Gets the rotation value of the encoder.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the encoder device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current velocity of the encoder."}],"definition":"double vex::encoder::velocity","argsstring":"(velocityUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::encoder","description":"Gets the velocity of the encoder.","params":[{"type":"velocityUnits","name":"units","description":"The measurement unit for the encoder device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">vex::velocityUnits::rpm</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">velocityUnits::rpm</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current velocity of the encoder."}],"definition":"double vex::encoder::velocity","argsstring":"(velocityUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::encoder","description":"Gets the velocity of the encoder.","params":[{"type":"velocityUnits","name":"units","description":"The measurement unit for the encoder device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::encoder\">Encoder</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::encoder::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::encoder","description":"Calls a function when the encoder value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::gyro</span> <span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span> = <span class=\"cm-def\">vex::gyro</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">gyro</span> <span class=\"cm-instance\" data-type=\"gyro\">Gyro</span> = <span class=\"cm-def\">gyro</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::gyro::gyro","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::gyro","description":"Creates a new gyro object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::analogUnits::range8bit</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">analogUnits::range8bit</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the gyro sensor."}],"definition":"int32_t vex::gyro::value","argsstring":"(analogUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::gyro","description":"Gets the value of the gyro sensor.","params":[{"type":"analogUnits","name":"units","description":"The measurement unit for the gyro device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","returns":[{"type":"double","description":"Returns an integer that represents the unit value specified by the parameter of the gyro sensor."}],"definition":"double vex::gyro::value","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::gyro","description":"Gets the value of the gyro sensor.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the gyro device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::rotationUnits::deg</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">rotationUnits::deg</span>)</span></pre>","returns":[{"type":"double","description":"Returns an integer that represents the unit value specified by the parameter of the gyro sensor."}],"definition":"double vex::gyro::value","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::gyro","description":"Gets the value of the gyro sensor.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the gyro device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the gyro sensor."}],"definition":"int32_t vex::gyro::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::gyro","description":"Gets the value of the gyro sensor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the gyro device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the gyro sensor."}],"definition":"int32_t vex::gyro::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::gyro","description":"Gets the value of the gyro sensor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the gyro device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-action\">startCalibration</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-action\">startCalibration</span>()</span></pre>","returns":[{"type":"void"}],"definition":"void vex::gyro::startCalibration","argsstring":"(int32_t value=0)","static":"no","category":"action","languages":["pro"],"class":"vex::gyro","description":"Starts recalibration of the gyro.","params":[{"type":"int32_t","name":"value","description":"(Optional) Sets the amount of calibration time."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">isCalibrating</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">isCalibrating</span>()</span></pre>","returns":[{"type":"bool","description":"Returns true if gyro is still calibrating."}],"definition":"bool vex::gyro::isCalibrating","argsstring":"()","static":"no","category":"sensing","languages":["pro"],"class":"vex::gyro","description":"Returns true while the gyro sensor is performing a requested recalibration, changing to false once recalibration has completed."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::gyro\">Gyro</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::gyro::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::gyro","description":"Calls a function when the gyro sensor value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::light</span> <span class=\"cm-instance\" data-type=\"vex::light\">Light</span> = <span class=\"cm-def\">vex::light</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">light</span> <span class=\"cm-instance\" data-type=\"light\">Light</span> = <span class=\"cm-def\">light</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::light::light","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::light","description":"Creates a new light object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::analogUnits::range8bit</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">analogUnits::range8bit</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the light sensor."}],"definition":"int32_t vex::light::value","argsstring":"(analogUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::light","description":"Gets the value of the light sensor.","params":[{"type":"analogUnits","name":"units","description":"The measurement unit for the light device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the light sensor."}],"definition":"int32_t vex::light::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::light","description":"Gets the value of the light sensor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the light device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the light sensor."}],"definition":"int32_t vex::light::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::light","description":"Gets the value of the light sensor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the light device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::light\">Light</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::light::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::light","description":"Calls a function when the light sensor value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::limit</span> <span class=\"cm-instance\" data-type=\"vex::limit\">Limit</span> = <span class=\"cm-def\">vex::limit</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">limit</span> <span class=\"cm-instance\" data-type=\"limit\">Limit</span> = <span class=\"cm-def\">limit</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::limit::limit","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::limit","description":"Creates a new limit object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::limit\">Limit</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::limit\">Limit</span>.<span class=\"cm-sensing\">pressing</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns the state of the limit device."}],"definition":"int32_t vex::limit::pressing","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::limit","description":"Gets the state of the limit device."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::limit\">Limit</span>.<span class=\"cm-sensing\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::limit\">Limit</span>.<span class=\"cm-sensing\">pressed</span>(<span class=\"cm-variable\">pressedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::limit::pressed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::limit","description":"Calls a function when the limit switch is pressed.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::limit\">Limit</span>.<span class=\"cm-sensing\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::limit\">Limit</span>.<span class=\"cm-sensing\">released</span>(<span class=\"cm-variable\">releasedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::limit::released","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::limit","description":"Calls a function when the limit switch is released.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::line</span> <span class=\"cm-instance\" data-type=\"vex::line\">Line</span> = <span class=\"cm-def\">vex::line</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">line</span> <span class=\"cm-instance\" data-type=\"line\">Line</span> = <span class=\"cm-def\">line</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::line::line","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::line","description":"Creates a new line object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::analogUnits::range8bit</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">analogUnits::range8bit</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the line follower."}],"definition":"int32_t vex::line::value","argsstring":"(analogUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::line","description":"Gets the value of the line follower.","params":[{"type":"analogUnits","name":"units","description":"The measurement unit for the line device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the line follower."}],"definition":"int32_t vex::line::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::line","description":"Gets the value of the line follower.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the line device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the line follower."}],"definition":"int32_t vex::line::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::line","description":"Gets the value of the line follower.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the line device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::line\">Line</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::line::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::line","description":"Calls a function when the line sensor value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor</span> <span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span> = <span class=\"cm-def\">vex::motor</span>(<span class=\"cm-variable\">vex::PORT1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor</span> <span class=\"cm-instance\" data-type=\"motor\">Motor</span> = <span class=\"cm-def\">motor</span>(<span class=\"cm-variable\">PORT1</span>);</span></pre>","definition":"vex::motor::motor","argsstring":"(int32_t index)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor","description":"Creates a new motor object on the port specified.","params":[{"type":"int32_t","name":"index","description":"The port index for this motor. The index is zero-based."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor</span> <span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span> = <span class=\"cm-def\">vex::motor</span>(<span class=\"cm-variable\">vex::PORT1</span>,<span class =\"cm-atom\">false</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor</span> <span class=\"cm-instance\" data-type=\"motor\">Motor</span> = <span class=\"cm-def\">motor</span>(<span class=\"cm-variable\">PORT1</span>,<span class =\"cm-atom\">false</span>);</span></pre>","definition":"vex::motor::motor","argsstring":"(int32_t index, bool reverse)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor","description":"Creates a new motor object on the port specified and sets the reversed flag.","params":[{"type":"int32_t","name":"index","description":"The port index for this motor. The index is zero-based."},{"type":"bool","name":"reverse","description":"Sets the reverse flag for the new motor object."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor</span> <span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span> = <span class=\"cm-def\">vex::motor</span>(<span class=\"cm-variable\">vex::PORT1</span>,<span class=\"cm-variable\">vex::gearSetting::ratio18_1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor</span> <span class=\"cm-instance\" data-type=\"motor\">Motor</span> = <span class=\"cm-def\">motor</span>(<span class=\"cm-variable\">PORT1</span>,<span class=\"cm-variable\">gearSetting::ratio18_1</span>);</span></pre>","definition":"vex::motor::motor","argsstring":"(int32_t index, gearSetting gears)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor","description":"Creates a new motor object on the port specified and sets the gear setting.","params":[{"type":"int32_t","name":"index","description":"The port index for this motor. The index is zero-based."},{"type":"gearSetting","name":"gears","description":"Sets the gear's setting for the new motor object."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor</span> <span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span> = <span class=\"cm-def\">vex::motor</span>(<span class=\"cm-variable\">vex::PORT1</span>,<span class=\"cm-variable\">vex::gearSetting::ratio18_1</span>,<span class =\"cm-atom\">false</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor</span> <span class=\"cm-instance\" data-type=\"motor\">Motor</span> = <span class=\"cm-def\">motor</span>(<span class=\"cm-variable\">PORT1</span>,<span class=\"cm-variable\">gearSetting::ratio18_1</span>,<span class =\"cm-atom\">false</span>);</span></pre>","definition":"vex::motor::motor","argsstring":"(int32_t index, gearSetting gears, bool reverse)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor","description":"Creates a new motor object on the port specified Sets the reversed flag and the gear setting for the new motor object.","params":[{"type":"int32_t","name":"index","description":"The port index for this motor. The index is zero-based."},{"type":"gearSetting","name":"gears","description":"Sets the gear's setting for the new motor object."},{"type":"bool","name":"reverse","description":"Sets the reverse flag for the new motor object."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setReversed</span>(<span class =\"cm-atom\">true</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setReversed</span>(<span class =\"cm-atom\">true</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setReversed","argsstring":"(bool value)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor","description":"Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.","params":[{"type":"bool","name":"value","description":"If set to true, motor commands spin the motor in the opposite direction."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::rpm</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::rpm</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setVelocity","argsstring":"(double velocity, velocityUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor","description":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units","description":"The measurement unit for the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setVelocity","argsstring":"(double velocity, percentUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::motor","description":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"percentUnits","name":"units","description":"The measurement unit for the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setStopping</span>(<span class=\"cm-variable\">coast</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setStopping</span>(<span class=\"cm-variable\">coast</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setStopping","argsstring":"(brakeType mode)","static":"no","category":"setting","languages":["block"],"class":"vex::motor","description":"Sets the stopping mode of the motor by passing a brake mode as a parameter.","params":[{"type":"brakeType","name":"mode","description":"The stopping mode can be set to coast, brake, or hold."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setStopping</span>(<span class=\"cm-variable\">vex::brakeType::coast</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setStopping</span>(<span class=\"cm-variable\">brakeType::coast</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setStopping","argsstring":"(brakeType mode)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor","description":"Sets the stopping mode of the motor by passing a brake mode as a parameter.","params":[{"type":"brakeType","name":"mode","description":"The stopping mode can be set to coast, brake, or hold."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">resetRotation</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">resetRotation</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::resetRotation","argsstring":"(void)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor","description":"Resets the motor's encoder to the value of zero."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setRotation","argsstring":"(double value, rotationUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::motor","description":"Sets the value of the 1's encoder to the value specified in the parameter.","params":[{"type":"double","name":"value","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setRotation</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setRotation","argsstring":"(double value, rotationUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor","description":"Sets the value of the 1's encoder to the value specified in the parameter.","params":[{"type":"double","name":"value","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setTimeout</span>(<span class =\"cm-number\">30</span>,<span class=\"cm-variable\">seconds</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setTimeout</span>(<span class =\"cm-number\">30</span>,<span class=\"cm-variable\">seconds</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setTimeout","argsstring":"(int32_t time, timeUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::motor","description":"Sets the timeout for the motor. If the motor does not reach its' commanded position prior to the completion of the timeout, the motor will stop.","params":[{"type":"int32_t","name":"time","description":"Sets the amount of time."},{"type":"timeUnits","name":"units","description":"The measurement unit for the time value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setTimeout</span>(<span class =\"cm-number\">30</span>,<span class=\"cm-variable\">vex::timeUnits::sec</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setTimeout</span>(<span class =\"cm-number\">30</span>,<span class=\"cm-variable\">timeUnits::sec</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setTimeout","argsstring":"(int32_t time, timeUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor","description":"Sets the timeout for the motor. If the motor does not reach its' commanded position prior to the completion of the timeout, the motor will stop.","params":[{"type":"int32_t","name":"time","description":"Sets the amount of time."},{"type":"timeUnits","name":"units","description":"The measurement unit for the time value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">forward</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">forward</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::spin","argsstring":"(directionType dir)","static":"no","category":"action","languages":["block"],"class":"vex::motor","description":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">vex::directionType::fwd</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">directionType::fwd</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::spin","argsstring":"(directionType dir)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">vex::directionType::fwd</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::rpm</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">directionType::fwd</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::rpm</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::spin","argsstring":"(directionType dir, double velocity, velocityUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns on the motor and spins it in a specified direction and a specified velocity.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units","description":"The measurement unit for the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::pct</span>);</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean that signifies when the motor has reached the target rotation value."}],"definition":"bool vex::motor::rotateTo","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns on the motor and spins it to an absolute target rotation value at a specified velocity.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units_v","description":"The measurement unit for the velocity value."},{"type":"bool","name":"waitForCompletion","description":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean that signifies when the motor has reached the target rotation value."}],"definition":"bool vex::motor::rotateTo","argsstring":"(double rotation, rotationUnits units, bool waitForCompletion=true)","static":"no","category":"action","languages":["block"],"class":"vex::motor","description":"Turns on the motor and spins it to an absolute target rotation value.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":{"linebreak":"","__text":"The measurement unit for the rotation value."}},{"type":"bool","name":"waitForCompletion","description":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>);</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean that signifies when the motor has reached the target rotation value."}],"definition":"bool vex::motor::rotateTo","argsstring":"(double rotation, rotationUnits units, bool waitForCompletion=true)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns on the motor and spins it to an absolute target rotation value.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":{"linebreak":"","__text":"The measurement unit for the rotation value."}},{"type":"bool","name":"waitForCompletion","description":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::pct</span>);</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean that signifies when the motor has reached the target rotation value."}],"definition":"bool vex::motor::rotateFor","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns on the motor and spins it to a relative target rotation value at a specified velocity.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units_v","description":"The measurement unit for the velocity value."},{"type":"bool","name":"waitForCompletion","description":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean that signifies when the motor has reached the target rotation value."}],"definition":"bool vex::motor::rotateFor","argsstring":"(double rotation, rotationUnits units, bool waitForCompletion=true)","static":"no","category":"action","languages":["block"],"class":"vex::motor","description":"Turns on the motor and spins it to a relative target rotation value.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":{"linebreak":"","__text":"The measurement unit for the rotation value."}},{"type":"bool","name":"waitForCompletion","description":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>);</span></pre>","returns":[{"type":"bool","description":"Returns a Boolean that signifies when the motor has reached the target rotation value."}],"definition":"bool vex::motor::rotateFor","argsstring":"(double rotation, rotationUnits units, bool waitForCompletion=true)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns on the motor and spins it to a relative target rotation value.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":{"linebreak":"","__text":"The measurement unit for the rotation value."}},{"type":"bool","name":"waitForCompletion","description":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">2.5</span>,<span class=\"cm-variable\">vex::timeUnits::sec</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">2.5</span>,<span class=\"cm-variable\">timeUnits::sec</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::rotateFor","argsstring":"(double time, timeUnits units, double velocity, velocityUnits units_v)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns on the motor and spins it to a relative target time value at a specified velocity.","params":[{"type":"double","name":"time","description":"Sets the amount of time."},{"type":"timeUnits","name":"units","description":"The measurement unit for the time value."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units_v","description":"The measurement unit for the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">2.5</span>,<span class=\"cm-variable\">vex::timeUnits::sec</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">rotateFor</span>(<span class =\"cm-number\">2.5</span>,<span class=\"cm-variable\">timeUnits::sec</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::rotateFor","argsstring":"(double time, timeUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Turns on the motor and spins it to a relative target time value.","params":[{"type":"double","name":"time","description":"Sets the amount of time."},{"type":"timeUnits","name":"units","description":"The measurement unit for the time value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::startRotateTo","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Starts spinning a motor to an absolute target rotation but does not wait for the motor to reach that target.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units_v","description":"The measurement unit for the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::startRotateTo","argsstring":"(double rotation, rotationUnits units)","static":"no","category":"action","languages":["block"],"class":"vex::motor","description":"Starts spinning a motor to an absolute target rotation but does not wait for the motor to reach that target.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateTo</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::startRotateTo","argsstring":"(double rotation, rotationUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Starts spinning a motor to an absolute target rotation but does not wait for the motor to reach that target.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::startRotateFor","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Starts spinning a motor to a relative target rotation but does not wait for the motor to reach that target.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units_v","description":"The measurement unit for the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">degrees</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::startRotateFor","argsstring":"(double rotation, rotationUnits units)","static":"no","category":"action","languages":["block"],"class":"vex::motor","description":"Starts spinning a motor to a relative target but does not wait for the motor to reach that target.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">startRotateFor</span>(<span class =\"cm-number\">90</span>,<span class=\"cm-variable\">rotationUnits::deg</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::startRotateFor","argsstring":"(double rotation, rotationUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Starts spinning a motor to a relative target but does not wait for the motor to reach that target.","params":[{"type":"double","name":"rotation","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">isSpinning</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">isSpinning</span>()</span></pre>","returns":[{"type":"bool","description":"Returns a true Boolean if the motor is on and is running. Returns a false Boolean if the motor is off or braking."}],"definition":"bool vex::motor::isSpinning","argsstring":"()","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::motor","description":"Checks to see if the motor is spinning."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">stop</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">stop</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::stop","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::motor","description":"Stops the motor using the default brake mode."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">stop</span>(<span class=\"cm-variable\">vex::brakeType::coast</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-action\">stop</span>(<span class=\"cm-variable\">brakeType::coast</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::stop","argsstring":"(brakeType mode)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor","description":"Stops the motor using a specified brake mode.","params":[{"type":"brakeType","name":"mode","description":"The brake mode can be set to coast, brake, or hold."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setMaxTorque","argsstring":"(double value, percentUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::motor","description":"Sets the max torque of the motor.","params":[{"type":"double","name":"value","description":"Sets the amount of torque."},{"type":"percentUnits","name":"units","description":"The measurement unit for the torque value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::percentUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percentUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setMaxTorque","argsstring":"(double value, percentUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor","description":"Sets the max torque of the motor.","params":[{"type":"double","name":"value","description":"Sets the amount of torque."},{"type":"percentUnits","name":"units","description":"The measurement unit for the torque value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">1</span>,<span class=\"cm-variable\">vex::torqueUnits::Nm</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">1</span>,<span class=\"cm-variable\">torqueUnits::Nm</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setMaxTorque","argsstring":"(double value, torqueUnits units)","static":"no","category":"setting","languages":["pro"],"class":"vex::motor","description":"Sets the max torque of the motor.","params":[{"type":"double","name":"value","description":"Sets the amount of torque."},{"type":"torqueUnits","name":"units","description":"The measurement unit for the torque value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">1.25</span>,<span class=\"cm-variable\">vex::currentUnits::amps</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-setting\">setMaxTorque</span>(<span class =\"cm-number\">1.25</span>,<span class=\"cm-variable\">currentUnits::amps</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor::setMaxTorque","argsstring":"(double value, currentUnits units)","static":"no","category":"setting","languages":["pro"],"class":"vex::motor","description":"Sets the max torque of the motor.","params":[{"type":"double","name":"value","description":"Sets the amount of torque."},{"type":"currentUnits","name":"units","description":"The measurement unit for the torque value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current rotation of the motor in the units defined in the parameter."}],"definition":"double vex::motor::rotation","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::motor","description":"Gets the current rotation of the motor's encoder.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">vex::rotationUnits::deg</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">rotation</span>(<span class=\"cm-variable\">rotationUnits::deg</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current rotation of the motor in the units defined in the parameter."}],"definition":"double vex::motor::rotation","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::motor","description":"Gets the current rotation of the motor's encoder.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current velocity of the motor in the units defined in the parameter."}],"definition":"double vex::motor::velocity","argsstring":"(velocityUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::motor","description":"Gets the current velocity of the motor.","params":[{"type":"velocityUnits","name":"units","description":"The measurement unit for the velocity."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">vex::velocityUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">velocity</span>(<span class=\"cm-variable\">velocityUnits::pct</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the current velocity of the motor in the units defined in the parameter."}],"definition":"double vex::motor::velocity","argsstring":"(velocityUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::motor","description":"Gets the current velocity of the motor.","params":[{"type":"velocityUnits","name":"units","description":"The measurement unit for the velocity."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">current</span>(<span class=\"cm-variable\">amp</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">current</span>(<span class=\"cm-variable\">amp</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the electrical current of the motor in the units defined in the parameter."}],"definition":"double vex::motor::current","argsstring":"(currentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::motor","description":"Gets the electrical current of the motor.","params":[{"type":"currentUnits","name":"units","description":"The measurement unit for the current."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">current</span>(<span class=\"cm-variable\">vex::currentUnits::amp</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">current</span>(<span class=\"cm-variable\">currentUnits::amp</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the electrical current of the motor in the units defined in the parameter."}],"definition":"double vex::motor::current","argsstring":"(currentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::motor","description":"Gets the electrical current of the motor.","params":[{"type":"currentUnits","name":"units","description":"The measurement unit for the current."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">power</span>(<span class=\"cm-variable\">watts</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">power</span>(<span class=\"cm-variable\">watts</span>);</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the power of the motor in the units defined in the parameter."}],"definition":"double vex::motor::power","argsstring":"(powerUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::motor","description":"Gets the power of the motor.","params":[{"type":"powerUnits","name":"units","description":"The measurement unit for the power."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">power</span>(<span class=\"cm-variable\">vex::powerUnits::watts</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">power</span>(<span class=\"cm-variable\">powerUnits::watts</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the power of the motor in the units defined in the parameter."}],"definition":"double vex::motor::power","argsstring":"(powerUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::motor","description":"Gets the power of the motor.","params":[{"type":"powerUnits","name":"units","description":"The measurement unit for the power."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">torque</span>(<span class=\"cm-variable\">newtonMeters</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">torque</span>(<span class=\"cm-variable\">newtonMeters</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the torque of the motor in the units defined in the parameter."}],"definition":"double vex::motor::torque","argsstring":"(torqueUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::motor","description":"Gets the torque of the motor.","params":[{"type":"torqueUnits","name":"units","description":"The measurement unit for the torque."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">torque</span>(<span class=\"cm-variable\">vex::torqueUnits::Nm</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">torque</span>(<span class=\"cm-variable\">torqueUnits::Nm</span>)</span></pre>","returns":[{"type":"double","description":"Returns a double that represents the torque of the motor in the units defined in the parameter."}],"definition":"double vex::motor::torque","argsstring":"(torqueUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::motor","description":"Gets the torque of the motor.","params":[{"type":"torqueUnits","name":"units","description":"The measurement unit for the torque."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">efficiency</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">efficiency</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"double","description":"Returns the efficiency of the motor in the units defined in the parameter."}],"definition":"double vex::motor::efficiency","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::motor","description":"Gets the efficiency of the motor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the efficiency."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">efficiency</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">efficiency</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"double","description":"Returns the efficiency of the motor in the units defined in the parameter."}],"definition":"double vex::motor::efficiency","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::motor","description":"Gets the efficiency of the motor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the efficiency."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">temperature</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">temperature</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"double","description":"Returns the temperature of the motor in the units defined in the parameter."}],"definition":"double vex::motor::temperature","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::motor","description":"Gets the temperature of the motor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the temperature."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">temperature</span>(<span class=\"cm-variable\">vex::percentUnits::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor\">Motor</span>.<span class=\"cm-sensing\">temperature</span>(<span class=\"cm-variable\">percentUnits::pct</span>)</span></pre>","returns":[{"type":"double","description":"Returns the temperature of the motor in the units defined in the parameter."}],"definition":"double vex::motor::temperature","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::motor","description":"Gets the temperature of the motor.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the temperature."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor29</span> <span class=\"cm-instance\" data-type=\"vex::motor29\">Motor29</span> = <span class=\"cm-def\">vex::motor29</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor29</span> <span class=\"cm-instance\" data-type=\"motor29\">Motor29</span> = <span class=\"cm-def\">motor29</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::motor29::motor29","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor29","description":{"ref":{"_refid":"classvex_1_1motor29","_kindref":"compound","__text":"motor29"},"__text":"Creates a new \n object on the port specified in the parameter."},"params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor29</span> <span class=\"cm-instance\" data-type=\"vex::motor29\">Motor29</span> = <span class=\"cm-def\">vex::motor29</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>,<span class =\"cm-atom\">true</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor29</span> <span class=\"cm-instance\" data-type=\"motor29\">Motor29</span> = <span class=\"cm-def\">motor29</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>,<span class =\"cm-atom\">true</span>);</span></pre>","definition":"vex::motor29::motor29","argsstring":"(triport::port &port, bool reverse)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor29","description":{"ref":{"_refid":"classvex_1_1motor29","_kindref":"compound","__text":"motor29"},"__text":"Creates a new \n object on the port specified in the parameter."},"params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."},{"type":"bool","name":"reverse","description":{"ref":{"_refid":"classvex_1_1motor29","_kindref":"compound","__text":"motor29"},"__text":"Sets the reverse flag for the new \n object."}}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor29::setVelocity","argsstring":"(double velocity, percentUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::motor29","description":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"percentUnits","name":"units","description":"The measurement unit of the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::percentUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percentUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor29::setVelocity","argsstring":"(double velocity, percentUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor29","description":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"percentUnits","name":"units","description":"The measurement unit of the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-setting\">setReversed</span>(<span class =\"cm-atom\">true</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-setting\">setReversed</span>(<span class =\"cm-atom\">true</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor29::setReversed","argsstring":"(bool value)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor29","description":"Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.","params":[{"type":"bool","name":"value","description":"If set to true, the motor will spin in the reversed direction."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">forward</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">forward</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor29::spin","argsstring":"(directionType dir)","static":"no","category":"action","languages":["block"],"class":"vex::motor29","description":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">vex::directionType::fwd</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">directionType::fwd</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor29::spin","argsstring":"(directionType dir)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor29","description":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">vex::directionType::fwd</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::rpm</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">directionType::fwd</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::rpm</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor29::spin","argsstring":"(directionType dir, double velocity, velocityUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor29","description":"Turns on the motor and spins it in a specified direction and a specified velocity.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units","description":"The measurement unit of the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">stop</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor29\">Motor</span>.<span class=\"cm-action\">stop</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor29::stop","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::motor29","description":"Stops the motor using the default brake mode."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor_victor</span> <span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor_victor</span> = <span class=\"cm-def\">vex::motor_victor</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor_victor</span> <span class=\"cm-instance\" data-type=\"motor_victor\">Motor_victor</span> = <span class=\"cm-def\">motor_victor</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::motor_victor::motor_victor","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor_victor","description":"Creates a new motor victor object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::motor_victor</span> <span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor_victor</span> = <span class=\"cm-def\">vex::motor_victor</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">motor_victor</span> <span class=\"cm-instance\" data-type=\"motor_victor\">Motor_victor</span> = <span class=\"cm-def\">motor_victor</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::motor_victor::motor_victor","argsstring":"(triport::port &port, bool reverse)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::motor_victor","description":"Creates a new motor victor object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."},{"type":"bool","name":"reverse","description":{"ref":{"_refid":"classvex_1_1motor__victor","_kindref":"compound","__text":"motor_victor"},"__text":"Sets the reverse flag for the new \n object."}}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor_victor::setVelocity","argsstring":"(double velocity, percentUnits units)","static":"no","category":"setting","languages":["block"],"class":"vex::motor_victor","description":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"percentUnits","name":"units","description":"The measurement unit of the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::percentUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-setting\">setVelocity</span>(<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">percentUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor_victor::setVelocity","argsstring":"(double velocity, percentUnits units)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor_victor","description":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"percentUnits","name":"units","description":"The measurement unit of the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-setting\">setReversed</span>(<span class =\"cm-atom\">true</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-setting\">setReversed</span>(<span class =\"cm-atom\">true</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor_victor::setReversed","argsstring":"(bool value)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::motor_victor","description":"Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.","params":[{"type":"bool","name":"value","description":"If set to true, the motor will spin in the reversed direction."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">forward</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">forward</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor_victor::spin","argsstring":"(directionType dir)","static":"no","category":"action","languages":["block"],"class":"vex::motor_victor","description":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">vex::directionType::fwd</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">directionType::fwd</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor_victor::spin","argsstring":"(directionType dir)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor_victor","description":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">vex::directionType::fwd</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">vex::velocityUnits::rpm</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">spin</span>(<span class=\"cm-variable\">directionType::fwd</span>,<span class =\"cm-number\">50</span>,<span class=\"cm-variable\">velocityUnits::rpm</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor_victor::spin","argsstring":"(directionType dir, double velocity, velocityUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::motor_victor","description":"Turns on the motor and spins it in a specified direction and a specified velocity.","params":[{"type":"directionType","name":"dir","description":"The direction to spin the motor."},{"type":"double","name":"velocity","description":"Sets the amount of velocity."},{"type":"velocityUnits","name":"units","description":"The measurement unit of the velocity value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">stop</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::motor_victor\">Motor</span>.<span class=\"cm-action\">stop</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::motor_victor::stop","argsstring":"(void)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::motor_victor","description":"Stops the motor using the default brake mode."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::pot</span> <span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span> = <span class=\"cm-def\">vex::pot</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">pot</span> <span class=\"cm-instance\" data-type=\"pot\">Pot</span> = <span class=\"cm-def\">pot</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::pot::pot","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::pot","description":"Creates a new pot object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::analogUnits::range8bit</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">analogUnits::range8bit</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the potentiometer device."}],"definition":"int32_t vex::pot::value","argsstring":"(analogUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::pot","description":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"analogUnits","name":"units","description":"The measurement unit for the potentiometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percent</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the potentiometer device."}],"definition":"int32_t vex::pot::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::pot","description":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the potentiometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::percentUnit::pct</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">percentUnit::pct</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the unit value specified by the parameter of the potentiometer device."}],"definition":"int32_t vex::pot::value","argsstring":"(percentUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::pot","description":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"percentUnits","name":"units","description":"The measurement unit for the potentiometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">degrees</span>)</span></pre>","returns":[{"type":"double","description":"Returns an integer that represents the unit value specified by the parameter of the potentiometer device."}],"definition":"double vex::pot::value","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::pot","description":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the potentiometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">vex::rotationUnits::deg</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">value</span>(<span class=\"cm-variable\">rotationUnits::deg</span>)</span></pre>","returns":[{"type":"double","description":"Returns an integer that represents the unit value specified by the parameter of the potentiometer device."}],"definition":"double vex::pot::value","argsstring":"(rotationUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::pot","description":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"rotationUnits","name":"units","description":"The measurement unit for the potentiometer device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pot\">Pot</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::pot::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::pot","description":"Calls a function when the potentiometer value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::pwm_out</span> <span class=\"cm-instance\" data-type=\"vex::pwm_out\">Pwm_out</span> = <span class=\"cm-def\">vex::pwm_out</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">pwm_out</span> <span class=\"cm-instance\" data-type=\"pwm_out\">Pwm_out</span> = <span class=\"cm-def\">pwm_out</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::pwm_out::pwm_out","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::pwm_out","description":"Creates a new pwm-out object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pwm_out\">PWM</span>.<span class=\"cm-action\">state</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pwm_out\">PWM</span>.<span class=\"cm-action\">state</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::pwm_out::state","argsstring":"(int32_t value, percentUnits units)","static":"no","category":"action","languages":["block"],"class":"vex::pwm_out","description":"Sets the state of the pwm device.","params":[{"type":"int32_t","name":"value","description":"Sets the length of the pulse width."},{"type":"percentUnits","name":"units","description":"The measurement unit for the state value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pwm_out\">PWM</span>.<span class=\"cm-action\">state</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">vex::percentUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::pwm_out\">PWM</span>.<span class=\"cm-action\">state</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">percentUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::pwm_out::state","argsstring":"(int32_t value, percentUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::pwm_out","description":"Sets the state of the pwm device.","params":[{"type":"int32_t","name":"value","description":"Sets the length of the pulse width."},{"type":"percentUnits","name":"units","description":"The measurement unit for the state value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::servo</span> <span class=\"cm-instance\" data-type=\"vex::servo\">Servo</span> = <span class=\"cm-def\">vex::servo</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">servo</span> <span class=\"cm-instance\" data-type=\"servo\">Servo</span> = <span class=\"cm-def\">servo</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::servo::servo","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::servo","description":"Creates a new servo object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::servo\">Servo</span>.<span class=\"cm-action\">position</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::servo\">Servo</span>.<span class=\"cm-action\">position</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">percent</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::servo::position","argsstring":"(int32_t value, percentUnits units)","static":"no","category":"action","languages":["block"],"class":"vex::servo","description":"Sets the position of the servo device.","params":[{"type":"int32_t","name":"value","description":"Sets the amount of rotation."},{"type":"percentUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::servo\">Servo</span>.<span class=\"cm-action\">position</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">vex::percentUnits::pct</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::servo\">Servo</span>.<span class=\"cm-action\">position</span>(<span class =\"cm-number\">10</span>,<span class=\"cm-variable\">percentUnits::pct</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::servo::position","argsstring":"(int32_t value, percentUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::servo","description":"Sets the position of the servo device.","params":[{"type":"int32_t","name":"value","description":"Sets the amount of rotation."},{"type":"percentUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::servo\">Servo</span>.<span class=\"cm-action\">position</span>(<span class =\"cm-number\">45</span>,<span class=\"cm-variable\">vex::rotationUnits::deg</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::servo\">Servo</span>.<span class=\"cm-action\">position</span>(<span class =\"cm-number\">45</span>,<span class=\"cm-variable\">rotationUnits::deg</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::servo::position","argsstring":"(double value, rotationUnits units)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::servo","description":"Sets the position of the servo device.","params":[{"type":"double","name":"value","description":"Sets the amount of rotation."},{"type":"rotationUnits","name":"units","description":"The measurement unit for the rotation value."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::sonar</span> <span class=\"cm-instance\" data-type=\"vex::sonar\">Sonar</span> = <span class=\"cm-def\">vex::sonar</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">sonar</span> <span class=\"cm-instance\" data-type=\"sonar\">Sonar</span> = <span class=\"cm-def\">sonar</span>(<span class=\"cm-variable\">Brain.ThreeWirePort.A</span>);</span></pre>","definition":"vex::sonar::sonar","argsstring":"(triport::port &port)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::sonar","description":"Creates a new sonar object on the port specified in the parameter.","params":[{"type":"triport::port","name":"port","description":"A reference to a three wire port."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::sonar\">Sonar</span>.<span class=\"cm-sensing\">distance</span>(<span class=\"cm-variable\">millimeters</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::sonar\">Sonar</span>.<span class=\"cm-sensing\">distance</span>(<span class=\"cm-variable\">millimeters</span>)</span></pre>","returns":[{"type":"double","description":"Returns an integer that represents the unit value specified by the parameter of the sonar sensor."}],"definition":"double vex::sonar::distance","argsstring":"(distanceUnits units)","static":"no","category":"sensing","languages":["block"],"class":"vex::sonar","description":"Gets the value of the distance sensor.","params":[{"type":"distanceUnits","name":"units","description":"The measurement unit for the sonar device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::sonar\">Sonar</span>.<span class=\"cm-sensing\">distance</span>(<span class=\"cm-variable\">vex::distanceUnits::mm</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::sonar\">Sonar</span>.<span class=\"cm-sensing\">distance</span>(<span class=\"cm-variable\">distanceUnits::mm</span>)</span></pre>","returns":[{"type":"double","description":"Returns an integer that represents the unit value specified by the parameter of the sonar sensor."}],"definition":"double vex::sonar::distance","argsstring":"(distanceUnits units)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::sonar","description":"Gets the value of the distance sensor.","params":[{"type":"distanceUnits","name":"units","description":"The measurement unit for the sonar device."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::sonar\">Sonar</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::sonar\">Sonar</span>.<span class=\"cm-sensing\">changed</span>(<span class=\"cm-variable\">changedFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::sonar::changed","argsstring":"(void(*callback)(void))","static":"no","category":"sensing","languages":["pro"],"class":"vex::sonar","description":"Calls a function when the sonar value changes.","params":[{"type":"void(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::task</span> <span class=\"cm-instance\" data-type=\"vex::task\">Task</span> = <span class=\"cm-def\">vex::task</span>(<span class=\"cm-variable\">callbackFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">task</span> <span class=\"cm-instance\" data-type=\"task\">Task</span> = <span class=\"cm-def\">task</span>(<span class=\"cm-variable\">callbackFunction</span>);</span></pre>","definition":"vex::task::task","argsstring":"(int(*callback)(void))","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::task","description":"Constructs a task with a function callback.","params":[{"type":"int(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::task</span> <span class=\"cm-instance\" data-type=\"vex::task\">Task</span> = <span class=\"cm-def\">vex::task</span>(<span class=\"cm-variable\">callbackFunction</span>,<span class =\"cm-number\">1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">task</span> <span class=\"cm-instance\" data-type=\"task\">Task</span> = <span class=\"cm-def\">task</span>(<span class=\"cm-variable\">callbackFunction</span>,<span class =\"cm-number\">1</span>);</span></pre>","definition":"vex::task::task","argsstring":"(int(*callback)(void), int32_t priority)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::task","description":"Constructs a task with a function callback and a priority.","params":[{"type":"int(*)(void)","name":"callback","description":"A reference to a function."},{"type":"int32_t","name":"priority","description":"Sets the priority of the task."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">stop</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">stop</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::task::stop","argsstring":"()","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::task","description":"Stops the task."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">suspend</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">suspend</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::task::suspend","argsstring":"()","static":"no","category":"action","languages":["pro"],"class":"vex::task","description":"Suspends the task until the task is told to resume."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">resume</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">resume</span>();</span></pre>","returns":[{"type":"void"}],"definition":"void vex::task::resume","argsstring":"()","static":"no","category":"action","languages":["pro"],"class":"vex::task","description":"Resumes the previously suspended task."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-sensing\">priority</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-sensing\">priority</span>()</span></pre>","returns":[{"type":"int32_t","description":"Returns an integer that represents the priority of the task."}],"definition":"int32_t vex::task::priority","argsstring":"()","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::task","description":"Gets the priority of the task."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">setPriority</span>(<span class =\"cm-number\">1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::task\">Task</span>.<span class=\"cm-action\">setPriority</span>(<span class =\"cm-number\">1</span>);</span></pre>","returns":[{"type":"void"}],"definition":"void vex::task::setPriority","argsstring":"(int32_t priority)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::task","description":"Sets the priority of the task specified by the parameter.","params":[{"type":"int32_t","name":"priority","description":"The priority level of the task."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">vex::task::sleep</span>(<span class =\"cm-number\">1000</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">task::sleep</span>(<span class =\"cm-number\">1000</span>);</span></pre>","returns":[{"type":"void"}],"definition":"static void vex::task::sleep","argsstring":"(uint32_t time)","static":"yes","category":"action","languages":["cpp","pro"],"class":"vex::task","description":"Sets the task to sleep for the specified amount of time (in milliseconds).","params":[{"type":"uint32_t","name":"time","description":"The number of milliseconds for the task to sleep."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">vex::task::yield</span>();</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">task::yield</span>();</span></pre>","returns":[{"type":"void"}],"definition":"static void vex::task::yield","argsstring":"()","static":"yes","category":"action","languages":["cpp","pro"],"class":"vex::task","description":"Suspends the enumerator and gives up control to the enumerating method. A breaking point in a task."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">vex::task::stop</span>(<span class=\"cm-variable\">callbackFunction</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">task::stop</span>(<span class=\"cm-variable\">callbackFunction</span>);</span></pre>","returns":[{"type":"void"}],"definition":"static void vex::task::stop","argsstring":"(int(*callback)(void))","static":"yes","category":"action","languages":["cpp","pro"],"class":"vex::task","description":"Stops the task of the passed in function.","params":[{"type":"int(*)(void)","name":"callback","description":"A reference to a function."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">objectCount</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">objectCount</span></span></pre>","returns":[{"type":"int32_t"}],"definition":"int32_t vex::vision::objectCount","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision","description":"The amount of objects found in the data sample."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::vision</span> <span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span> = <span class=\"cm-def\">vex::vision</span>(<span class=\"cm-variable\">vex::PORT1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vision</span> <span class=\"cm-instance\" data-type=\"vision\">Vision</span> = <span class=\"cm-def\">vision</span>(<span class=\"cm-variable\">PORT1</span>);</span></pre>","definition":"vex::vision::vision","argsstring":"(int32_t index)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::vision","description":"Creates a new vision object on the port specified.","params":[{"type":"int32_t","name":"index","description":"The port index for this vision. The index is zero-based."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vex::vision</span> <span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span> = <span class=\"cm-def\">vex::vision</span>(<span class=\"cm-variable\">vex::PORT1</span>,<span class =\"cm-number\">60</span>,<span class=\"cm-variable\">sigObj1</span>,<span class=\"cm-variable\">sigObj2</span>,<span class=\"cm-variable\">sigObj3</span>,<span class=\"cm-variable\">sigObj4</span>,<span class=\"cm-variable\">sigObj5</span>,<span class=\"cm-variable\">sigObj6</span>,<span class=\"cm-variable\">sigObj7</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-builtin\">vision</span> <span class=\"cm-instance\" data-type=\"vision\">Vision</span> = <span class=\"cm-def\">vision</span>(<span class=\"cm-variable\">PORT1</span>,<span class =\"cm-number\">60</span>,<span class=\"cm-variable\">sigObj1</span>,<span class=\"cm-variable\">sigObj2</span>,<span class=\"cm-variable\">sigObj3</span>,<span class=\"cm-variable\">sigObj4</span>,<span class=\"cm-variable\">sigObj5</span>,<span class=\"cm-variable\">sigObj6</span>,<span class=\"cm-variable\">sigObj7</span>);</span></pre>","definition":"vex::vision::vision","argsstring":"(int32_t index, uint8_t bright, Args... sigs)","static":"no","category":"constructor","languages":["cpp","pro"],"class":"vex::vision","description":"Creates a new vision object on the port specified. Sets the brightness setting and all of the vision objects settings.","params":[{"type":"int32_t","name":"index","description":"The port index for this vision. The index is zero-based."},{"type":"uint8_t","name":"bright","description":"The vision sensor brightness setting. Values are 0 to 255"},{"type":"Args...","name":"sigs","description":"List of signature objects used to setup the detection signatures for this sensor."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class =\"cm-number\">1</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class =\"cm-number\">1</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns the number of objects found from the ID passed in the parameter."}],"definition":"int32_t vex::vision::takeSnapshot","argsstring":"(uint32_t id)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::vision","description":"Takes a data sample from the vision sensor.","params":[{"type":"uint32_t","name":"id","description":"The ID of the object to look for."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">codeSig</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">codeSig</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns the number of objects found from the code signature passed in the parameter."}],"definition":"int32_t vex::vision::takeSnapshot","argsstring":"(code &cc)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::vision","description":"Takes a data sample from the vision sensor.","params":[{"type":"code","name":"cc","description":"The code signature of the object to look for."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">SIG1</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">SIG1</span>)</span></pre>","returns":[{"type":"int32_t","description":"Returns a number of objects found from the signature passed in the parameter."}],"definition":"int32_t vex::vision::takeSnapshot","argsstring":"(signature &sig)","static":"no","category":"action","languages":["block","cpp","pro"],"class":"vex::vision","description":"Takes a data sample from the vision sensor.","params":[{"type":"signature","name":"sig","description":"The signature of the object to look for."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">5</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class =\"cm-number\">1</span>,<span class =\"cm-number\">5</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns a limited number of objects found from the ID passed in the parameter."}],"definition":"int32_t vex::vision::takeSnapshot","argsstring":"(uint32_t id, uint32_t count)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::vision","description":"Takes a data sample from the vision sensor, and only stores the largest samples of the specified amount.","params":[{"type":"uint32_t","name":"id","description":"The ID of the object to look for."},{"type":"uint32_t","name":"count","description":"the amount of objects to look for. The largest of the object will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">sigCode</span>,<span class =\"cm-number\">5</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">sigCode</span>,<span class =\"cm-number\">5</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns a limited number of objects found from the code signature passed in the parameter."}],"definition":"int32_t vex::vision::takeSnapshot","argsstring":"(code &cc, uint32_t count)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::vision","description":"Takes a data sample from the vision sensor, and only stores the largest samples of the specified amount.","params":[{"type":"code","name":"cc","description":"The code signature of the object to look for."},{"type":"uint32_t","name":"count","description":"the amount of objects to look for. The largest of the object will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">SIG1</span>,<span class =\"cm-number\">5</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-action\">takeSnapshot</span>(<span class=\"cm-variable\">SIG1</span>,<span class =\"cm-number\">5</span>);</span></pre>","returns":[{"type":"int32_t","description":"Returns a limited number of objects found from the signature passed in the parameter."}],"definition":"int32_t vex::vision::takeSnapshot","argsstring":"(signature &sig, uint32_t count)","static":"no","category":"action","languages":["cpp","pro"],"class":"vex::vision","description":"Takes a data sample from the vision sensor, and only stores the largest samples of the specified amount.","params":[{"type":"signature","name":"sig","description":"The signature of the object to look for."},{"type":"uint32_t","name":"count","description":"the amount of objects to look for. The largest of the object will be returned."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-setting\">setLedMode</span>(<span class=\"cm-variable\">vex::tLedMode::manual</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-setting\">setLedMode</span>(<span class=\"cm-variable\">tLedMode::manual</span>);</span></pre>","returns":[{"type":"bool","description":"Returns true if setting was successfully saved."}],"definition":"bool vex::vision::setLedMode","argsstring":"(ledMode mode)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::vision","description":"Changes the mode of the LED on the vision sensor.","params":[{"type":"ledMode","name":"mode","description":"The LED mode. Automatic mode will cause the LED color to be controlled by the vision sensor firmware. Manual mode allows the LED color to be controlled by the user program."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">getLedMode</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">getLedMode</span>()</span></pre>","returns":[{"type":"ledMode","description":"Returns a tLedMode that represents the current mode of the vision sensor LED."}],"definition":"ledMode vex::vision::getLedMode","argsstring":"(void)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::vision","description":"Gets the mode of the LED from the vision sensor."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-setting\">setLedBrightness</span>(<span class =\"cm-number\">50</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-setting\">setLedBrightness</span>(<span class =\"cm-number\">50</span>);</span></pre>","returns":[{"type":"bool","description":"Returns true if setting was successfully saved."}],"definition":"bool vex::vision::setLedBrightness","argsstring":"(uint8_t percent)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::vision","description":"Changes the brightness of the LED on the vision sensor when LED is set to manual mode.","params":[{"type":"uint8_t","name":"percent","description":"A percentage of total brightness of the vision sensor LED when in manual mode. Values are 0 to 100. 0 = LED off"}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">getLedBrightness</span>()</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">getLedBrightness</span>()</span></pre>","returns":[{"type":"uint8_t","description":"Returns a value between 0 and 100 that represents the current brightness of the vision sensor LED."}],"definition":"uint8_t vex::vision::getLedBrightness","argsstring":"(void)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::vision","description":"Gets the brightness of the LED from the vision sensor."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-setting\">setLedColor</span>(<span class =\"cm-number\">0</span>,<span class =\"cm-number\">255</span>,<span class =\"cm-number\">0</span>);</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-setting\">setLedColor</span>(<span class =\"cm-number\">0</span>,<span class =\"cm-number\">255</span>,<span class =\"cm-number\">0</span>);</span></pre>","returns":[{"type":"bool","description":"Returns true if setting was successfully saved."}],"definition":"bool vex::vision::setLedColor","argsstring":"(uint8_t red, uint8_t green, uint8_t blue)","static":"no","category":"setting","languages":["cpp","pro"],"class":"vex::vision","description":"Changes the color of the LED on the vision sensor when LED is set to manual mode.","params":[{"type":"uint8_t","name":"red","description":"A value from 0 to 255 the represents the intensity of the red color of the LED."},{"type":"uint8_t","name":"green","description":"A value from 0 to 255 the represents the intensity of the green color of the LED."},{"type":"uint8_t","name":"blue","description":"A value from 0 to 255 the represents the intensity of the blue color of the LED."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">getLedColor</span>(<span class =\"cm-number\">0</span>,<span class =\"cm-number\">255</span>,<span class =\"cm-number\">0</span>)</span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-sensing\">getLedColor</span>(<span class =\"cm-number\">0</span>,<span class =\"cm-number\">255</span>,<span class =\"cm-number\">0</span>)</span></pre>","returns":[{"type":"bool","description":"Returns true if values were sucessfully recived."}],"definition":"bool vex::vision::getLedColor","argsstring":"(uint8_t *red, uint8_t *green, uint8_t *blue)","static":"no","category":"sensing","languages":["cpp","pro"],"class":"vex::vision","description":"Gets the color of the LED from the vision sensor.","params":[{"type":"uint8_t *","name":"red","description":"A reference to a value to store the intensity of the red color of the LED."},{"type":"uint8_t *","name":"green","description":"A reference to a value to store the intensity of the green color of the LED."},{"type":"uint8_t *","name":"blue","description":"A reference to a value to store the intensity of the blue color of the LED."}]},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">id</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">id</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::id","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The unique ID of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">originX</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">originX</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::originX","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The top left x position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">originY</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">originY</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::originY","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The top left y position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">centerX</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">centerX</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::centerX","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The center x position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">centerY</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">centerY</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::centerY","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The center y position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">width</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">width</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::width","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The width of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">height</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">height</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::height","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The height of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">angle</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">angle</span></span></pre>","returns":[{"type":"const double &"}],"definition":"const double& vex::vision::object::angle","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The angle of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">exists</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">largestObject</span>.<span class=\"cm-sensing\">exists</span></span></pre>","returns":[{"type":"const bool &"}],"definition":"const bool& vex::vision::object::exists","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"If the vision sensor detects the object or not."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">id</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">id</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::id","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The unique ID of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">originX</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">originX</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::originX","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The top left x position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">originY</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">originY</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::originY","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The top left y position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">centerX</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">centerX</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::centerX","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The center x position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">centerY</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">centerY</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::centerY","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The center y position of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">width</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">width</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::width","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The width of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">height</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">height</span></span></pre>","returns":[{"type":"const int &"}],"definition":"const int& vex::vision::object::height","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The height of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">angle</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">angle</span></span></pre>","returns":[{"type":"const double &"}],"definition":"const double& vex::vision::object::angle","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"The angle of the object."},{"markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">exists</span></span></pre>","using-namespace-markup":"<pre class=\" CodeMirror-line \"><span style=\"padding-right: 0.1px;\"><span class=\"cm-instance\" data-type=\"vex::vision\">Vision</span>.<span class=\"cm-instance\">objects[0]</span>.<span class=\"cm-sensing\">exists</span></span></pre>","returns":[{"type":"const bool &"}],"definition":"const bool& vex::vision::object::exists","argsstring":"","static":"no","category":"sensing","languages":["block","cpp","pro"],"class":"vex::vision::object","description":"If the vision sensor detects the object or not."}]}