{"block":{"controller::axis::position(percentUnits units)":{"code":"LeftMotor.setVelocity(Controller1.Axis3.position(percent),percent);\nRightMotor.setVelocity(Controller1.Axis3.position(percent),percent);\nArmMotor.spin(forward);\nArmMotor.spin(forward);\nif(true){\n    ClawMotor.spin(forward);\n}else{\n    if(true){\n        ClawMotor.spin(reverse);\n    }else{\n        ClawMotor.stop();\n    }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::button::pressing(void)":{"code":"LeftMotor.setVelocity(Controller1.Axis3.position(percent),percent);\nRightMotor.setVelocity(Controller1.Axis3.position(percent),percent);\nArmMotor.spin(forward);\nArmMotor.spin(forward);\nif(true){\n    ClawMotor.spin(forward);\n}else{\n    if(true){\n        ClawMotor.spin(reverse);\n    }else{\n        ClawMotor.stop();\n    }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::setCursor(int32_t row, int32_t col)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::print(T value)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearScreen(void)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearLine(void)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::newLine(void)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::setVelocity(double velocity, percentUnits units)":{"code":"LeftMotor.setVelocity(50,percent);\nRightMotor.setVelocity(50,percent);\nLeftMotor.spin(forward);\nRightMotor.spin(forward);\nwait(3,seconds);\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::spin(directionType dir)":{"code":"LeftMotor.setVelocity(50,percent);\nRightMotor.setVelocity(50,percent);\nLeftMotor.spin(forward);\nRightMotor.spin(forward);\nwait(3,seconds);\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)":{"code":"LeftMotor.setVelocity(50,percent);\nRightMotor.setVelocity(50,percent);\nLeftMotor.startRotateFor(1,revolutions);\nRightMotor.rotateFor(1,revolutions);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::startRotateFor(double rotation, rotationUnits units)":{"code":"LeftMotor.setVelocity(50,percent);\nRightMotor.setVelocity(50,percent);\nLeftMotor.startRotateFor(1,revolutions);\nRightMotor.rotateFor(1,revolutions);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::stop(void)":{"code":"LeftMotor.setVelocity(50,percent);\nRightMotor.setVelocity(50,percent);\nLeftMotor.spin(forward);\nRightMotor.spin(forward);\nwait(3,seconds);\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"}},"cpp":{"accelerometer::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the accelerometer sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the accelerometer sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"accelerometer::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the accelerometer sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the accelerometer sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"analog_in::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the analog input percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the analog input analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"analog_in::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the analog input percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the analog input analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"brain::battery::capacity(percentUnits units=percentUnits::pct)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen();\n\n    // display the current battery capacity in percent\n    Brain.Screen.printAt(1, 20, \"Battery Capacity: %d%%\", Brain.Battery.capacity());\n    \n    // display the current battery temperature in percent\n    Brain.Screen.printAt(1, 40, \"Battery Temperature: %d%%\", Brain.Battery.temperature());\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::battery::temperature(percentUnits units=percentUnits::pct)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen();\n\n    // display the current battery capacity in percent\n    Brain.Screen.printAt(1, 20, \"Battery Capacity: %d%%\", Brain.Battery.capacity());\n    \n    // display the current battery temperature in percent\n    Brain.Screen.printAt(1, 40, \"Battery Temperature: %d%%\", Brain.Battery.temperature());\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::lcd::setCursor(int32_t row, int32_t col)":{"code":"Brain.Screen.setCursor(1,1);\nBrain.Screen.print(\"HELLO WORLD!\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"Welcome to the world of text!\");\n// wait 3 seconds\ntask::sleep(3000);\nBrain.Screen.clearScreen();\nBrain.Screen.setCursor(1,1);\nBrain.Screen.print(\"You can use text on the screen\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"to display useful information about\");\nBrain.Screen.newLine();\nBrain.Screen.print(\"your program/robot status.\");\n"},"brain::lcd::setPenWidth(uint32_t width)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::setOrigin(int32_t x, int32_t y)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::setPenColor(const color &color)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::setFillColor(const color &color)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::print(const char *format,...)":{"code":"//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Started.\");\nBrain.Screen.newLine();//Move the cursor to a new line on the screen.\n//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Ended.\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"brain::lcd::printAt(int32_t x, int32_t y, const char *format,...)":{"code":"int torque = 10;\nint velocity = 50;\n\nwhile (true) {\n  if (Controller1.ButtonR1.pressing()) {\n    LeftMotor.spin(directionType::fwd);\n  } else {\n    LeftMotor.stop(brakeType::hold);\n  }\n  if (Controller1.ButtonUp.pressing()) {\n    while (Controller1.ButtonUp.pressing()) { } // wait for button release\n    LeftMotor.setMaxTorque(torque++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonDown.pressing()) {\n    while (Controller1.ButtonDown.pressing()) { }\n    LeftMotor.setMaxTorque(torque--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonLeft.pressing()) {\n    while (Controller1.ButtonLeft.pressing()) { }\n    LeftMotor.setVelocity(velocity--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonRight.pressing()) {\n    while (Controller1.ButtonRight.pressing()) { }\n    LeftMotor.setVelocity(velocity++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"brain::lcd::clearScreen(void)":{"code":"Brain.Screen.setCursor(1,1);\nBrain.Screen.print(\"HELLO WORLD!\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"Welcome to the world of text!\");\n// wait 3 seconds\ntask::sleep(3000);\nBrain.Screen.clearScreen();\nBrain.Screen.setCursor(1,1);\nBrain.Screen.print(\"You can use text on the screen\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"to display useful information about\");\nBrain.Screen.newLine();\nBrain.Screen.print(\"your program/robot status.\");\n"},"brain::lcd::clearLine(void)":{"code":"// create a function containing the code to run\nvoid screenPressed( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last press x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Pressed\");\n}\n\nvoid screenReleased( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last release x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Released\");\n}\n\nint main() {\n    // tell the program what code to run when the screen is pressed\n    Brain.Screen.pressed(screenPressed);\n    \n    // tell the program what code to run when the screen is released\n    Brain.Screen.released(screenReleased);\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n"},"brain::lcd::newLine(void)":{"code":"//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Started.\");\nBrain.Screen.newLine();//Move the cursor to a new line on the screen.\n//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Ended.\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"brain::lcd::drawPixel(int x, int y)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::drawLine(int x1, int y1, int x2, int y2)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::drawRectangle(int x, int y, int width, int height)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::drawCircle(int x, int y, int radius)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::pressed(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid screenPressed( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last press x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Pressed\");\n}\n\nvoid screenReleased( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last release x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Released\");\n}\n\nint main() {\n    // tell the program what code to run when the screen is pressed\n    Brain.Screen.pressed(screenPressed);\n    \n    // tell the program what code to run when the screen is released\n    Brain.Screen.released(screenReleased);\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n"},"brain::lcd::released(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid screenPressed( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last press x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Pressed\");\n}\n\nvoid screenReleased( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last release x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Released\");\n}\n\nint main() {\n    // tell the program what code to run when the screen is pressed\n    Brain.Screen.pressed(screenPressed);\n    \n    // tell the program what code to run when the screen is released\n    Brain.Screen.released(screenReleased);\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n"},"brain::lcd::xPosition()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // get current touch position and store in variable for easy access\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen()\n\n    // display the current touch position\n    Brain.Screen.printAt(1, 20, \"current pos x: %04d, y: %04d\", xPos, yPos);\n\n    // display if the screen is pressed of not\n    if (Brain.Screen.pressing()) {\n        Brain.Screen.printAt(1, 40, \"Screen pressed\");\n    } else {\n        Brain.Screen.printAt(1, 40, \"Screen released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::lcd::yPosition()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // get current touch position and store in variable for easy access\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen()\n\n    // display the current touch position\n    Brain.Screen.printAt(1, 20, \"current pos x: %04d, y: %04d\", xPos, yPos);\n\n    // display if the screen is pressed of not\n    if (Brain.Screen.pressing()) {\n        Brain.Screen.printAt(1, 40, \"Screen pressed\");\n    } else {\n        Brain.Screen.printAt(1, 40, \"Screen released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::lcd::pressing()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // get current touch position and store in variable for easy access\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen()\n\n    // display the current touch position\n    Brain.Screen.printAt(1, 20, \"current pos x: %04d, y: %04d\", xPos, yPos);\n\n    // display if the screen is pressed of not\n    if (Brain.Screen.pressing()) {\n        Brain.Screen.printAt(1, 40, \"Screen pressed\");\n    } else {\n        Brain.Screen.printAt(1, 40, \"Screen released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"bumper::pressing()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display if the bumper is pressed or not\n    if (Bumper.pressing()) {\n        Brain.Screen.printAt(1, 20, \"bumper pressed\");\n    } else {\n        Brain.Screen.printAt(1, 20, \"bumper released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"competition::autonomous(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid autonomous( void ) {\n    // do things in autonomous mode...\n}\n\nvoid usercontrol( void ) {\n    // do things in user control mode...\n}\n\nint main() {\n    // tell the competition code what to run for the autonomous period\n    Competition.autonomous( autonomous );\n\n    // tell the competition code what to run for the driver control period\n    Competition.drivercontrol( usercontrol );\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::drivercontrol(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid autonomous( void ) {\n    // do things in autonomous mode...\n}\n\nvoid usercontrol( void ) {\n    // do things in user control mode...\n}\n\nint main() {\n    // tell the competition code what to run for the autonomous period\n    Competition.autonomous( autonomous );\n\n    // tell the competition code what to run for the driver control period\n    Competition.drivercontrol( usercontrol );\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isEnabled()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isDriverControl()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isAutonomous()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isCompetitionSwitch()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isFieldControl()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::axis::position(percentUnits units)":{"code":"//Drive Control\n//Set the left and right motor to spin forward using the controller Axis values as the velocity value.\nLeftMotor.spin(directionType::fwd, Controller1.Axis3.position(percent), velocityUnits::pct);\nRightMotor.spin(directionType::fwd, Controller1.Axis2.position(percent), velocityUnits::pct);\n\n//Claw Control\nif(Controller1.ButtonA.pressing()) { //If the A button is pressed...\n    //...Spin the claw motor forward.\n    ClawMotor.spin(directionType::fwd, clawSpeedPCT, velocityUnits::pct);\n}\nelse if(Controller1.ButtonY.pressing()) { //If the Y button is pressed...\n    //...Spin the claw motor backward.\n    ClawMotor.spin(directionType::rev, clawSpeedPCT, velocityUnits::pct);\n}\nelse { //If the A or Y button are not pressed...\n    //...Stop the claw motor.\n    ClawMotor.stop(brakeType::brake);\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::button::pressing(void)":{"code":"//Drive Control\n//Set the left and right motor to spin forward using the controller Axis values as the velocity value.\nLeftMotor.spin(directionType::fwd, Controller1.Axis3.position(percent), velocityUnits::pct);\nRightMotor.spin(directionType::fwd, Controller1.Axis2.position(percent), velocityUnits::pct);\n\n//Claw Control\nif(Controller1.ButtonA.pressing()) { //If the A button is pressed...\n    //...Spin the claw motor forward.\n    ClawMotor.spin(directionType::fwd, clawSpeedPCT, velocityUnits::pct);\n}\nelse if(Controller1.ButtonY.pressing()) { //If the Y button is pressed...\n    //...Spin the claw motor backward.\n    ClawMotor.spin(directionType::rev, clawSpeedPCT, velocityUnits::pct);\n}\nelse { //If the A or Y button are not pressed...\n    //...Stop the claw motor.\n    ClawMotor.stop(brakeType::brake);\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::setCursor(int32_t row, int32_t col)":{"code":"// Make sure the screen on the controller is blank before proceding to print to the screen\nController1.Screen.clearScreen();\n\n// Set the cursor (text starting point) to row 1, column 1\nController1.Screen.setCursor(1,1);\n\n// Print \"HELLO!\" on the first line\nController1.Screen.print(\"HELLO!\");\n\n// Move the cursor to the next line then print\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\n\n// Wait 1 second\ntask::sleep(1000);\n\n// Replace the text on line 2 with \"I'm your controller!\"\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n\n// clear line 1\nController1.Screen.clearLine(1);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::print(const char *format,...)":{"code":"// Make sure the screen on the controller is blank before proceding to print to the screen\nController1.Screen.clearScreen();\n\n// Set the cursor (text starting point) to row 1, column 1\nController1.Screen.setCursor(1,1);\n\n// Print \"HELLO!\" on the first line\nController1.Screen.print(\"HELLO!\");\n\n// Move the cursor to the next line then print\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\n\n// Wait 1 second\ntask::sleep(1000);\n\n// Replace the text on line 2 with \"I'm your controller!\"\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n\n// clear line 1\nController1.Screen.clearLine(1);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearScreen(void)":{"code":"// Make sure the screen on the controller is blank before proceding to print to the screen\nController1.Screen.clearScreen();\n\n// Set the cursor (text starting point) to row 1, column 1\nController1.Screen.setCursor(1,1);\n\n// Print \"HELLO!\" on the first line\nController1.Screen.print(\"HELLO!\");\n\n// Move the cursor to the next line then print\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\n\n// Wait 1 second\ntask::sleep(1000);\n\n// Replace the text on line 2 with \"I'm your controller!\"\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n\n// clear line 1\nController1.Screen.clearLine(1);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearLine(void)":{"code":"// Make sure the screen on the controller is blank before proceding to print to the screen\nController1.Screen.clearScreen();\n\n// Set the cursor (text starting point) to row 1, column 1\nController1.Screen.setCursor(1,1);\n\n// Print \"HELLO!\" on the first line\nController1.Screen.print(\"HELLO!\");\n\n// Move the cursor to the next line then print\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\n\n// Wait 1 second\ntask::sleep(1000);\n\n// Replace the text on line 2 with \"I'm your controller!\"\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n\n// clear line 1\nController1.Screen.clearLine(1);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearLine(int number)":{"code":"// Make sure the screen on the controller is blank before proceding to print to the screen\nController1.Screen.clearScreen();\n\n// Set the cursor (text starting point) to row 1, column 1\nController1.Screen.setCursor(1,1);\n\n// Print \"HELLO!\" on the first line\nController1.Screen.print(\"HELLO!\");\n\n// Move the cursor to the next line then print\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\n\n// Wait 1 second\ntask::sleep(1000);\n\n// Replace the text on line 2 with \"I'm your controller!\"\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n\n// clear line 1\nController1.Screen.clearLine(1);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::newLine(void)":{"code":"// Make sure the screen on the controller is blank before proceding to print to the screen\nController1.Screen.clearScreen();\n\n// Set the cursor (text starting point) to row 1, column 1\nController1.Screen.setCursor(1,1);\n\n// Print \"HELLO!\" on the first line\nController1.Screen.print(\"HELLO!\");\n\n// Move the cursor to the next line then print\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\n\n// Wait 1 second\ntask::sleep(1000);\n\n// Replace the text on line 2 with \"I'm your controller!\"\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n\n// clear line 1\nController1.Screen.clearLine(1);\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"digital_in::value()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display if the digital input value is high or low\n    if (digitalIn.value() == 1) {\n        Brain.Screen.printAt(1, 20, \"DigitalIn HIGH\");\n    } else {\n        Brain.Screen.printAt(1, 20, \"DigitalIn LOW\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"digital_out::value()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // toggle the digital output value and display the value on the screen\n    if (DigitalOut.value() == 1) {\n        DigitalOut.set(false);\n        Brain.Screen.printAt(1, 20, \"DigitalOut LOW\");\n    } else {\n        DigitalOut.set(true);\n        Brain.Screen.printAt(1, 20, \"DigitalOut HIGH\");\n    }\n    \n    //Sleep the task for a short amount of time to delay the toggle of the output value\n    task::sleep(1000);\n}\n"},"encoder::rotation(rotationUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the encoder value on the screen\n    Brain.Screen.printAt(1, 20, \"Encoder value: %f degrees\", Encoder.rotation(roationUnits::deg));\n\n    // display the encoder velocity on the screen\n    Brain.Screen.printAt(1, 40, \"Encoder speed: %f degrees/sec\", Encoder.velocity(velocityUnits::dps));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"encoder::velocity(velocityUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the encoder value on the screen\n    Brain.Screen.printAt(1, 20, \"Encoder value: %f degrees\", Encoder.rotation(roationUnits::deg));\n\n    // display the encoder velocity on the screen\n    Brain.Screen.printAt(1, 40, \"Encoder speed: %f degrees/sec\", Encoder.velocity(velocityUnits::dps));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"gyro::value(rotationUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the gyro rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Gyro.value(roationUnits::deg));\n\n    // display the gyro percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Gyro.value(percentUnits::pct));\n    \n    // display the gyro analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Gyro.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"gyro::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the gyro rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Gyro.value(roationUnits::deg));\n\n    // display the gyro percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Gyro.value(percentUnits::pct));\n    \n    // display the gyro analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Gyro.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"gyro::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the gyro rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Gyro.value(roationUnits::deg));\n\n    // display the gyro percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Gyro.value(percentUnits::pct));\n    \n    // display the gyro analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Gyro.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"light::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the light sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Light.value(percentUnits::pct));\n    \n    // display the light sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Light.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"light::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the light sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Light.value(percentUnits::pct));\n    \n    // display the light sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Light.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"limit::pressing()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display if the limit switch is pressed or not\n    if (Limit.pressing()) {\n        Brain.Screen.printAt(1, 20, \"limit switch pressed\");\n    } else {\n        Brain.Screen.printAt(1, 20, \"limit switch released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"line::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the line sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Line.value(percentUnits::pct));\n    \n    // display the line sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Line.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"line::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the line sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Line.value(percentUnits::pct));\n    \n    // display the line sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Line.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"motor::setVelocity(double velocity, velocityUnits units)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::spin(directionType dir)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Rotate the Left and Right Motor for degreesToRotate.\nLeftMotor.rotateFor(degreesToRotate, rotationUnits::deg, false); //This command must be non blocking.\nRightMotor.rotateFor(degreesToRotate, rotationUnits::deg); //This command is blocking so the program will wait here until the right motor is done.\n//The motors will brake once they reach their destination.\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::stop(void)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::stop(brakeType mode)":{"code":"int torque = 10;\nint velocity = 50;\n\nwhile (true) {\n  if (Controller1.ButtonR1.pressing()) {\n    LeftMotor.spin(directionType::fwd);\n  } else {\n    LeftMotor.stop(brakeType::hold);\n  }\n  if (Controller1.ButtonUp.pressing()) {\n    while (Controller1.ButtonUp.pressing()) { } // wait for button release\n    LeftMotor.setMaxTorque(torque++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonDown.pressing()) {\n    while (Controller1.ButtonDown.pressing()) { }\n    LeftMotor.setMaxTorque(torque--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonLeft.pressing()) {\n    while (Controller1.ButtonLeft.pressing()) { }\n    LeftMotor.setVelocity(velocity--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonRight.pressing()) {\n    while (Controller1.ButtonRight.pressing()) { }\n    LeftMotor.setVelocity(velocity++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::setMaxTorque(double value, percentUnits units)":{"code":"int torque = 10;\nint velocity = 50;\n\nwhile (true) {\n  if (Controller1.ButtonR1.pressing()) {\n    LeftMotor.spin(directionType::fwd);\n  } else {\n    LeftMotor.stop(brakeType::hold);\n  }\n  if (Controller1.ButtonUp.pressing()) {\n    while (Controller1.ButtonUp.pressing()) { } // wait for button release\n    LeftMotor.setMaxTorque(torque++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonDown.pressing()) {\n    while (Controller1.ButtonDown.pressing()) { }\n    LeftMotor.setMaxTorque(torque--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonLeft.pressing()) {\n    while (Controller1.ButtonLeft.pressing()) { }\n    LeftMotor.setVelocity(velocity--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonRight.pressing()) {\n    while (Controller1.ButtonRight.pressing()) { }\n    LeftMotor.setVelocity(velocity++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"pot::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the potentiometer rotation value on the screen\n    //\"pot\" is the declared name for the potentiometer\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", pot.value(rotationUnits::deg));\n\n    // display the potentiometer percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", pot.value(percentUnits::pct));\n    \n    // display the potentiometer analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", pot.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"pot::value(rotationUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the potentiometer rotation value on the screen\n    //\"pot\" is the declared name for the potentiometer\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", pot.value(rotationUnits::deg));\n\n    // display the potentiometer percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", pot.value(percentUnits::pct));\n    \n    // display the potentiometer analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", pot.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"pot::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the potentiometer rotation value on the screen\n    //\"pot\" is the declared name for the potentiometer\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", pot.value(rotationUnits::deg));\n\n    // display the potentiometer percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", pot.value(percentUnits::pct));\n    \n    // display the potentiometer analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", pot.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"pwm_out::state(int32_t value, percentUnits units)":{"code":"// create a variable to store the output value to make it possible to increment the value\n//   on each iteration of the loop.\nint value = 0;\n\n// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // increment output value\n    value++;\n\n    // if value more than 100 set value back to 0\n    if (value > 100) {\n      value = 0;\n    }\n\n    // set pwm output to the changing value \n    PwmOut.state(value, percentUnits::pct);\n\n    // display the output value on the screen\n    Brain.Screen.printAt(1, 20, \"outout: %f %%\", value);\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(1000);\n}\n"},"sonar::distance(distanceUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the sonar distance in mm on the screen\n    Brain.Screen.printAt(1, 20, \"distance: %f mm\", Sonar.distance(distanceUnits::mm));\n    \n    // display the sonar distance in mm on the screen\n    Brain.Screen.printAt(1, 40, \"distance: %f in\", Sonar.distance(distanceUnits::in));\n    \n    // display the sonar distance in mm on the screen\n    Brain.Screen.printAt(1, 60, \"distance: %f cm\", Sonar.distance(distanceUnits::cm));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"task::sleep(uint32_t time)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"}},"pro":{"velocityUnits_enum":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"directionType_enum":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"accelerometer::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the accelerometer sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the accelerometer sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"accelerometer::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the accelerometer sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the accelerometer sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"analog_in::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the analog input percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the analog input analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"analog_in::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the analog input percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Accel.value(percentUnits::pct));\n    \n    // display the analog input analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Accel.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"brain::battery::capacity(percentUnits units=percentUnits::pct)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen();\n\n    // display the current battery capacity in percent\n    Brain.Screen.printAt(1, 20, \"Battery Capacity: %d%%\", Brain.Battery.capacity());\n    \n    // display the current battery temperature in percent\n    Brain.Screen.printAt(1, 40, \"Battery Temperature: %d%%\", Brain.Battery.temperature());\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::battery::temperature(percentUnits units=percentUnits::pct)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen();\n\n    // display the current battery capacity in percent\n    Brain.Screen.printAt(1, 20, \"Battery Capacity: %d%%\", Brain.Battery.capacity());\n    \n    // display the current battery temperature in percent\n    Brain.Screen.printAt(1, 40, \"Battery Temperature: %d%%\", Brain.Battery.temperature());\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::lcd::setCursor(int32_t row, int32_t col)":{"code":"Brain.Screen.setCursor(1,1);\nBrain.Screen.print(\"HELLO WORLD!\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"Welcome to the world of text!\");\n// wait 3 seconds\ntask::sleep(3000);\nBrain.Screen.clearScreen();\nBrain.Screen.setCursor(1,1);\nBrain.Screen.print(\"You can use text on the screen\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"to display useful information about\");\nBrain.Screen.newLine();\nBrain.Screen.print(\"your program/robot status.\");\n"},"brain::lcd::setPenWidth(uint32_t width)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::setOrigin(int32_t x, int32_t y)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::setPenColor(const color &color)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::setFillColor(const color &color)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::print(const char *format,...)":{"code":"//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Started.\");\nBrain.Screen.newLine();//Move the cursor to a new line on the screen.\n//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Ended.\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"brain::lcd::printAt(int32_t x, int32_t y, const char *format,...)":{"code":"int torque = 10;\nint velocity = 50;\n\nwhile (true) {\n  if (Controller1.ButtonR1.pressing()) {\n    LeftMotor.spin(directionType::fwd);\n  } else {\n    LeftMotor.stop(brakeType::hold);\n  }\n  if (Controller1.ButtonUp.pressing()) {\n    while (Controller1.ButtonUp.pressing()) { } // wait for button release\n    LeftMotor.setMaxTorque(torque++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonDown.pressing()) {\n    while (Controller1.ButtonDown.pressing()) { }\n    LeftMotor.setMaxTorque(torque--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonLeft.pressing()) {\n    while (Controller1.ButtonLeft.pressing()) { }\n    LeftMotor.setVelocity(velocity--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonRight.pressing()) {\n    while (Controller1.ButtonRight.pressing()) { }\n    LeftMotor.setVelocity(velocity++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"brain::lcd::clearScreen(void)":{"code":"Brain.Screen.setCursor(1,1);\nBrain.Screen.print(\"HELLO WORLD!\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"Welcome to the world of text!\");\n// wait 3 seconds\ntask::sleep(3000);\nBrain.Screen.clearScreen();\nBrain.Screen.setCursor(1,1);\nBrain.Screen.print(\"You can use text on the screen\"):\nBrain.Screen.newLine();\nBrain.Screen.print(\"to display useful information about\");\nBrain.Screen.newLine();\nBrain.Screen.print(\"your program/robot status.\");\n"},"brain::lcd::clearLine(void)":{"code":"// create a function containing the code to run\nvoid screenPressed( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last press x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Pressed\");\n}\n\nvoid screenReleased( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last release x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Released\");\n}\n\nint main() {\n    // tell the program what code to run when the screen is pressed\n    Brain.Screen.pressed(screenPressed);\n    \n    // tell the program what code to run when the screen is released\n    Brain.Screen.released(screenReleased);\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n"},"brain::lcd::newLine(void)":{"code":"//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Started.\");\nBrain.Screen.newLine();//Move the cursor to a new line on the screen.\n//Print to the brain's screen that the program has ended.\nBrain.Screen.print(\"User Program has Ended.\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"brain::lcd::drawPixel(int x, int y)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::drawLine(int x1, int y1, int x2, int y2)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::drawRectangle(int x, int y, int width, int height)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::drawCircle(int x, int y, int radius)":{"code":"// draw a single pixel at 20, 40\nBrain.Screen.drawPixel(20, 40);\n\n// draw a line from 30, 40 to 35, 50\nBrain.Screen.drawLine(30, 40, 35, 50);\n\n// draw a 10 by 20 rectangle strting at 50, 40\nBrain.Screen.drawRectangle(50, 40, 10, 20);\n\n// draw a circle with a radious of 15 pixels centered at 100, 100\nBrain.Screen.drawCircle(100, 100, 15);\n\n// make eveything drawn from now on have a thiker line\nBrain.Screen.setPenWidth(3);\n\n// draw a circle with a radious of 15 pixels centered at 100, 150\nBrain.Screen.drawCircle(100, 150, 15);\n\n// set background to green\nBrain.Screen.setFillColor(color::green);\n\n// set pen color to blue\nBrain.Screen.setPenColor(color::blue);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150\nBrain.Screen.drawCircle(150, 150, 25);\n\n// place the origin (0,0) at 100,0\nBrain.Screen.setOrigin(100, 0);\n\n// draw a circle with a radious of 25 pixels centered at 150, 150 based on the neew origin\nBrain.Screen.drawCircle(150, 150, 25);\n"},"brain::lcd::pressed(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid screenPressed( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last press x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Pressed\");\n}\n\nvoid screenReleased( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last release x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Released\");\n}\n\nint main() {\n    // tell the program what code to run when the screen is pressed\n    Brain.Screen.pressed(screenPressed);\n    \n    // tell the program what code to run when the screen is released\n    Brain.Screen.released(screenReleased);\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n"},"brain::lcd::released(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid screenPressed( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last press x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Pressed\");\n}\n\nvoid screenReleased( void ) {\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Last release x: %04d, y: %04d\", xPos, yPos);\n\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.clearLine();\n    Brain.Screen.print(\"Current state: Released\");\n}\n\nint main() {\n    // tell the program what code to run when the screen is pressed\n    Brain.Screen.pressed(screenPressed);\n    \n    // tell the program what code to run when the screen is released\n    Brain.Screen.released(screenReleased);\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n"},"brain::lcd::xPosition()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // get current touch position and store in variable for easy access\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen()\n\n    // display the current touch position\n    Brain.Screen.printAt(1, 20, \"current pos x: %04d, y: %04d\", xPos, yPos);\n\n    // display if the screen is pressed of not\n    if (Brain.Screen.pressing()) {\n        Brain.Screen.printAt(1, 40, \"Screen pressed\");\n    } else {\n        Brain.Screen.printAt(1, 40, \"Screen released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::lcd::yPosition()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // get current touch position and store in variable for easy access\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen()\n\n    // display the current touch position\n    Brain.Screen.printAt(1, 20, \"current pos x: %04d, y: %04d\", xPos, yPos);\n\n    // display if the screen is pressed of not\n    if (Brain.Screen.pressing()) {\n        Brain.Screen.printAt(1, 40, \"Screen pressed\");\n    } else {\n        Brain.Screen.printAt(1, 40, \"Screen released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"brain::lcd::pressing()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    // get current touch position and store in variable for easy access\n    int xPos = Brain.Screen.xPosition();\n    int yPos = Brain.Screen.yPosition();\n\n    // remove any old text from the screen to prevent unexpected results\n    Brain.Screen.clearScreen()\n\n    // display the current touch position\n    Brain.Screen.printAt(1, 20, \"current pos x: %04d, y: %04d\", xPos, yPos);\n\n    // display if the screen is pressed of not\n    if (Brain.Screen.pressing()) {\n        Brain.Screen.printAt(1, 40, \"Screen pressed\");\n    } else {\n        Brain.Screen.printAt(1, 40, \"Screen released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"bumper::pressing()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display if the bumper is pressed or not\n    if (Bumper.pressing()) {\n        Brain.Screen.printAt(1, 20, \"bumper pressed\");\n    } else {\n        Brain.Screen.printAt(1, 20, \"bumper released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"competition::autonomous(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid autonomous( void ) {\n    // do things in autonomous mode...\n}\n\nvoid usercontrol( void ) {\n    // do things in user control mode...\n}\n\nint main() {\n    // tell the competition code what to run for the autonomous period\n    Competition.autonomous( autonomous );\n\n    // tell the competition code what to run for the driver control period\n    Competition.drivercontrol( usercontrol );\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::drivercontrol(void(*callback)(void))":{"code":"// create a function containing the code to run\nvoid autonomous( void ) {\n    // do things in autonomous mode...\n}\n\nvoid usercontrol( void ) {\n    // do things in user control mode...\n}\n\nint main() {\n    // tell the competition code what to run for the autonomous period\n    Competition.autonomous( autonomous );\n\n    // tell the competition code what to run for the driver control period\n    Competition.drivercontrol( usercontrol );\n\n    //Prevent main from exiting with an infinite loop.\n    while(1) {\n        task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.\n    }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isEnabled()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isDriverControl()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isAutonomous()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isCompetitionSwitch()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"competition::isFieldControl()":{"code":"Brain.Screen.setCursor(1, 1);\nBrain.Screen.clearLine();\n// check what method of match control if any is being used\nif (Competition.isCompetitionSwitch()) {\n    // connected to a competition switch\n    Brain.Screen.print(\"Connected to a competition switch\");\n} else if (Competition.isFieldControl()) {\n    // connected to a field control system\n    Brain.Screen.print(\"Connected to a field control system\");\n} else {\n    // not connected to any control system\n    Brain.Screen.print(\"not connected to a control system\");\n}\n\nBrain.Screen.setCursor(2, 1);\nBrain.Screen.clearLine();\nBrain.Screen.clearLine(3);\n// check if the robot is enabled\nif (Competition.isEnabled()) {\n    // robot is enabled\n    Brain.Screen.print(\"Robot is enabled\");\n\n    Brain.Screen.setCursor(3, 1);\n    // check what mode/period the match is in\n    if (Competition.isAutonomous()) {\n        // robot is in autonomous mode\n        Brain.Screen.print(\"Robot is in Autonomous mode\");\n    } else if (Competition.isDriverControl()) {\n        // robot is in Driver Control mode\n        Brain.Screen.print(\"Robot is in Driver Control mode\");\n    }\n} else {\n    // robot is disabled\n    Brain.Screen.print(\"Robot is disabled\");\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::rumble(const char *str)":{"code":"// Have the controller output a short shake followed by a long shake (morse code for \"A\")\nController1.rumble('.-');\n\n// wait 3 seconds\ntask::sleep(3000);\n\n// Have the controller output a long shake followed by 3 short shakes (morse code for \"B\")\nController1.rumble('-...');\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::axis::changed(void(*callback)(void))":{"code":"void AxisValueChanged() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Axis value: %d\", Controller.Axis2.position(percentUnits::pct));\n}\n\nvoid ButtonUpPressed() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Up button pressed\");\n}\n\nvoid ButtonUpReleased() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Up button released\");\n}\n\nint main() {\n    Controller1.Axis2.changed(AxisValueChanged);\n    Controller1.ButtonUp.pressed(ButtonUpPressed);\n    Controller1.ButtonUp.released(ButtonUpReleased);\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::axis::position(percentUnits units)":{"code":"//Drive Control\n//Set the left and right motor to spin forward using the controller Axis values as the velocity value.\nLeftMotor.spin(directionType::fwd, Controller1.Axis3.position(percent), velocityUnits::pct);\nRightMotor.spin(directionType::fwd, Controller1.Axis2.position(percent), velocityUnits::pct);\n\n//Claw Control\nif(Controller1.ButtonA.pressing()) { //If the A button is pressed...\n    //...Spin the claw motor forward.\n    ClawMotor.spin(directionType::fwd, clawSpeedPCT, velocityUnits::pct);\n}\nelse if(Controller1.ButtonY.pressing()) { //If the Y button is pressed...\n    //...Spin the claw motor backward.\n    ClawMotor.spin(directionType::rev, clawSpeedPCT, velocityUnits::pct);\n}\nelse { //If the A or Y button are not pressed...\n    //...Stop the claw motor.\n    ClawMotor.stop(brakeType::brake);\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::button::pressed(void(*callback)(void))":{"code":"void AxisValueChanged() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Axis value: %d\", Controller.Axis2.position(percentUnits::pct));\n}\n\nvoid ButtonUpPressed() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Up button pressed\");\n}\n\nvoid ButtonUpReleased() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Up button released\");\n}\n\nint main() {\n    Controller1.Axis2.changed(AxisValueChanged);\n    Controller1.ButtonUp.pressed(ButtonUpPressed);\n    Controller1.ButtonUp.released(ButtonUpReleased);\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::button::released(void(*callback)(void))":{"code":"void AxisValueChanged() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Axis value: %d\", Controller.Axis2.position(percentUnits::pct));\n}\n\nvoid ButtonUpPressed() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Up button pressed\");\n}\n\nvoid ButtonUpReleased() {\n    Brain.Screen.clearLine(2);\n    Brain.Screen.setCursor(2, 0);\n    Brain.Screen.print(\"Up button released\");\n}\n\nint main() {\n    Controller1.Axis2.changed(AxisValueChanged);\n    Controller1.ButtonUp.pressed(ButtonUpPressed);\n    Controller1.ButtonUp.released(ButtonUpReleased);\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::button::pressing(void)":{"code":"//Drive Control\n//Set the left and right motor to spin forward using the controller Axis values as the velocity value.\nLeftMotor.spin(directionType::fwd, Controller1.Axis3.position(percent), velocityUnits::pct);\nRightMotor.spin(directionType::fwd, Controller1.Axis2.position(percent), velocityUnits::pct);\n\n//Claw Control\nif(Controller1.ButtonA.pressing()) { //If the A button is pressed...\n    //...Spin the claw motor forward.\n    ClawMotor.spin(directionType::fwd, clawSpeedPCT, velocityUnits::pct);\n}\nelse if(Controller1.ButtonY.pressing()) { //If the Y button is pressed...\n    //...Spin the claw motor backward.\n    ClawMotor.spin(directionType::rev, clawSpeedPCT, velocityUnits::pct);\n}\nelse { //If the A or Y button are not pressed...\n    //...Stop the claw motor.\n    ClawMotor.stop(brakeType::brake);\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::setCursor(int32_t row, int32_t col)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::print(const char *format,...)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearScreen(void)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearLine(void)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::clearLine(int number)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"controller::lcd::newLine(void)":{"code":"Controller1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController1.Screen.print(\"HELLO!\");\nController1.Screen.newLine();\nController1.Screen.print(\"WORLD!\");\nwait(1,seconds);\nController1.Screen.clearLine();\nController1.Screen.print(\"I'm your controller!\");\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"digital_in::value()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display if the digital input value is high or low\n    if (digitalIn.value() == 1) {\n        Brain.Screen.printAt(1, 20, \"DigitalIn HIGH\");\n    } else {\n        Brain.Screen.printAt(1, 20, \"DigitalIn LOW\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"digital_out::value()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // toggle the digital output value and display the value on the screen\n    if (DigitalOut.value() == 1) {\n        DigitalOut.set(false);\n        Brain.Screen.printAt(1, 20, \"DigitalOut LOW\");\n    } else {\n        DigitalOut.set(true);\n        Brain.Screen.printAt(1, 20, \"DigitalOut HIGH\");\n    }\n    \n    //Sleep the task for a short amount of time to delay the toggle of the output value\n    task::sleep(1000);\n}\n"},"digital_out::set(bool value)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // toggle the digital output value and display the value on the screen\n    if (DigitalOut.value() == 1) {\n        DigitalOut.set(false);\n        Brain.Screen.printAt(1, 20, \"DigitalOut LOW\");\n    } else {\n        DigitalOut.set(true);\n        Brain.Screen.printAt(1, 20, \"DigitalOut HIGH\");\n    }\n    \n    //Sleep the task for a short amount of time to delay the toggle of the output value\n    task::sleep(1000);\n}\n"},"encoder::rotation(rotationUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the encoder value on the screen\n    Brain.Screen.printAt(1, 20, \"Encoder value: %f degrees\", Encoder.rotation(roationUnits::deg));\n\n    // display the encoder velocity on the screen\n    Brain.Screen.printAt(1, 40, \"Encoder speed: %f degrees/sec\", Encoder.velocity(velocityUnits::dps));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"encoder::velocity(velocityUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the encoder value on the screen\n    Brain.Screen.printAt(1, 20, \"Encoder value: %f degrees\", Encoder.rotation(roationUnits::deg));\n\n    // display the encoder velocity on the screen\n    Brain.Screen.printAt(1, 40, \"Encoder speed: %f degrees/sec\", Encoder.velocity(velocityUnits::dps));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"gyro::value(rotationUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the gyro rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Gyro.value(roationUnits::deg));\n\n    // display the gyro percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Gyro.value(percentUnits::pct));\n    \n    // display the gyro analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Gyro.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"gyro::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the gyro rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Gyro.value(roationUnits::deg));\n\n    // display the gyro percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Gyro.value(percentUnits::pct));\n    \n    // display the gyro analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Gyro.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"gyro::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the gyro rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Gyro.value(roationUnits::deg));\n\n    // display the gyro percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Gyro.value(percentUnits::pct));\n    \n    // display the gyro analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Gyro.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"light::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the light sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Light.value(percentUnits::pct));\n    \n    // display the light sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Light.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"light::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the light sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Light.value(percentUnits::pct));\n    \n    // display the light sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Light.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"limit::pressing()":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display if the limit switch is pressed or not\n    if (Limit.pressing()) {\n        Brain.Screen.printAt(1, 20, \"limit switch pressed\");\n    } else {\n        Brain.Screen.printAt(1, 20, \"limit switch released\");\n    }\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(100);\n}\n"},"line::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the line sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Line.value(percentUnits::pct));\n    \n    // display the line sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Line.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"line::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the line sensor percent value on the screen\n    Brain.Screen.printAt(1, 20, \"percent: %f %%\", Line.value(percentUnits::pct));\n    \n    // display the line sensor analog value on the screen\n    Brain.Screen.printAt(1, 40, \"analog: %f mV\", Line.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"motor::setVelocity(double velocity, velocityUnits units)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::spin(directionType dir)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::rotateFor(double rotation, rotationUnits units, bool waitForCompletion=true)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Rotate the Left and Right Motor for degreesToRotate.\nLeftMotor.rotateFor(degreesToRotate, rotationUnits::deg, false); //This command must be non blocking.\nRightMotor.rotateFor(degreesToRotate, rotationUnits::deg); //This command is blocking so the program will wait here until the right motor is done.\n//The motors will brake once they reach their destination.\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::stop(void)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::stop(brakeType mode)":{"code":"int torque = 10;\nint velocity = 50;\n\nwhile (true) {\n  if (Controller1.ButtonR1.pressing()) {\n    LeftMotor.spin(directionType::fwd);\n  } else {\n    LeftMotor.stop(brakeType::hold);\n  }\n  if (Controller1.ButtonUp.pressing()) {\n    while (Controller1.ButtonUp.pressing()) { } // wait for button release\n    LeftMotor.setMaxTorque(torque++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonDown.pressing()) {\n    while (Controller1.ButtonDown.pressing()) { }\n    LeftMotor.setMaxTorque(torque--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonLeft.pressing()) {\n    while (Controller1.ButtonLeft.pressing()) { }\n    LeftMotor.setVelocity(velocity--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonRight.pressing()) {\n    while (Controller1.ButtonRight.pressing()) { }\n    LeftMotor.setVelocity(velocity++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"motor::setMaxTorque(double value, percentUnits units)":{"code":"int torque = 10;\nint velocity = 50;\n\nwhile (true) {\n  if (Controller1.ButtonR1.pressing()) {\n    LeftMotor.spin(directionType::fwd);\n  } else {\n    LeftMotor.stop(brakeType::hold);\n  }\n  if (Controller1.ButtonUp.pressing()) {\n    while (Controller1.ButtonUp.pressing()) { } // wait for button release\n    LeftMotor.setMaxTorque(torque++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonDown.pressing()) {\n    while (Controller1.ButtonDown.pressing()) { }\n    LeftMotor.setMaxTorque(torque--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonLeft.pressing()) {\n    while (Controller1.ButtonLeft.pressing()) { }\n    LeftMotor.setVelocity(velocity--, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n  if (Controller1.ButtonRight.pressing()) {\n    while (Controller1.ButtonRight.pressing()) { }\n    LeftMotor.setVelocity(velocity++, percentUnits::pct);\n    Brain.Screen.printAt(1, 20, \"Velocity: %d%%, max torque: %d%% \", velocity, torque);\n  }\n}\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"},"pot::value(percentUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the potentiometer rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Pot.value(roationUnits::deg));\n\n    // display the potentiometer percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Pot.value(percentUnits::pct));\n    \n    // display the potentiometer analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Pot.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"pot::value(rotationUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the potentiometer rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Pot.value(roationUnits::deg));\n\n    // display the potentiometer percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Pot.value(percentUnits::pct));\n    \n    // display the potentiometer analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Pot.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"pot::value(analogUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the potentiometer rotation value on the screen\n    Brain.Screen.printAt(1, 20, \"rotation: %f degrees\", Pot.value(roationUnits::deg));\n\n    // display the potentiometer percent value on the screen\n    Brain.Screen.printAt(1, 40, \"percent: %f %%\", Pot.value(percentUnits::pct));\n    \n    // display the potentiometer analog value on the screen\n    Brain.Screen.printAt(1, 60, \"analog: %f mV\", Pot.value(analogUnits::mV));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"pwm_out::state(int32_t value, percentUnits units)":{"code":"// create a variable to store the output value to make it possible to increment the value\n//   on each iteration of the loop.\nint value = 0;\n\n// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // increment output value\n    value++;\n\n    // if value more than 100 set value back to 0\n    if (value > 100) {\n      value = 0;\n    }\n\n    // set pwm output to the changing value \n    PwmOut.state(value, percentUnits::pct);\n\n    // display the output value on the screen\n    Brain.Screen.printAt(1, 20, \"outout: %f %%\", value);\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(1000);\n}\n"},"sonar::distance(distanceUnits units)":{"code":"// loop forever to always update the information displayed on the screen\nwhile(1) {\n    Brain.Screen.clearScreen();\n\n    // display the sonar distance in mm on the screen\n    Brain.Screen.printAt(1, 20, \"distance: %f mm\", Sonar.distance(distanceUnits::mm));\n    \n    // display the sonar distance in mm on the screen\n    Brain.Screen.printAt(1, 40, \"distance: %f in\", Sonar.distance(distanceUnits::in));\n    \n    // display the sonar distance in mm on the screen\n    Brain.Screen.printAt(1, 60, \"distance: %f cm\", Sonar.distance(distanceUnits::cm));\n    \n    //Sleep the task for a short amount of time to prevent wasted resources.\n    task::sleep(500);\n}\n"},"task::sleep(uint32_t time)":{"code":"//Set the velocity of the left and right motor to 50% power. This command will not make the motor spin.\nLeftMotor.setVelocity(50, velocityUnits::pct);\nRightMotor.setVelocity(50, velocityUnits::pct);\n\n//Spin the right and left motor in the forward direction. The motors will spin at 50% power because of the previous commands.\nLeftMotor.spin(directionType::fwd);\nRightMotor.spin(directionType::fwd);\n\n//Wait 3 second or 3000 milliseconds.\ntask::sleep(3000);\n\n//Stop both motors.\nLeftMotor.stop();\nRightMotor.stop();\n","config":"<a href=\"https://v5beta.vex.com/xyleme_content/v5-with-clawbot/web/index.html#Item1-10\">V5 Clawbot</a>"}}}