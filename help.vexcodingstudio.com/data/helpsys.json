{"Namespaces":{"vex":{"name":"vex","members":{"percentUnits":{"name":"percentUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"pct","desc":"A percentage unit that represents a value from 0% to 100%."}],"desc":"The measurement units for percentage values."},"timeUnits":{"name":"timeUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"sec","desc":"A time unit that is measured in seconds."},{"name":"msec","desc":"A time unit that is measured in milliseconds."}],"desc":"The measurement units for time values."},"currentUnits":{"name":"currentUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"amp","desc":"A current unit that is measured in amps."}],"desc":"The measurement units for current values."},"voltageUnits":{"name":"voltageUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"volt","desc":"A voltage unit that is measured in volts."},{"name":"mV","desc":"The measurement units for power values millivolts."}],"desc":"The measurement units for voltage values."},"powerUnits":{"name":"powerUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"watt","desc":"A power unit that is measured in watts."}],"desc":"The measurement units for power values."},"torqueUnits":{"name":"torqueUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"Nm","desc":"A torque unit that is measured in Newton Meters."},{"name":"InLb","desc":"A torque unit that is measured in Inch Pounds."}],"desc":"The measurement units for torque values."},"rotationUnits":{"name":"rotationUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"deg","desc":"A rotation unit that is measured in degrees."},{"name":"rev","desc":"A rotation unit that is measured in revolutions."},{"name":"raw","desc":"A rotation unit that is measured in raw data form."}],"desc":"The measurement units for rotation values."},"velocityUnits":{"name":"velocityUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"pct","desc":"A velocity unit that is measured in percentage."},{"name":"rpm","desc":"A velocity unit that is measured in rotations per minute."},{"name":"dps","desc":"A velocity unit that is measured in degrees per second."}],"desc":"The measurement units for velocity values."},"distanceUnits":{"name":"distanceUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"mm","desc":"A distance unit that is measured in millimeters."},{"name":"in","desc":"A distance unit that is measured in inches."},{"name":"cm","desc":"A distance unit that is measured in centimeters."}],"desc":"The measurement units for distance values."},"analogUnits":{"name":"analogUnits","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"pct","desc":"An analog unit that is measured in percentage."},{"name":"range8bit","desc":"An analog unit that is measured in an 8-bit analog value (a value with 256 possible states)."},{"name":"range10bit","desc":"An analog unit that is measured in a 10-bit analog value (a value with 1024 possible states)."},{"name":"range12bit","desc":"An analog unit that is measured in a 12-bit analog value (a value with 4096 possible states)."},{"name":"mV","desc":"An analog unit that is measured in millivolts."}],"desc":"The measurement units for analog values."},"directionType":{"name":"directionType","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"fwd","desc":"A direction unit that is defined as forward."},{"name":"rev","desc":"A direction unit that is defined as backward."}],"desc":"The defined units for direction values."},"brakeType":{"name":"brakeType","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"coast","desc":"A brake unit that is defined as coast."},{"name":"brake","desc":"A brake unit that is defined as brake."},{"name":"hold","desc":"A brake unit that is defined as hold."}],"desc":"The defined units for brake values."},"gearSetting":{"name":"gearSetting","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"ratio36_1","desc":"A gear unit that is defined as the red 36:1 gear cartridge used in V5 Smart Motors."},{"name":"ratio18_1","desc":"A gear unit that is defined as the green 18:1 gear cartridge used in V5 Smart Motors."},{"name":"ratio6_1","desc":"A gear unit that is defined as the blue 6:1 gear cartridge used in V5 Smart Motors."}],"desc":"The defined units for gear values."},"fontType":{"name":"fontType","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"mono20","desc":"A font unit that is defined as mono20."},{"name":"mono30","desc":"A font unit that is defined as mono30."},{"name":"mono40","desc":"A font unit that is defined as mono40."},{"name":"mono60","desc":"A font unit that is defined as mono60."},{"name":"prop20","desc":"A font unit that is defined as prop20."},{"name":"prop30","desc":"A font unit that is defined as prop30."},{"name":"prop40","desc":"A font unit that is defined as prop40."},{"name":"prop60","desc":"A font unit that is defined as prop60."},{"name":"mono15","desc":"A font unit that is defined as mono15."},{"name":"mono12","desc":"A font unit that is defined as mono12."}],"desc":"The defined units for font values."},"triportType":{"name":"triportType","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"analogInput","desc":"A triport unit that is defined as an analog input."},{"name":"analogOutput","desc":"A triport unit that is defined as an analog output."},{"name":"digitalInput","desc":"A triport unit that is defined as a digital input."},{"name":"digitalOutput","desc":"A triport unit that is defined as a digital output."},{"name":"button","desc":"A triport unit that is defined as a button."},{"name":"potentiometer","desc":"A triport unit that is defined as a potentiometer."},{"name":"lineSensor","desc":"A triport unit that is defined as a line sensor."},{"name":"lightSensor","desc":"A triport unit that is defined as a light sensor."},{"name":"gyro","desc":"A triport unit that is defined as a gyro."},{"name":"accelerometer","desc":"A triport unit that is defined as an accelerometer."},{"name":"motor","desc":"A triport unit that is defined as a motor."},{"name":"servo","desc":"A triport unit that is defined as a servo."},{"name":"quadEncoder","desc":"A triport unit that is defined as a quadrature encoder."},{"name":"sonar","desc":"A triport unit that is defined as a sonar."},{"name":"motorS","desc":"A triport unit that is defined as a motor with slew rate control."}],"desc":"The defined units for triport devices."},"controllerType":{"name":"controllerType","kind":"enum","type":[""],"def":"","apilevel":[],"drawercat":"","static":false,"enumvalue":[{"name":"primary","desc":"A controller unit defined as a primary controller."},{"name":"partner","desc":"A controller unit defined as a partner controller."}],"desc":"The defined units for controller devices."}},"Classes":{"vex::accelerometer":{"name":"vex::accelerometer","members":{"accelerometer":{"name":"accelerometer","kind":"function","type":[""],"specialkind":"constructor","def":"vex::accelerometer::accelerometer","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new accelerometer object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::accelerometer::value","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(analogUnits units)","desc":"Gets the value of the accelerometer.","params":[{"type":"vex::analogUnits","kind":"enum","declname":"units","desc":"The measurement unit for the accelerometer device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the value of the accelerometer.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the accelerometer device."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::accelerometer::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the accelerometer value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with an accelerometer sensor.","id":"classvex_1_1accelerometer","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::analog_in":{"name":"vex::analog_in","members":{"analog_in":{"name":"analog_in","kind":"function","type":[""],"specialkind":"constructor","def":"vex::analog_in::analog_in","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new analog-in object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::analog_in::value","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(analogUnits units)","desc":"Gets the value of the analog-in device.","params":[{"type":"vex::analogUnits","kind":"enum","declname":"units","desc":"The measurement unit for the analog-in device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the value of the analog-in device.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the analog-in device."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::analog_in::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the analog input value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with an analog-in device.","id":"classvex_1_1analog__in","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::brain":{"name":"vex::brain","members":{"Timer":{"name":"Timer","kind":"variable","type":["vex::timer"],"specialkind":"none","def":"vex::timer vex::brain::Timer","static":false,"desc":"Use the Timer class to obtain the system time.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"Screen":{"name":"Screen","kind":"variable","type":["vex::brain::lcd"],"specialkind":"none","def":"lcd vex::brain::Screen","static":false,"desc":"Use the Screen class to write or draw to the screen.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"Battery":{"name":"Battery","kind":"variable","type":["vex::brain::battery"],"specialkind":"none","def":"battery vex::brain::Battery","static":false,"desc":"This is the Brain's instance of the battery.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"SDcard":{"name":"SDcard","kind":"variable","type":["vex::brain::sdcard"],"specialkind":"none","def":"sdcard vex::brain::SDcard","static":false,"desc":"This is the instance of the SD card class.","apilevel":["pro"],"drawercat":"instance"},"brain":{"name":"brain","kind":"function","type":[""],"specialkind":"constructor","def":"vex::brain::brain","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"()","desc":"Creates a new brain object.","params":[],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"timer":{"name":"timer","kind":"function","type":["double"],"specialkind":"none","def":"double vex::brain::timer","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(timeUnits units)","desc":"Gets the value of the timer in the units specified.","params":[{"type":"vex::timeUnits","kind":"enum","declname":"units","desc":"The unit of time that will be returned."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"resetTimer":{"name":"resetTimer","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::resetTimer","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"()","desc":"Resets the timer to zero.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setTimer":{"name":"setTimer","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::setTimer","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(double value, timeUnits units)","desc":"Sets the timer to a value and time unit.","params":[{"type":"double","kind":"","declname":"value","desc":"The value that the timer is set to."},{"type":"vex::timeUnits","kind":"enum","declname":"units","desc":"The unit of time that will be returned."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"}},"desc":"Use the brain class to see battery information, SD card information, or write to the Screen.","id":"classvex_1_1brain","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::brain::battery":{"name":"vex::brain::battery","members":{"capacity":{"name":"capacity","kind":"function","type":["uint32_t"],"specialkind":"none","def":"uint32_t vex::brain::battery::capacity","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units=percentUnits::pct)","desc":"Gets the battery capacity.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"(Optional) The type of unit that will be returned."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"temperature":{"name":"temperature","kind":"function","type":["double"],"specialkind":"none","def":"double vex::brain::battery::temperature","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units=percentUnits::pct)","desc":"Gets the battery temperature.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"(Optional) The type of unit that will be returned."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"}},"desc":"Use the battery class to see information about the battery.","id":"classvex_1_1brain_1_1battery","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::brain::lcd":{"name":"vex::brain::lcd","members":{"setCursor":{"name":"setCursor","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::setCursor","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(int32_t row, int32_t col)","desc":"Sets the cursor to the row and column number set in the parameters.","params":[{"type":"int32_t","kind":"","declname":"row","desc":"Sets the row number for where the cursor is placed."},{"type":"int32_t","kind":"","declname":"col","desc":"Sets the column number for where the cursor is placed."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setFont":{"name":"setFont","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::setFont","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(fontType font)","desc":"Sets the font type to be displayed on the Screen that is determined by the parameter.","params":[{"type":"vex::fontType","kind":"enum","declname":"font","desc":"The type of font that is displayed."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setPenWidth":{"name":"setPenWidth","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::setPenWidth","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(uint32_t width)","desc":"Sets the pen's width.","params":[{"type":"uint32_t","kind":"","declname":"width","desc":"This represents the width of the pen when drawing. A larger width equals a wider pen stroke."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setOrigin":{"name":"setOrigin","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::setOrigin","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(int32_t x, int32_t y)","desc":"Sets the origin of the screen to the parameters defined in the function.","params":[{"type":"int32_t","kind":"","declname":"x","desc":"The x location of the origin."},{"type":"int32_t","kind":"","declname":"y","desc":"The y location of the origin."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"column":{"name":"column","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::brain::lcd::column","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"An integer that tracks the current cursor position's column, starting at 1.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"row":{"name":"row","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::brain::lcd::row","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"An integer that tracks the current cursor position's row, starting at 1.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"setPenColor":{"name":"setPenColor","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::setPenColor","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(const color &color)","desc":"Sets the color of the pen to a specified color.","params":[{"type":"","kind":"","operator":"const \n &","declname":"color","desc":"A color unit where colors can be defined as names."}],"static":false},{"apilevel":["pro"],"drawercat":"setting","argsstring":"(const char *color)","desc":"Sets the color of the pen to a specified color using a hex value.","params":[{"type":"const char *","kind":"","declname":"color","desc":"A hexadecimal value that represents color."}],"static":false},{"apilevel":["pro"],"drawercat":"setting","argsstring":"(int hue)","desc":"Sets the color of the pen to a specified color.","params":[{"type":"int","kind":"","declname":"hue","desc":"The integer represents the hue of the color."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setFillColor":{"name":"setFillColor","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::setFillColor","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(const color &color)","desc":"Sets the background fill color of the screen to the specified color.","params":[{"type":"","kind":"","operator":"const \n &","declname":"color","desc":"In a color unit, colors can be defined as names."}],"static":false},{"apilevel":["pro"],"drawercat":"setting","argsstring":"(const char *color)","desc":"Sets the background fill color of the screen to the specified color.","params":[{"type":"const char *","kind":"","declname":"color","desc":"A hexadecimal value that represents color."}],"static":false},{"apilevel":["pro"],"drawercat":"setting","argsstring":"(int hue)","desc":"Sets the background fill color of the screen to the specified color.","params":[{"type":"int","kind":"","declname":"hue","desc":"The integer represents the hue of the color."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"print":{"name":"print","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::print","static":false,"overloads":[{"apilevel":["block"],"drawercat":"action","argsstring":"(T value)","desc":"Prints a number, string, or Boolean.","params":[{"type":"T","kind":"","declname":"value","desc":"Information to display on the screen."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(const char *format,...)","desc":"Prints a number, string, or Boolean.","params":[{"type":"const char *","kind":"","declname":"format","desc":"This is a reference to a char format that prints the value of variables."},{"type":"...","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"printAt":{"name":"printAt","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::printAt","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(int32_t x, int32_t y, const char *format,...)","desc":"Prints a number, string, or Boolean at an x, y pixel location.","params":[{"type":"int32_t","kind":"","declname":"x","desc":"The x-coordinate at which to print a message on the screen."},{"type":"int32_t","kind":"","declname":"y","desc":"The y-coordinate at which to print a message on the screen."},{"type":"const char *","kind":"","declname":"format","desc":"A reference to a char format to print the value of variables."},{"type":"...","kind":"","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int32_t x, int32_t y, bool bOpaque, const char *format,...)","desc":"Prints a number, string, or Boolean at an x, y pixel location with the ability to be transparent.","params":[{"type":"int32_t","kind":"","declname":"x","desc":"The x pixel location where the print should start"},{"type":"int32_t","kind":"","declname":"y","desc":"The y pixel location where the print should start"},{"type":"bool","kind":"","declname":"bOpaque","desc":"If set to false, the print will be transparent."},{"type":"const char *","kind":"","declname":"format","desc":"A reference to a char format to print the value of variables."},{"type":"...","kind":"","desc":""}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"action"},"clearScreen":{"name":"clearScreen","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::clearScreen","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Clears the whole Screen to a default color or otherwise specified color.","params":[{"type":"void","kind":"","desc":""}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(const color &color)","desc":"Clears the whole Screen to a default color or otherwise specified color.","params":[{"type":"","kind":"","operator":"const \n &","declname":"color","desc":"In a color unit, colors can be defined as names."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(const char *color)","desc":"Clears the whole Screen to a default color or otherwise specified color.","params":[{"type":"const char *","kind":"","declname":"color","desc":"A hexadecimal value that represents color."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int hue)","desc":"Clears the whole Screen to a default color or otherwise specified color.","params":[{"type":"int","kind":"","declname":"hue","desc":"The integer represents the hue of the color."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"clearLine":{"name":"clearLine","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::clearLine","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(int number, const color &color)","desc":"Clears the specified line and sets it to a specified color.","params":[{"type":"int","kind":"","declname":"number","desc":"The integer sets the line that is to be cleared."},{"type":"","kind":"","operator":"const \n &","declname":"color","desc":"A color unit where colors can be defined as names."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int number, const char *color)","desc":"Clears the specified line and sets it to a specified color.","params":[{"type":"int","kind":"","declname":"number","desc":"The integer sets the line that is to be cleared."},{"type":"const char *","kind":"","declname":"color","desc":"A hexadecimal value that represents color."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int number, int hue)","desc":"Clears the specified line and sets it to a specified color.","params":[{"type":"int","kind":"","declname":"number","desc":"The integer sets the line that is to be cleared."},{"type":"int","kind":"","declname":"hue","desc":"An integer that represents the hue of the color."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Clears the rest of the line from where the cursor is located.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"action"},"newLine":{"name":"newLine","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::newLine","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Clears the rest of the line from where the cursor is located and then moves the cursor to the beginning of the next line.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"drawPixel":{"name":"drawPixel","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::drawPixel","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(int x, int y)","desc":"Draws a single pixel to the screen in the specified x and y location.","params":[{"type":"int","kind":"","declname":"x","desc":"The x location of where to draw the pixel."},{"type":"int","kind":"","declname":"y","desc":"The y location of where to draw the pixel."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"drawLine":{"name":"drawLine","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::drawLine","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(int x1, int y1, int x2, int y2)","desc":"Draws a line connecting the two specified points in the parameters.","params":[{"type":"int","kind":"","declname":"x1","desc":"The x location of the first point."},{"type":"int","kind":"","declname":"y1","desc":"The y location of the first point."},{"type":"int","kind":"","declname":"x2","desc":"The x location of the second point."},{"type":"int","kind":"","declname":"y2","desc":"The y location of the second point."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"drawRectangle":{"name":"drawRectangle","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::drawRectangle","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(int x, int y, int width, int height)","desc":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the current pen and fill color.","params":[{"type":"int","kind":"","declname":"x","desc":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"y","desc":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"width","desc":"The width of the rectangle."},{"type":"int","kind":"","declname":"height","desc":"The height of the rectangle."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(int x, int y, int width, int height, const color &color)","desc":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.","params":[{"type":"int","kind":"","declname":"x","desc":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"y","desc":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"width","desc":"The width of the rectangle."},{"type":"int","kind":"","declname":"height","desc":"The height of the rectangle."},{"type":"","kind":"","operator":"const \n &","declname":"color","desc":"A color unit where colors can be defined as names."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int x, int y, int width, int height, const char *color)","desc":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.","params":[{"type":"int","kind":"","declname":"x","desc":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"y","desc":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"width","desc":"The width of the rectangle."},{"type":"int","kind":"","declname":"height","desc":"The height of the rectangle."},{"type":"const char *","kind":"","declname":"color","desc":"A hexadecimal value that represents color."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int x, int y, int width, int height, int hue)","desc":"Draws a rectangle using the specified points and attributes set in the parameters. Fills the rectangle with the color specified.","params":[{"type":"int","kind":"","declname":"x","desc":"The x-coordinate at which the left edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"y","desc":"The y-coordinate at which the top edge of the rectangle will be drawn on the screen."},{"type":"int","kind":"","declname":"width","desc":"The width of the rectangle."},{"type":"int","kind":"","declname":"height","desc":"The height of the rectangle."},{"type":"int","kind":"","declname":"hue","desc":"The color of the rectangle."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"drawCircle":{"name":"drawCircle","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::drawCircle","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(int x, int y, int radius)","desc":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the current pen and fill color.","params":[{"type":"int","kind":"","declname":"x","desc":"The central x location of the circle."},{"type":"int","kind":"","declname":"y","desc":"The central y location of the circle."},{"type":"int","kind":"","declname":"radius","desc":"Sets the radius of the circle to be drawn on the Screen."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(int x, int y, int radius, const color &color)","desc":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.","params":[{"type":"int","kind":"","declname":"x","desc":"The central x location of the circle."},{"type":"int","kind":"","declname":"y","desc":"The central y location of the circle."},{"type":"int","kind":"","declname":"radius","desc":"Sets the radius of the circle to be drawn on the Screen."},{"type":"","kind":"","operator":"const \n &","declname":"color","desc":"A color unit where colors can be defined as names."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int x, int y, int radius, const char *color)","desc":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.","params":[{"type":"int","kind":"","declname":"x","desc":"The central x location of the circle."},{"type":"int","kind":"","declname":"y","desc":"The central y location of the circle."},{"type":"int","kind":"","declname":"radius","desc":"Sets the radius of the circle to be drawn on the Screen."},{"type":"const char *","kind":"","declname":"color","desc":"A hexadecimal value that represents color."}],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(int x, int y, int radius, int hue)","desc":"Draws a circle using the specified points and attributes set in the parameters. Fills the circle with the color specified.","params":[{"type":"int","kind":"","declname":"x","desc":"The central x location of the circle."},{"type":"int","kind":"","declname":"y","desc":"The central y location of the circle."},{"type":"int","kind":"","declname":"radius","desc":"Sets the radius of the circle to be drawn on the Screen."},{"type":"int","kind":"","declname":"hue","desc":"An integer that represents the hue of the color."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"pressed":{"name":"pressed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::pressed","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void(*callback)(void))","desc":"Sets the function to be called when the Screen is pressed.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"released":{"name":"released","kind":"function","type":["void"],"specialkind":"none","def":"void vex::brain::lcd::released","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void(*callback)(void))","desc":"Sets the function to be called when the screen is released after being pressed.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"xPosition":{"name":"xPosition","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::brain::lcd::xPosition","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the last x location pressed on the screen.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"yPosition":{"name":"yPosition","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::brain::lcd::yPosition","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the last y location pressed on the screen.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"pressing":{"name":"pressing","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::brain::lcd::pressing","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the pressed status of the Screen.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"render":{"name":"render","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::brain::lcd::render","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"action","argsstring":"()","desc":"Switches to double buffering or renders back buffer to screen.","params":[],"static":false},{"apilevel":["pro"],"drawercat":"action","argsstring":"(bool bVsyncWait, bool bRunScheduler=true)","desc":"Switches to double buffering or renders back buffer to screen.","params":[{"type":"bool","kind":"","declname":"bVsyncWait","desc":""},{"type":"bool","kind":"","declname":"bRunScheduler","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":"action"}},"desc":"Use this class to write or draw to the brain's LCD screen.","id":"classvex_1_1brain_1_1lcd","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::brain::sdcard":{"name":"vex::brain::sdcard","members":{"isInserted":{"name":"isInserted","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::brain::sdcard::isInserted","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the state of the SD card.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"sensing"},"loadfile":{"name":"loadfile","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::brain::sdcard::loadfile","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"action","argsstring":"(const char *name, uint8_t *buffer, int32_t len)","desc":"Loads a file from the SD card.","params":[{"type":"const char *","kind":"","declname":"name","desc":"The name of the file."},{"type":"uint8_t *","kind":"","declname":"buffer","desc":"Pointer to a buffer for file data."},{"type":"int32_t","kind":"","declname":"len","desc":"The length of the buffer in bytes. Usually set to the max length of the buffer."}],"static":false}],"apilevel":["pro"],"drawercat":"action"},"savefile":{"name":"savefile","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::brain::sdcard::savefile","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"action","argsstring":"(const char *name, uint8_t *buffer, int32_t len)","desc":"Saves a file to the SD card.","params":[{"type":"const char *","kind":"","declname":"name","desc":"The name of the file."},{"type":"uint8_t *","kind":"","declname":"buffer","desc":"Pointer to a buffer with file data."},{"type":"int32_t","kind":"","declname":"len","desc":"The length of the buffer in bytes. Usually set to the max length of the buffer."}],"static":false}],"apilevel":["pro"],"drawercat":"action"},"appendfile":{"name":"appendfile","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::brain::sdcard::appendfile","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"action","argsstring":"(const char *name, uint8_t *buffer, int32_t len)","desc":"Appends data to an existing file.","params":[{"type":"const char *","kind":"","declname":"name","desc":"The name of the file."},{"type":"uint8_t *","kind":"","declname":"buffer","desc":"Pointer to a buffer with file data."},{"type":"int32_t","kind":"","declname":"len","desc":"The length of the buffer in bytes. Usually set to the max length of the buffer."}],"static":false}],"apilevel":["pro"],"drawercat":"action"}},"desc":"Use the SD Card class to load or save files on your SD card.","id":"classvex_1_1brain_1_1sdcard","kind":"class","apilevel":["pro"],"drawercat":""},"vex::bumper":{"name":"vex::bumper","members":{"bumper":{"name":"bumper","kind":"function","type":[""],"specialkind":"constructor","def":"vex::bumper::bumper","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new bumper object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"pressing":{"name":"pressing","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::bumper::pressing","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Get the pressed status of the bumper device.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"pressed":{"name":"pressed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::bumper::pressed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the bumper switch is pressed.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"},"released":{"name":"released","kind":"function","type":["void"],"specialkind":"none","def":"void vex::bumper::released","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the bumper switch is released.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with the bumper device.","id":"classvex_1_1bumper","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::color":{"name":"vex::color","members":{"black":{"name":"black","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::black","static":true,"desc":"Represents the color black.","apilevel":["cpp","pro"],"drawercat":""},"white":{"name":"white","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::white","static":true,"desc":"Represents the color white.","apilevel":["cpp","pro"],"drawercat":""},"red":{"name":"red","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::red","static":true,"desc":"Represents the color red.","apilevel":["cpp","pro"],"drawercat":""},"green":{"name":"green","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::green","static":true,"desc":"Represents the color green.","apilevel":["cpp","pro"],"drawercat":""},"blue":{"name":"blue","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::blue","static":true,"desc":"Represents the color blue.","apilevel":["cpp","pro"],"drawercat":""},"yellow":{"name":"yellow","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::yellow","static":true,"desc":"Represents the color yellow.","apilevel":["cpp","pro"],"drawercat":""},"orange":{"name":"orange","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::orange","static":true,"desc":"Represents the color orange.","apilevel":["cpp","pro"],"drawercat":""},"purple":{"name":"purple","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::purple","static":true,"desc":"Represents the color purple.","apilevel":["cpp","pro"],"drawercat":""},"cyan":{"name":"cyan","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::cyan","static":true,"desc":"Represents the color cyan.","apilevel":["cpp","pro"],"drawercat":""},"transparent":{"name":"transparent","kind":"variable","type":[""],"specialkind":"none","def":"const color vex::color::transparent","static":true,"desc":"Represents the color transparent.","apilevel":["cpp","pro"],"drawercat":""},"color":{"name":"color","kind":"function","type":[""],"specialkind":"constructor","def":"vex::color::color","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"null","argsstring":"(int value)","desc":"Creates a color.","params":[{"type":"int","kind":"","declname":"value","desc":"The value of the color."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"null","argsstring":"(uint8_t r, uint8_t g, uint8_t b)","desc":"Creates a color using red, green, and blue values.","params":[{"type":"uint8_t","kind":"","declname":"r","desc":"the color of red on a scale of 0 to 255."},{"type":"uint8_t","kind":"","declname":"g","desc":"the color of green on a scale of 0 to 255."},{"type":"uint8_t","kind":"","declname":"b","desc":"the color of blue on a scale of 0 to 255."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"null"},"isTransparent":{"name":"isTransparent","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::color::isTransparent","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"null","argsstring":"() const","desc":"Gets the state of the color's transparency.","params":[],"static":false}],"apilevel":["cpp","pro"],"drawercat":"null"},"hsv":{"name":"hsv","kind":"function","type":[""],"specialkind":"none","def":"color& vex::color::hsv","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(uint32_t hue, double sat, double value)","desc":"Creates a color using hue, saturation, and brightness values.","params":[{"type":"uint32_t","kind":"","declname":"hue","desc":"An integer from 0 to 360 that represents the hue of the color."},{"type":"double","kind":"","declname":"sat","desc":"A double from 0.0 to 1.0 that represents the saturation of the color."},{"type":"double","kind":"","declname":"value","desc":"A double from 0.0 to 1.0 that represents the brightness of the color."}],"static":false}],"apilevel":["pro"],"drawercat":"null"},"web":{"name":"web","kind":"function","type":[""],"specialkind":"none","def":"color& vex::color::web","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(const char *color)","desc":"Creates a color using a hexadecimal value.","params":[{"type":"const char *","kind":"","declname":"color","desc":"A hexadecimal or web color value that defines a specific color."}],"static":false}],"apilevel":["pro"],"drawercat":"null"}},"desc":"Use the color class to create Color objects.","id":"classvex_1_1color","kind":"class","apilevel":["cpp","pro"],"drawercat":""},"vex::competition":{"name":"vex::competition","members":{"bStopTasksBetweenModes":{"name":"bStopTasksBetweenModes","kind":"variable","type":["bool"],"specialkind":"none","def":"bool vex::competition::bStopTasksBetweenModes","static":true,"desc":"Sets whether or not your program will stop tasks between modes.","apilevel":["block","cpp","pro"],"drawercat":"null"},"competition":{"name":"competition","kind":"function","type":[""],"specialkind":"constructor","def":"vex::competition::competition","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"constructor","argsstring":"()","desc":"Creates a competition object that has access to competition methods.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"constructor"},"autonomous":{"name":"autonomous","kind":"function","type":["void"],"specialkind":"none","def":"void vex::competition::autonomous","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void(*callback)(void))","desc":"Calls back a function when the autonomous period starts.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"drivercontrol":{"name":"drivercontrol","kind":"function","type":["void"],"specialkind":"none","def":"void vex::competition::drivercontrol","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void(*callback)(void))","desc":"Calls back a function when the driver control period starts.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"isEnabled":{"name":"isEnabled","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::competition::isEnabled","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the status of your robot when under competition control.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"isDriverControl":{"name":"isDriverControl","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::competition::isDriverControl","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the status of the Driver Control period.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"isAutonomous":{"name":"isAutonomous","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::competition::isAutonomous","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the status of the Autonomous period.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"isCompetitionSwitch":{"name":"isCompetitionSwitch","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::competition::isCompetitionSwitch","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the status of the Competition Control Switch being plugged into the robot.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"isFieldControl":{"name":"isFieldControl","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::competition::isFieldControl","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the status of the Field Control System being plugged into the robot.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"}},"desc":"Use this class to set up your program for competitions.","id":"classvex_1_1competition","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::controller":{"name":"vex::controller","members":{"ButtonL1":{"name":"ButtonL1","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonL1","static":false,"desc":"A button that represents the L1 button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonL2":{"name":"ButtonL2","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonL2","static":false,"desc":"A button that represents the L2 button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonR1":{"name":"ButtonR1","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonR1","static":false,"desc":"A button that represents the R1 button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonR2":{"name":"ButtonR2","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonR2","static":false,"desc":"A button that represents the R2 button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonUp":{"name":"ButtonUp","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonUp","static":false,"desc":"A button that represents the up button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonDown":{"name":"ButtonDown","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonDown","static":false,"desc":"A button that represents the down button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonLeft":{"name":"ButtonLeft","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonLeft","static":false,"desc":"A button that represents the left button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonRight":{"name":"ButtonRight","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonRight","static":false,"desc":"A button that represents the right button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonX":{"name":"ButtonX","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonX","static":false,"desc":"A button that represents the x button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonB":{"name":"ButtonB","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonB","static":false,"desc":"A button that represents the B button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonY":{"name":"ButtonY","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonY","static":false,"desc":"A button that represents the Y button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"ButtonA":{"name":"ButtonA","kind":"variable","type":["vex::controller::button"],"specialkind":"none","def":"button& vex::controller::ButtonA","static":false,"desc":"A button that represents the A button on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"Axis1":{"name":"Axis1","kind":"variable","type":["vex::controller::axis"],"specialkind":"none","def":"axis& vex::controller::Axis1","static":false,"desc":"An axis of a joystick that represents axis 1 on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"Axis2":{"name":"Axis2","kind":"variable","type":["vex::controller::axis"],"specialkind":"none","def":"axis& vex::controller::Axis2","static":false,"desc":"An axis of a joystick that represents axis 2 on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"Axis3":{"name":"Axis3","kind":"variable","type":["vex::controller::axis"],"specialkind":"none","def":"axis& vex::controller::Axis3","static":false,"desc":"An axis of a joystick that represents axis 3 on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"Axis4":{"name":"Axis4","kind":"variable","type":["vex::controller::axis"],"specialkind":"none","def":"axis& vex::controller::Axis4","static":false,"desc":"An axis of a joystick that represents axis 4 on the controller.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"Screen":{"name":"Screen","kind":"variable","type":["vex::controller::lcd"],"specialkind":"none","def":"lcd vex::controller::Screen","static":false,"desc":"Controller's instance of LCD.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"controller":{"name":"controller","kind":"function","type":[""],"specialkind":"constructor","def":"vex::controller::controller","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"()","desc":"Creates a new controller object.","params":[],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(controllerType id)","desc":"Creates a new controller object.","params":[{"type":"vex::controllerType","kind":"enum","declname":"id","desc":"The type of controller that is being created. This can be set to primary or partner."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"rumble":{"name":"rumble","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::rumble","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(const char *str)","desc":"Rumbles the controller by a pattern defined by the parameter. Dots equal short, dashes equal long and space equals pause.","params":[{"type":"const char *","kind":"","declname":"str","desc":"A string that consists of dots and dashes that represent the rumble pattern."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"}},"desc":"Use the controller class to get values from the remote controller as well as write to the controller's screen.","id":"classvex_1_1controller","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::controller::axis":{"name":"vex::controller::axis","members":{"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::axis::changed","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void(*callback)(void))","desc":"Sets the function to be called when the joystick axis value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::controller::axis::value","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(void)","desc":"Gets the value of the joystick axis.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"sensing"},"position":{"name":"position","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::controller::axis::position","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the position of the joystick axis.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The type of unit that will be returned."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"}},"desc":"Use the axis class to get values from one of the controller's joysticks.","id":"classvex_1_1controller_1_1axis","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::controller::button":{"name":"vex::controller::button","members":{"pressed":{"name":"pressed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::button::pressed","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void(*callback)(void))","desc":"Sets the function to be called when the button is pressed.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"released":{"name":"released","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::button::released","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void(*callback)(void))","desc":"Sets the function to be called when the button is released.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"pressing":{"name":"pressing","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::controller::button::pressing","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(void)","desc":"Gets the status of a button.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"}},"desc":"Use the button class to get values from the controller's buttons.","id":"classvex_1_1controller_1_1button","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::controller::lcd":{"name":"vex::controller::lcd","members":{"setCursor":{"name":"setCursor","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::lcd::setCursor","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(int32_t row, int32_t col)","desc":"Sets the cursor to the row and column number set in the parameters.","params":[{"type":"int32_t","kind":"","declname":"row","desc":"Sets the row number for where the cursor is placed."},{"type":"int32_t","kind":"","declname":"col","desc":"Sets the column number for where the cursor is placed."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"print":{"name":"print","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::lcd::print","static":false,"overloads":[{"apilevel":["block"],"drawercat":"action","argsstring":"(T value)","desc":"Prints a number, string, or Boolean.","params":[{"type":"T","kind":"","declname":"value","desc":"Information to display on the screen."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(const char *format,...)","desc":"Prints a number, string, or Boolean.","params":[{"type":"const char *","kind":"","declname":"format","desc":"This is a reference to a char format that prints the value of variables."},{"type":"...","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"clearScreen":{"name":"clearScreen","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::lcd::clearScreen","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Clears the controller's LCD screen.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"clearLine":{"name":"clearLine","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::lcd::clearLine","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(int number)","desc":"Clears the line specified by the parameter.","params":[{"type":"int","kind":"","declname":"number","desc":"The line number to be cleared."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Clears the current line.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"action"},"newLine":{"name":"newLine","kind":"function","type":["void"],"specialkind":"none","def":"void vex::controller::lcd::newLine","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Moves the cursor to the next line.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"}},"desc":"Use this class to write to the controller's LCD screen.","id":"classvex_1_1controller_1_1lcd","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::digital_in":{"name":"vex::digital_in","members":{"digital_in":{"name":"digital_in","kind":"function","type":[""],"specialkind":"constructor","def":"vex::digital_in::digital_in","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new digital-in object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::digital_in::value","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the value of the digital-in device.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"high":{"name":"high","kind":"function","type":["void"],"specialkind":"none","def":"void vex::digital_in::high","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the digital input goes high.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"},"low":{"name":"low","kind":"function","type":["void"],"specialkind":"none","def":"void vex::digital_in::low","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the digital input goes low.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with a digital-in device.","id":"classvex_1_1digital__in","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::digital_out":{"name":"vex::digital_out","members":{"digital_out":{"name":"digital_out","kind":"function","type":[""],"specialkind":"constructor","def":"vex::digital_out::digital_out","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new digital-out object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::digital_out::value","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the value of the digital-out device.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"set":{"name":"set","kind":"function","type":["void"],"specialkind":"none","def":"void vex::digital_out::set","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(bool value)","desc":"Sets the digital-out device to a Boolean value.","params":[{"type":"bool","kind":"","declname":"value","desc":"A true or false Boolean value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"}},"desc":"Use this class when programming with a digital-out device.","id":"classvex_1_1digital__out","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::encoder":{"name":"vex::encoder","members":{"encoder":{"name":"encoder","kind":"function","type":[""],"specialkind":"constructor","def":"vex::encoder::encoder","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new encoder object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"resetRotation":{"name":"resetRotation","kind":"function","type":["void"],"specialkind":"none","def":"void vex::encoder::resetRotation","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(void)","desc":"Resets the rotation of the encoder to zero.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setRotation":{"name":"setRotation","kind":"function","type":["void"],"specialkind":"none","def":"void vex::encoder::setRotation","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(double val, rotationUnits units)","desc":"Sets the rotation of the encoder to a specific value.","params":[{"type":"double","kind":"","declname":"val","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"rotation":{"name":"rotation","kind":"function","type":["double"],"specialkind":"none","def":"double vex::encoder::rotation","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(rotationUnits units)","desc":"Gets the rotation value of the encoder.","params":[{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the encoder device."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"velocity":{"name":"velocity","kind":"function","type":["double"],"specialkind":"none","def":"double vex::encoder::velocity","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(velocityUnits units)","desc":"Gets the velocity of the encoder.","params":[{"type":"vex::velocityUnits","kind":"enum","declname":"units","desc":"The measurement unit for the encoder device."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::encoder::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the encoder value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with an encoder.","id":"classvex_1_1encoder","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::gyro":{"name":"vex::gyro","members":{"gyro":{"name":"gyro","kind":"function","type":[""],"specialkind":"constructor","def":"vex::gyro::gyro","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new gyro object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::gyro::value","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(analogUnits units)","desc":"Gets the value of the gyro sensor.","params":[{"type":"vex::analogUnits","kind":"enum","declname":"units","desc":"The measurement unit for the gyro device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(rotationUnits units)","desc":"Gets the value of the gyro sensor.","params":[{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the gyro device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the value of the gyro sensor.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the gyro device."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"sensing"},"startCalibration":{"name":"startCalibration","kind":"function","type":["void"],"specialkind":"none","def":"void vex::gyro::startCalibration","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"action","argsstring":"(int32_t value=0)","desc":"Starts recalibration of the gyro.","params":[{"type":"int32_t","kind":"","declname":"value","desc":"(Optional) Sets the amount of calibration time."}],"static":false}],"apilevel":["pro"],"drawercat":"action"},"isCalibrating":{"name":"isCalibrating","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::gyro::isCalibrating","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"()","desc":"Returns true while the gyro sensor is performing a requested recalibration, changing to false once recalibration has completed.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::gyro::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the gyro sensor value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with a gyro sensor.","id":"classvex_1_1gyro","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::light":{"name":"vex::light","members":{"light":{"name":"light","kind":"function","type":[""],"specialkind":"constructor","def":"vex::light::light","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new light object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::light::value","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(analogUnits units)","desc":"Gets the value of the light sensor.","params":[{"type":"vex::analogUnits","kind":"enum","declname":"units","desc":"The measurement unit for the light device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the value of the light sensor.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the light device."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::light::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the light sensor value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with a light sensor.","id":"classvex_1_1light","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::limit":{"name":"vex::limit","members":{"limit":{"name":"limit","kind":"function","type":[""],"specialkind":"constructor","def":"vex::limit::limit","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new limit object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"pressing":{"name":"pressing","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::limit::pressing","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the state of the limit device.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"pressed":{"name":"pressed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::limit::pressed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the limit switch is pressed.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"},"released":{"name":"released","kind":"function","type":["void"],"specialkind":"none","def":"void vex::limit::released","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the limit switch is released.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with the limit switch.","id":"classvex_1_1limit","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::line":{"name":"vex::line","members":{"line":{"name":"line","kind":"function","type":[""],"specialkind":"constructor","def":"vex::line::line","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new line object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::line::value","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(analogUnits units)","desc":"Gets the value of the line follower.","params":[{"type":"vex::analogUnits","kind":"enum","declname":"units","desc":"The measurement unit for the line device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the value of the line follower.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the line device."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::line::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the line sensor value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with a line follower.","id":"classvex_1_1line","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::motor":{"name":"vex::motor","members":{"motor":{"name":"motor","kind":"function","type":[""],"specialkind":"constructor","def":"vex::motor::motor","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int32_t index)","desc":"Creates a new motor object on the port specified.","params":[{"type":"int32_t","kind":"","declname":"index","desc":"The port index for this motor. The index is zero-based."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int32_t index, bool reverse)","desc":"Creates a new motor object on the port specified and sets the reversed flag.","params":[{"type":"int32_t","kind":"","declname":"index","desc":"The port index for this motor. The index is zero-based."},{"type":"bool","kind":"","declname":"reverse","desc":"Sets the reverse flag for the new motor object."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int32_t index, gearSetting gears)","desc":"Creates a new motor object on the port specified and sets the gear setting.","params":[{"type":"int32_t","kind":"","declname":"index","desc":"The port index for this motor. The index is zero-based."},{"type":"vex::gearSetting","kind":"enum","declname":"gears","desc":"Sets the gear's setting for the new motor object."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int32_t index, gearSetting gears, bool reverse)","desc":"Creates a new motor object on the port specified Sets the reversed flag and the gear setting for the new motor object.","params":[{"type":"int32_t","kind":"","declname":"index","desc":"The port index for this motor. The index is zero-based."},{"type":"vex::gearSetting","kind":"enum","declname":"gears","desc":"Sets the gear's setting for the new motor object."},{"type":"bool","kind":"","declname":"reverse","desc":"Sets the reverse flag for the new motor object."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"setReversed":{"name":"setReversed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::setReversed","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(bool value)","desc":"Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.","params":[{"type":"bool","kind":"","declname":"value","desc":"If set to true, motor commands spin the motor in the opposite direction."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"setVelocity":{"name":"setVelocity","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::setVelocity","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(double velocity, velocityUnits units)","desc":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units","desc":"The measurement unit for the velocity value."}],"static":false},{"apilevel":["block"],"drawercat":"setting","argsstring":"(double velocity, percentUnits units)","desc":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the velocity value."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"setting"},"setStopping":{"name":"setStopping","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::setStopping","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(brakeType mode)","desc":"Sets the stopping mode of the motor by passing a brake mode as a parameter.","params":[{"type":"vex::brakeType","kind":"enum","declname":"mode","desc":"The stopping mode can be set to coast, brake, or hold."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"resetRotation":{"name":"resetRotation","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::resetRotation","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(void)","desc":"Resets the motor's encoder to the value of zero.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"setRotation":{"name":"setRotation","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::setRotation","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(double value, rotationUnits units)","desc":"Sets the value of the 1's encoder to the value specified in the parameter.","params":[{"type":"double","kind":"","declname":"value","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setTimeout":{"name":"setTimeout","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::setTimeout","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(int32_t time, timeUnits units)","desc":"Sets the timeout for the motor. If the motor does not reach its' commanded position prior to the completion of the timeout, the motor will stop.","params":[{"type":"int32_t","kind":"","declname":"time","desc":"Sets the amount of time."},{"type":"vex::timeUnits","kind":"enum","declname":"units","desc":"The measurement unit for the time value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"spin":{"name":"spin","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::spin","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(directionType dir)","desc":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"vex::directionType","kind":"enum","declname":"dir","desc":"The direction to spin the motor."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(directionType dir, double velocity, velocityUnits units)","desc":"Turns on the motor and spins it in a specified direction and a specified velocity.","params":[{"type":"vex::directionType","kind":"enum","declname":"dir","desc":"The direction to spin the motor."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units","desc":"The measurement unit for the velocity value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"rotateTo":{"name":"rotateTo","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::motor::rotateTo","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","desc":"Turns on the motor and spins it to an absolute target rotation value at a specified velocity.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units_v","desc":"The measurement unit for the velocity value."},{"type":"bool","kind":"","declname":"waitForCompletion","desc":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units, bool waitForCompletion=true)","desc":"Turns on the motor and spins it to an absolute target rotation value.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."},{"type":"bool","kind":"","declname":"waitForCompletion","desc":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"action"},"rotateFor":{"name":"rotateFor","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::motor::rotateFor","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v, bool waitForCompletion=true)","desc":"Turns on the motor and spins it to a relative target rotation value at a specified velocity.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units_v","desc":"The measurement unit for the velocity value."},{"type":"bool","kind":"","declname":"waitForCompletion","desc":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units, bool waitForCompletion=true)","desc":"Turns on the motor and spins it to a relative target rotation value.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."},{"type":"bool","kind":"","declname":"waitForCompletion","desc":"(Optional) If true, your program will wait until the motor reaches the target rotational value. If false, the program will continue after calling this function. By default, this parameter is true."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(double time, timeUnits units, double velocity, velocityUnits units_v)","desc":"Turns on the motor and spins it to a relative target time value at a specified velocity.","params":[{"type":"double","kind":"","declname":"time","desc":"Sets the amount of time."},{"type":"vex::timeUnits","kind":"enum","declname":"units","desc":"The measurement unit for the time value."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units_v","desc":"The measurement unit for the velocity value."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(double time, timeUnits units)","desc":"Turns on the motor and spins it to a relative target time value.","params":[{"type":"double","kind":"","declname":"time","desc":"Sets the amount of time."},{"type":"vex::timeUnits","kind":"enum","declname":"units","desc":"The measurement unit for the time value."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"action"},"startRotateTo":{"name":"startRotateTo","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::startRotateTo","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","desc":"Starts spinning a motor to an absolute target rotation but does not wait for the motor to reach that target.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units_v","desc":"The measurement unit for the velocity value."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units)","desc":"Starts spinning a motor to an absolute target rotation but does not wait for the motor to reach that target.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"action"},"startRotateFor":{"name":"startRotateFor","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::startRotateFor","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units, double velocity, velocityUnits units_v)","desc":"Starts spinning a motor to a relative target rotation but does not wait for the motor to reach that target.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units_v","desc":"The measurement unit for the velocity value."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(double rotation, rotationUnits units)","desc":"Starts spinning a motor to a relative target but does not wait for the motor to reach that target.","params":[{"type":"double","kind":"","declname":"rotation","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"action"},"isSpinning":{"name":"isSpinning","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::motor::isSpinning","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Checks to see if the motor is spinning.","params":[],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"stop":{"name":"stop","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::stop","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Stops the motor using the default brake mode.","params":[{"type":"void","kind":"","desc":""}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(brakeType mode)","desc":"Stops the motor using a specified brake mode.","params":[{"type":"vex::brakeType","kind":"enum","declname":"mode","desc":"The brake mode can be set to coast, brake, or hold."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"setMaxTorque":{"name":"setMaxTorque","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor::setMaxTorque","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(double value, percentUnits units)","desc":"Sets the max torque of the motor.","params":[{"type":"double","kind":"","declname":"value","desc":"Sets the amount of torque."},{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the torque value."}],"static":false},{"apilevel":["pro"],"drawercat":"setting","argsstring":"(double value, torqueUnits units)","desc":"Sets the max torque of the motor.","params":[{"type":"double","kind":"","declname":"value","desc":"Sets the amount of torque."},{"type":"vex::torqueUnits","kind":"enum","declname":"units","desc":"The measurement unit for the torque value."}],"static":false},{"apilevel":["pro"],"drawercat":"setting","argsstring":"(double value, currentUnits units)","desc":"Sets the max torque of the motor.","params":[{"type":"double","kind":"","declname":"value","desc":"Sets the amount of torque."},{"type":"vex::currentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the torque value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"direction":{"name":"direction","kind":"function","type":[{"type":"vex::directionType","kind":"enum"}],"specialkind":"none","def":"directionType vex::motor::direction","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(void)","desc":"Gets which direction the motor is spinning.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"rotation":{"name":"rotation","kind":"function","type":["double"],"specialkind":"none","def":"double vex::motor::rotation","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(rotationUnits units)","desc":"Gets the current rotation of the motor's encoder.","params":[{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"velocity":{"name":"velocity","kind":"function","type":["double"],"specialkind":"none","def":"double vex::motor::velocity","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(velocityUnits units)","desc":"Gets the current velocity of the motor.","params":[{"type":"vex::velocityUnits","kind":"enum","declname":"units","desc":"The measurement unit for the velocity."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"current":{"name":"current","kind":"function","type":["double"],"specialkind":"none","def":"double vex::motor::current","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(currentUnits units)","desc":"Gets the electrical current of the motor.","params":[{"type":"vex::currentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the current."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"power":{"name":"power","kind":"function","type":["double"],"specialkind":"none","def":"double vex::motor::power","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(powerUnits units)","desc":"Gets the power of the motor.","params":[{"type":"vex::powerUnits","kind":"enum","declname":"units","desc":"The measurement unit for the power."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"torque":{"name":"torque","kind":"function","type":["double"],"specialkind":"none","def":"double vex::motor::torque","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(torqueUnits units)","desc":"Gets the torque of the motor.","params":[{"type":"vex::torqueUnits","kind":"enum","declname":"units","desc":"The measurement unit for the torque."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"efficiency":{"name":"efficiency","kind":"function","type":["double"],"specialkind":"none","def":"double vex::motor::efficiency","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the efficiency of the motor.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the efficiency."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"temperature":{"name":"temperature","kind":"function","type":["double"],"specialkind":"none","def":"double vex::motor::temperature","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the temperature of the motor.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the temperature."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"}},"desc":"Use the motor class to control motor devices.","id":"classvex_1_1motor","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::motor29":{"name":"vex::motor29","members":{"motor29":{"name":"motor29","kind":"function","type":[""],"specialkind":"constructor","def":"vex::motor29::motor29","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new \n object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port, bool reverse)","desc":"Creates a new \n object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."},{"type":"bool","kind":"","declname":"reverse","desc":"Sets the reverse flag for the new \n object."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"setVelocity":{"name":"setVelocity","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor29::setVelocity","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(double velocity, percentUnits units)","desc":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit of the velocity value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setReversed":{"name":"setReversed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor29::setReversed","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(bool value)","desc":"Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.","params":[{"type":"bool","kind":"","declname":"value","desc":"If set to true, the motor will spin in the reversed direction."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"spin":{"name":"spin","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor29::spin","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(directionType dir)","desc":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"vex::directionType","kind":"enum","declname":"dir","desc":"The direction to spin the motor."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(directionType dir, double velocity, velocityUnits units)","desc":"Turns on the motor and spins it in a specified direction and a specified velocity.","params":[{"type":"vex::directionType","kind":"enum","declname":"dir","desc":"The direction to spin the motor."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units","desc":"The measurement unit of the velocity value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"stop":{"name":"stop","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor29::stop","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Stops the motor using the default brake mode.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"}},"desc":"Use this class when programming a motor connected to a motor controller 29.","id":"classvex_1_1motor29","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::motor_victor":{"name":"vex::motor_victor","members":{"motor_victor":{"name":"motor_victor","kind":"function","type":[""],"specialkind":"constructor","def":"vex::motor_victor::motor_victor","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new motor victor object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port, bool reverse)","desc":"Creates a new motor victor object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."},{"type":"bool","kind":"","declname":"reverse","desc":"Sets the reverse flag for the new \n object."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"setVelocity":{"name":"setVelocity","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor_victor::setVelocity","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"setting","argsstring":"(double velocity, percentUnits units)","desc":"Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor. Any subsequent call that does not contain a specified motor velocity will use this value.","params":[{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit of the velocity value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"setting"},"setReversed":{"name":"setReversed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor_victor::setReversed","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(bool value)","desc":"Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.","params":[{"type":"bool","kind":"","declname":"value","desc":"If set to true, the motor will spin in the reversed direction."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"spin":{"name":"spin","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor_victor::spin","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(directionType dir)","desc":"Turns the motor on, and spins it in the specified direction.","params":[{"type":"vex::directionType","kind":"enum","declname":"dir","desc":"The direction to spin the motor."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(directionType dir, double velocity, velocityUnits units)","desc":"Turns on the motor and spins it in a specified direction and a specified velocity.","params":[{"type":"vex::directionType","kind":"enum","declname":"dir","desc":"The direction to spin the motor."},{"type":"double","kind":"","declname":"velocity","desc":"Sets the amount of velocity."},{"type":"vex::velocityUnits","kind":"enum","declname":"units","desc":"The measurement unit of the velocity value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"},"stop":{"name":"stop","kind":"function","type":["void"],"specialkind":"none","def":"void vex::motor_victor::stop","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(void)","desc":"Stops the motor using the default brake mode.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"}},"desc":"Use this class when programming with a motor connected to a victor motor controller.","id":"classvex_1_1motor__victor","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::mutex":{"name":"vex::mutex","members":{"lock":{"name":"lock","kind":"function","type":["void"],"specialkind":"none","def":"void vex::mutex::lock","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"","argsstring":"()","desc":"Locks the mutex and blocks if the mutex is not available.","params":[],"static":false}],"apilevel":["pro"],"drawercat":""},"try_lock":{"name":"try_lock","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::mutex::try_lock","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"","argsstring":"()","desc":"Try to lock the mutex and returns if the mutex is not available.","params":[],"static":false}],"apilevel":["pro"],"drawercat":""},"unlock":{"name":"unlock","kind":"function","type":["void"],"specialkind":"none","def":"void vex::mutex::unlock","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"","argsstring":"()","desc":"Unlocks the mutex.","params":[],"static":false}],"apilevel":["pro"],"drawercat":""}},"desc":"Use this class to create and control mutexes.","id":"classvex_1_1mutex","kind":"class","apilevel":["pro"],"drawercat":""},"vex::pot":{"name":"vex::pot","members":{"pot":{"name":"pot","kind":"function","type":[""],"specialkind":"constructor","def":"vex::pot::pot","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new pot object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"value":{"name":"value","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::pot::value","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(analogUnits units)","desc":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"vex::analogUnits","kind":"enum","declname":"units","desc":"The measurement unit for the potentiometer device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(percentUnits units)","desc":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the potentiometer device."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(rotationUnits units)","desc":"Gets the value of the potentiometer in the units defined in the parameter.","params":[{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the potentiometer device."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::pot::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the potentiometer value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with a potentiometer.","id":"classvex_1_1pot","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::pwm_out":{"name":"vex::pwm_out","members":{"pwm_out":{"name":"pwm_out","kind":"function","type":[""],"specialkind":"constructor","def":"vex::pwm_out::pwm_out","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new pwm-out object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"state":{"name":"state","kind":"function","type":["void"],"specialkind":"none","def":"void vex::pwm_out::state","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(int32_t value, percentUnits units)","desc":"Sets the state of the pwm device.","params":[{"type":"int32_t","kind":"","declname":"value","desc":"Sets the length of the pulse width."},{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the state value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"}},"desc":"Use this class when programming with a pwm-out device.","id":"classvex_1_1pwm__out","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::semaphore":{"name":"vex::semaphore","members":{"lock":{"name":"lock","kind":"function","type":["void"],"specialkind":"none","def":"void vex::semaphore::lock","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Attempts to lock the semaphore. If the semaphore is previously locked, it will block until the semaphore is unlocked.","params":[],"static":false},{"apilevel":["pro"],"drawercat":"null","argsstring":"(uint32_t time)","desc":"Attempts to lock the semaphore. If the semaphore is previously locked, it will block until the timeout has expired or the semaphore is unlocked.","params":[{"type":"uint32_t","kind":"","declname":"time","desc":"The amount of time to wait for the semaphore to be unlocked in milliseconds."}],"static":false}],"apilevel":["pro"],"drawercat":"null"},"unlock":{"name":"unlock","kind":"function","type":["void"],"specialkind":"none","def":"void vex::semaphore::unlock","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Unlocks a locked semaphore.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"owner":{"name":"owner","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::semaphore::owner","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Checks to see if the semaphore is locked by the current task.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"}},"desc":"Use this class to synchronize access to resources.","id":"classvex_1_1semaphore","kind":"class","apilevel":["pro"],"drawercat":""},"vex::servo":{"name":"vex::servo","members":{"servo":{"name":"servo","kind":"function","type":[""],"specialkind":"constructor","def":"vex::servo::servo","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new servo object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"position":{"name":"position","kind":"function","type":["void"],"specialkind":"none","def":"void vex::servo::position","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(int32_t value, percentUnits units)","desc":"Sets the position of the servo device.","params":[{"type":"int32_t","kind":"","declname":"value","desc":"Sets the amount of rotation."},{"type":"vex::percentUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(double value, rotationUnits units)","desc":"Sets the position of the servo device.","params":[{"type":"double","kind":"","declname":"value","desc":"Sets the amount of rotation."},{"type":"vex::rotationUnits","kind":"enum","declname":"units","desc":"The measurement unit for the rotation value."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"action"}},"desc":"Use this class when programming with a servo device.","id":"classvex_1_1servo","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::sonar":{"name":"vex::sonar","members":{"sonar":{"name":"sonar","kind":"function","type":[""],"specialkind":"constructor","def":"vex::sonar::sonar","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(triport::port &port)","desc":"Creates a new sonar object on the port specified in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"port","desc":"A reference to a three wire port."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"distance":{"name":"distance","kind":"function","type":["double"],"specialkind":"none","def":"double vex::sonar::distance","static":false,"overloads":[{"apilevel":["block","cpp","pro"],"drawercat":"sensing","argsstring":"(distanceUnits units)","desc":"Gets the value of the distance sensor.","params":[{"type":"vex::distanceUnits","kind":"enum","declname":"units","desc":"The measurement unit for the sonar device."}],"static":false}],"apilevel":["block","cpp","pro"],"drawercat":"sensing"},"changed":{"name":"changed","kind":"function","type":["void"],"specialkind":"none","def":"void vex::sonar::changed","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"sensing","argsstring":"(void(*callback)(void))","desc":"Calls a function when the sonar value changes.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"sensing"}},"desc":"Use this class when programming with a sonar sensor.","id":"classvex_1_1sonar","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::task":{"name":"vex::task","members":{"task":{"name":"task","kind":"function","type":[""],"specialkind":"constructor","def":"vex::task::task","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int(*callback)(void))","desc":"Constructs a task with a function callback.","params":[{"type":"int(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int(*callback)(void), int32_t priority)","desc":"Constructs a task with a function callback and a priority.","params":[{"type":"int(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."},{"type":"int32_t","kind":"","declname":"priority","desc":"Sets the priority of the task."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"stop":{"name":"stop","kind":"function","type":["void"],"specialkind":"none","def":"void vex::task::stop","static":"mixed","overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"()","desc":"Stops the task.","params":[],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(int(*callback)(void))","desc":"Stops the task of the passed in function.","params":[{"type":"int(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":true}],"apilevel":["cpp","pro"],"drawercat":"action"},"suspend":{"name":"suspend","kind":"function","type":["void"],"specialkind":"none","def":"void vex::task::suspend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"action","argsstring":"()","desc":"Suspends the task until the task is told to resume.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"action"},"resume":{"name":"resume","kind":"function","type":["void"],"specialkind":"none","def":"void vex::task::resume","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"action","argsstring":"()","desc":"Resumes the previously suspended task.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"action"},"priority":{"name":"priority","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::task::priority","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"()","desc":"Gets the priority of the task.","params":[],"static":false}],"apilevel":["cpp","pro"],"drawercat":"sensing"},"setPriority":{"name":"setPriority","kind":"function","type":["void"],"specialkind":"none","def":"void vex::task::setPriority","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(int32_t priority)","desc":"Sets the priority of the task specified by the parameter.","params":[{"type":"int32_t","kind":"","declname":"priority","desc":"The priority level of the task."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"action"},"sleep":{"name":"sleep","kind":"function","type":["void"],"specialkind":"none","def":"static void vex::task::sleep","static":true,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(uint32_t time)","desc":"Sets the task to sleep for the specified amount of time (in milliseconds).","params":[{"type":"uint32_t","kind":"","declname":"time","desc":"The number of milliseconds for the task to sleep."}],"static":true}],"apilevel":["cpp","pro"],"drawercat":"action"},"yield":{"name":"yield","kind":"function","type":["void"],"specialkind":"none","def":"static void vex::task::yield","static":true,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"()","desc":"Suspends the enumerator and gives up control to the enumerating method. A breaking point in a task.","params":[],"static":true}],"apilevel":["cpp","pro"],"drawercat":"action"}},"desc":"Use this class to create and control tasks.","id":"classvex_1_1task","kind":"class","apilevel":["cpp","pro"],"drawercat":""},"vex::thread":{"name":"vex::thread","members":{"thread":{"name":"thread","kind":"function","type":[""],"specialkind":"constructor","def":"vex::thread::thread","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(int(*callback)(void))","desc":"Creates a thread object.","params":[{"type":"int(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false},{"apilevel":["pro"],"drawercat":"null","argsstring":"(void(*callback)(void))","desc":"Creates a thread object.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A reference to a function."}],"static":false}],"apilevel":["pro"],"drawercat":"null"},"get_id":{"name":"get_id","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::thread::get_id","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the ID of the thread.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"join":{"name":"join","kind":"function","type":["void"],"specialkind":"none","def":"void vex::thread::join","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Waits for the other thread to finish its execution.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"detach":{"name":"detach","kind":"function","type":["void"],"specialkind":"none","def":"void vex::thread::detach","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Permits the thread to execute from the thread handle.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"joinable":{"name":"joinable","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::thread::joinable","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Checks whether the thread is joinable.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"native_handle":{"name":"native_handle","kind":"function","type":["void *"],"specialkind":"none","def":"void* vex::thread::native_handle","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the pointer to the native handle of the thread.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"swap":{"name":"swap","kind":"function","type":["void"],"specialkind":"none","def":"void vex::thread::swap","static":"mixed","overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(thread &__t)","desc":"Swaps the thread IDs with another specified thread in the parameter.","params":[{"type":"","kind":"","operator":"&","declname":"__t","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":"null","argsstring":"(thread &__x, thread &__y)","desc":"Swaps two threads specified in the parameters.","params":[{"type":"","kind":"","operator":"&","declname":"__x","desc":""},{"type":"","kind":"","operator":"&","declname":"__y","desc":""}],"static":true}],"apilevel":["pro"],"drawercat":"null"},"interrupt":{"name":"interrupt","kind":"function","type":["void"],"specialkind":"none","def":"void vex::thread::interrupt","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Stops the thread.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"setPriority":{"name":"setPriority","kind":"function","type":["void"],"specialkind":"none","def":"void vex::thread::setPriority","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(int32_t priority)","desc":"Sets the priority of the thread.","params":[{"type":"int32_t","kind":"","declname":"priority","desc":"The priority of the thread to be set to."}],"static":false}],"apilevel":["pro"],"drawercat":"null"},"priority":{"name":"priority","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::thread::priority","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the priority of the thread.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"hardware_concurrency":{"name":"hardware_concurrency","kind":"function","type":["int32_t"],"specialkind":"none","def":"static int32_t vex::thread::hardware_concurrency","static":true,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the number of concurrent threads supported by the hardware.","params":[],"static":true}],"apilevel":["pro"],"drawercat":"null"}},"desc":"Use this class to create and control threads.","id":"classvex_1_1thread","kind":"class","apilevel":["pro"],"drawercat":""},"vex::timer":{"name":"vex::timer","members":{"time":{"name":"time","kind":"function","type":["uint32_t"],"specialkind":"none","def":"uint32_t vex::timer::time","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"() const","desc":"Gets the current value of the timer in mS.","params":[],"static":false},{"apilevel":["pro"],"drawercat":"null","argsstring":"(timeUnits units) const","desc":"Gets the current value of the timer in specified units.","params":[{"type":"vex::timeUnits","kind":"enum","declname":"units","desc":"The measurement unit for time."}],"static":false}],"apilevel":["pro"],"drawercat":"null"},"clear":{"name":"clear","kind":"function","type":["void"],"specialkind":"none","def":"void vex::timer::clear","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Sets the current value of the timer to 0.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"system":{"name":"system","kind":"function","type":["uint32_t"],"specialkind":"none","def":"static uint32_t vex::timer::system","static":true,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the current value of the system timer in mS.","params":[],"static":true}],"apilevel":["pro"],"drawercat":"null"},"systemHighResolution":{"name":"systemHighResolution","kind":"function","type":["uint64_t"],"specialkind":"none","def":"static uint64_t vex::timer::systemHighResolution","static":true,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the current value of the high-resolution timer (in microseconds).","params":[],"static":true}],"apilevel":["pro"],"drawercat":"null"},"event":{"name":"event","kind":"function","type":["void"],"specialkind":"none","def":"static void vex::timer::event","static":true,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(void(*callback)(void *), uint32_t value)","desc":"Sets a callback that will be called in the future.","params":[{"type":"void(*)(void *)","kind":"","declname":"callback","desc":"A pointer to a function that will be called when the timer expires."},{"type":"uint32_t","kind":"","declname":"value","desc":"The delay in mS to when the function will be called."}],"static":true},{"apilevel":["pro"],"drawercat":"null","argsstring":"(void(*callback)(void), uint32_t value)","desc":"Sets a callback that will be called in the future.","params":[{"type":"void(*)(void)","kind":"","declname":"callback","desc":"A pointer to a function that will be called when the timer expires."},{"type":"uint32_t","kind":"","declname":"value","desc":"The delay in mS to when the function will be called."}],"static":true}],"apilevel":["pro"],"drawercat":"null"}},"desc":"Use the timer class to create timers for your program.","id":"classvex_1_1timer","kind":"class","apilevel":["pro"],"drawercat":""},"vex::vision":{"name":"vex::vision","members":{"objectCount":{"name":"objectCount","kind":"variable","type":["int32_t"],"specialkind":"none","def":"int32_t vex::vision::objectCount","static":false,"desc":"The amount of objects found in the data sample.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"largestObject":{"name":"largestObject","kind":"variable","type":["vex::vision::object"],"specialkind":"none","def":"object vex::vision::largestObject","static":false,"desc":"The largest object found in the data sample.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"objects":{"name":"objects","kind":"variable","type":["vex::vision::object"],"specialkind":"none","def":"safearray< object, VISION_MAX_OBJECTS > vex::vision::objects","static":false,"desc":"An array containing the largest object(s) found in the data sample.  \n  \n.","apilevel":["block","cpp","pro"],"drawercat":"instance"},"vision":{"name":"vision","kind":"function","type":[""],"specialkind":"constructor","def":"vex::vision::vision","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int32_t index)","desc":"Creates a new vision object on the port specified.","params":[{"type":"int32_t","kind":"","declname":"index","desc":"The port index for this vision. The index is zero-based."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int32_t index, uint8_t bright, Args... sigs)","desc":"Creates a new vision object on the port specified. Sets the brightness setting and all of the vision objects settings.","params":[{"type":"int32_t","kind":"","declname":"index","desc":"The port index for this vision. The index is zero-based."},{"type":"uint8_t","kind":"","declname":"bright","desc":"The vision sensor brightness setting. Values are 0 to 255"},{"type":"Args...","kind":"","declname":"sigs","desc":"List of signature objects used to setup the detection signatures for this sensor."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"},"takeSnapshot":{"name":"takeSnapshot","kind":"function","type":["int32_t"],"specialkind":"none","def":"int32_t vex::vision::takeSnapshot","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(uint32_t id)","desc":"Takes a data sample from the vision sensor.","params":[{"type":"uint32_t","kind":"","declname":"id","desc":"The ID of the object to look for."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(code &cc)","desc":"Takes a data sample from the vision sensor.","params":[{"type":"vex::vision::code","kind":"","operator":"&","declname":"cc","desc":"The code signature of the object to look for."}],"static":false},{"apilevel":["block","cpp","pro"],"drawercat":"action","argsstring":"(signature &sig)","desc":"Takes a data sample from the vision sensor.","params":[{"type":"vex::vision::signature","kind":"","operator":"&","declname":"sig","desc":"The signature of the object to look for."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(uint32_t id, uint32_t count)","desc":"Takes a data sample from the vision sensor, and only stores the largest samples of the specified amount.","params":[{"type":"uint32_t","kind":"","declname":"id","desc":"The ID of the object to look for."},{"type":"uint32_t","kind":"","declname":"count","desc":"the amount of objects to look for. The largest of the object will be returned."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(code &cc, uint32_t count)","desc":"Takes a data sample from the vision sensor, and only stores the largest samples of the specified amount.","params":[{"type":"vex::vision::code","kind":"","operator":"&","declname":"cc","desc":"The code signature of the object to look for."},{"type":"uint32_t","kind":"","declname":"count","desc":"the amount of objects to look for. The largest of the object will be returned."}],"static":false},{"apilevel":["cpp","pro"],"drawercat":"action","argsstring":"(signature &sig, uint32_t count)","desc":"Takes a data sample from the vision sensor, and only stores the largest samples of the specified amount.","params":[{"type":"vex::vision::signature","kind":"","operator":"&","declname":"sig","desc":"The signature of the object to look for."},{"type":"uint32_t","kind":"","declname":"count","desc":"the amount of objects to look for. The largest of the object will be returned."}],"static":false}],"apilevel":["cpp","pro","block"],"drawercat":"action"},"setLedMode":{"name":"setLedMode","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::vision::setLedMode","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(ledMode mode)","desc":"Changes the mode of the LED on the vision sensor.","params":[{"type":"ledMode","kind":"","declname":"mode","desc":"The LED mode. Automatic mode will cause the LED color to be controlled by the vision sensor firmware. Manual mode allows the LED color to be controlled by the user program."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"getLedMode":{"name":"getLedMode","kind":"function","type":["ledMode"],"specialkind":"none","def":"ledMode vex::vision::getLedMode","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(void)","desc":"Gets the mode of the LED from the vision sensor.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"sensing"},"setLedBrightness":{"name":"setLedBrightness","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::vision::setLedBrightness","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(uint8_t percent)","desc":"Changes the brightness of the LED on the vision sensor when LED is set to manual mode.","params":[{"type":"uint8_t","kind":"","declname":"percent","desc":"A percentage of total brightness of the vision sensor LED when in manual mode. Values are 0 to 100. 0 = LED off"}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"getLedBrightness":{"name":"getLedBrightness","kind":"function","type":["uint8_t"],"specialkind":"none","def":"uint8_t vex::vision::getLedBrightness","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(void)","desc":"Gets the brightness of the LED from the vision sensor.","params":[{"type":"void","kind":"","desc":""}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"sensing"},"setLedColor":{"name":"setLedColor","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::vision::setLedColor","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"setting","argsstring":"(uint8_t red, uint8_t green, uint8_t blue)","desc":"Changes the color of the LED on the vision sensor when LED is set to manual mode.","params":[{"type":"uint8_t","kind":"","declname":"red","desc":"A value from 0 to 255 the represents the intensity of the red color of the LED."},{"type":"uint8_t","kind":"","declname":"green","desc":"A value from 0 to 255 the represents the intensity of the green color of the LED."},{"type":"uint8_t","kind":"","declname":"blue","desc":"A value from 0 to 255 the represents the intensity of the blue color of the LED."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"setting"},"getLedColor":{"name":"getLedColor","kind":"function","type":["bool"],"specialkind":"none","def":"bool vex::vision::getLedColor","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"sensing","argsstring":"(uint8_t *red, uint8_t *green, uint8_t *blue)","desc":"Gets the color of the LED from the vision sensor.","params":[{"type":"uint8_t *","kind":"","declname":"red","desc":"A reference to a value to store the intensity of the red color of the LED."},{"type":"uint8_t *","kind":"","declname":"green","desc":"A reference to a value to store the intensity of the green color of the LED."},{"type":"uint8_t *","kind":"","declname":"blue","desc":"A reference to a value to store the intensity of the blue color of the LED."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"sensing"}},"desc":"Use this class when programming the vision sensor.","id":"classvex_1_1vision","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::vision::code":{"name":"vex::vision::code","members":{"code":{"name":"code","kind":"function","type":[""],"specialkind":"constructor","def":"vex::vision::code::code","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(signature &s1, signature &s2)","desc":"Creates a new vision code object.","params":[{"type":"","kind":"","operator":"&","declname":"s1","desc":""},{"type":"","kind":"","operator":"&","declname":"s2","desc":""}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"}},"desc":"Use this class when programming the vision sensor.","id":"classvex_1_1vision_1_1code","kind":"class","apilevel":["pro"],"drawercat":""},"vex::vision::object":{"name":"vex::vision::object","members":{"id":{"name":"id","kind":"variable","type":["const int &"],"specialkind":"none","def":"const int& vex::vision::object::id","static":false,"desc":"The unique ID of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"originX":{"name":"originX","kind":"variable","type":["const int &"],"specialkind":"none","def":"const int& vex::vision::object::originX","static":false,"desc":"The top left x position of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"originY":{"name":"originY","kind":"variable","type":["const int &"],"specialkind":"none","def":"const int& vex::vision::object::originY","static":false,"desc":"The top left y position of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"centerX":{"name":"centerX","kind":"variable","type":["const int &"],"specialkind":"none","def":"const int& vex::vision::object::centerX","static":false,"desc":"The center x position of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"centerY":{"name":"centerY","kind":"variable","type":["const int &"],"specialkind":"none","def":"const int& vex::vision::object::centerY","static":false,"desc":"The center y position of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"width":{"name":"width","kind":"variable","type":["const int &"],"specialkind":"none","def":"const int& vex::vision::object::width","static":false,"desc":"The width of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"height":{"name":"height","kind":"variable","type":["const int &"],"specialkind":"none","def":"const int& vex::vision::object::height","static":false,"desc":"The height of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"angle":{"name":"angle","kind":"variable","type":["const double &"],"specialkind":"none","def":"const double& vex::vision::object::angle","static":false,"desc":"The angle of the object.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"exists":{"name":"exists","kind":"variable","type":["const bool &"],"specialkind":"none","def":"const bool& vex::vision::object::exists","static":false,"desc":"If the vision sensor detects the object or not.","apilevel":["block","cpp","pro"],"drawercat":"sensing"},"object":{"name":"object","kind":"function","type":[""],"specialkind":"constructor","def":"vex::vision::object::object","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Creates a new vision object with all properties set to default values.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"set":{"name":"set","kind":"function","type":["void"],"specialkind":"none","def":"void vex::vision::object::set","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(V5_DeviceVisionObject obj)","desc":"Copies all properties of the passed in object into this object.","params":[{"type":"V5_DeviceVisionObject","kind":"","declname":"obj","desc":"The object whose properties are to be copied."}],"static":false}],"apilevel":["pro"],"drawercat":"null"},"flipAngle":{"name":"flipAngle","kind":"function","type":["void"],"specialkind":"none","def":"void vex::vision::object::flipAngle","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Inverts the angle for this object.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"},"clear":{"name":"clear","kind":"function","type":["void"],"specialkind":"none","def":"void vex::vision::object::clear","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Sets all properties for this object to default values.","params":[],"static":false}],"apilevel":["pro"],"drawercat":"null"}},"desc":"The object class represents an object that the vision sensor detects.","id":"classvex_1_1vision_1_1object","kind":"class","apilevel":["block","cpp","pro"],"drawercat":""},"vex::vision::signature":{"name":"vex::vision::signature","members":{"signature":{"name":"signature","kind":"function","type":[""],"specialkind":"constructor","def":"vex::vision::signature::signature","static":false,"overloads":[{"apilevel":["cpp","pro"],"drawercat":"constructor","argsstring":"(int32_t id, int32_t uMin, int32_t uMax, int32_t uMean, int32_t vMin, int32_t vMax, int32_t vMean, float range, int32_t type)","desc":"Creates a new vision signature object.","params":[{"type":"int32_t","kind":"","declname":"id","desc":"The signature id."},{"type":"int32_t","kind":"","declname":"uMin","desc":"The signature minimum value on the u axis."},{"type":"int32_t","kind":"","declname":"uMax","desc":"The signature maximum value on the u axis."},{"type":"int32_t","kind":"","declname":"uMean","desc":"The signature mean value on the u axis."},{"type":"int32_t","kind":"","declname":"vMin","desc":"The signature minimum value on the v axis."},{"type":"int32_t","kind":"","declname":"vMax","desc":"The signature maximum value on the v axis."},{"type":"int32_t","kind":"","declname":"vMean","desc":"The signature mean value on the v axis."},{"type":"float","kind":"","declname":"range","desc":"The signature range scale factor."},{"type":"int32_t","kind":"","declname":"type","desc":"The signature type, normal, or color code."}],"static":false}],"apilevel":["cpp","pro"],"drawercat":"constructor"}},"desc":"Use this class when programming the vision sensor.","id":"classvex_1_1vision_1_1signature","kind":"class","apilevel":["pro"],"drawercat":""}},"files":{},"desc":"Triport device class.","id":"namespacevex","kind":"namespace"},"vex::this_thread":{"name":"vex::this_thread","members":{"get_id":{"name":"get_id","kind":"function","type":["int32_t"],"def":"int32_t vex::this_thread::get_id","apilevel":["pro"],"drawercat":"null","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the ID of the thread.","params":[],"static":false}]},"yield":{"name":"yield","kind":"function","type":["void"],"def":"void vex::this_thread::yield","apilevel":["pro"],"drawercat":"null","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Suspends the current thread.","params":[],"static":false}]},"sleep_for":{"name":"sleep_for","kind":"function","type":["void"],"def":"void vex::this_thread::sleep_for","apilevel":["pro"],"drawercat":"null","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(const std::chrono::duration< _Rep, _Period > &__rtime)","desc":"Suspends the current thread until the time is expired in milliseconds.","params":[{"type":"const std::chrono::duration< _Rep, _Period > &","kind":"","declname":"__rtime","desc":""}],"static":false}]},"sleep_until":{"name":"sleep_until","kind":"function","type":["void"],"def":"void vex::this_thread::sleep_until","apilevel":["pro"],"drawercat":"null","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(const std::chrono::time_point< _Clock, _Duration > &__atime)","desc":"Sleeps until the system timer reaches the time specified in the parameter.","params":[{"type":"const std::chrono::time_point< _Clock, _Duration > &","kind":"","declname":"__atime","desc":""}],"static":false}]},"setPriority":{"name":"setPriority","kind":"function","type":["void"],"def":"void vex::this_thread::setPriority","apilevel":["pro"],"drawercat":"null","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"(int32_t priority)","desc":"Sets the priority of the current thread.","params":[{"type":"int32_t","kind":"","declname":"priority","desc":"The priority of the thread to be set to."}],"static":false}]},"priority":{"name":"priority","kind":"function","type":["int32_t"],"def":"int32_t vex::this_thread::priority","apilevel":["pro"],"drawercat":"null","static":false,"overloads":[{"apilevel":["pro"],"drawercat":"null","argsstring":"()","desc":"Gets the priority of the current thread.","params":[],"static":false}]}},"Classes":{},"files":{},"desc":"","id":"namespacevex_1_1this__thread","kind":"namespace"},"std":{"name":"std","members":{"__memory_order_modifier":{"name":"__memory_order_modifier","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":""},"_Ios_Fmtflags":{"name":"_Ios_Fmtflags","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":""},"_Ios_Iostate":{"name":"_Ios_Iostate","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":""},"_Ios_Openmode":{"name":"_Ios_Openmode","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":""},"_Ios_Seekdir":{"name":"_Ios_Seekdir","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":""},"_Rb_tree_color":{"name":"_Rb_tree_color","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":""},"errc":{"name":"errc","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":""},"memory_order":{"name":"memory_order","kind":"enum","type":[""],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"enumvalue":[],"desc":"Enumeration for memory_order."},"__add_grouping":{"name":"__add_grouping","kind":"function","type":["_CharT *"],"def":"_CharT* std::__add_grouping","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT *__s, _CharT __sep, const char *__gbeg, size_t __gsize, const _CharT *__first, const _CharT *__last)","desc":"","params":[{"type":"_CharT *","kind":"","declname":"__s","desc":""},{"type":"_CharT","kind":"","declname":"__sep","desc":""},{"type":"const char *","kind":"","declname":"__gbeg","desc":""},{"type":"size_t","kind":"","declname":"__gsize","desc":""},{"type":"const _CharT *","kind":"","declname":"__first","desc":""},{"type":"const _CharT *","kind":"","declname":"__last","desc":""}],"static":false}]},"__addressof":{"name":"__addressof","kind":"function","type":["_Tp *"],"def":"_Tp* std::__addressof","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp &__r) noexcept","desc":"Same as C++11 std::addressof.","params":[{"type":"_Tp &","kind":"","declname":"__r","desc":""}],"static":false}]},"__adjacent_find":{"name":"__adjacent_find","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__adjacent_find","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":""}],"static":false}]},"__adjust_heap":{"name":"__adjust_heap","kind":"function","type":["void"],"def":"void std::__adjust_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_Distance","kind":"","declname":"__holeIndex","desc":""},{"type":"_Distance","kind":"","declname":"__len","desc":""},{"type":"_Tp","kind":"","declname":"__value","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__advance":{"name":"__advance","kind":"function","type":["void"],"def":"void std::__advance","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag)","desc":"","params":[{"type":"_RandomAccessIterator &","kind":"","declname":"__i","desc":""},{"type":"_Distance","kind":"","declname":"__n","desc":""},{"type":"std::random_access_iterator_tag","kind":"","desc":""}],"static":false}]},"__alloc_on_copy":{"name":"__alloc_on_copy","kind":"function","type":["_Alloc"],"def":"_Alloc std::__alloc_on_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Alloc &__a)","desc":"","params":[{"type":"const _Alloc &","kind":"","declname":"__a","desc":""}],"static":false}]},"__alloc_on_move":{"name":"__alloc_on_move","kind":"function","type":["void"],"def":"void std::__alloc_on_move","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Alloc &__one, _Alloc &__two)","desc":"","params":[{"type":"_Alloc &","kind":"","declname":"__one","desc":""},{"type":"_Alloc &","kind":"","declname":"__two","desc":""}],"static":false}]},"__alloc_on_swap":{"name":"__alloc_on_swap","kind":"function","type":["void"],"def":"void std::__alloc_on_swap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Alloc &__one, _Alloc &__two)","desc":"","params":[{"type":"_Alloc &","kind":"","declname":"__one","desc":""},{"type":"_Alloc &","kind":"","declname":"__two","desc":""}],"static":false}]},"__allocate_shared":{"name":"__allocate_shared","kind":"function","type":["__shared_ptr< _Tp, _Lp >"],"def":"__shared_ptr<_Tp, _Lp> std::__allocate_shared","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Alloc &__a, _Args &&...__args)","desc":"","params":[{"type":"const _Alloc &","kind":"","declname":"__a","desc":""},{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}]},"__attribute__":{"name":"__attribute__","kind":"function","type":[""],"def":"std::__attribute__","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"((always_inline)) void atomic_thread_fence(memory_order __m) noexcept","desc":"","params":[{"type":"(always_inline)","kind":"","desc":""}],"static":false}]},"__check_facet":{"name":"__check_facet","kind":"function","type":["const _Facet &"],"def":"const _Facet& std::__check_facet","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Facet *__f)","desc":"","params":[{"type":"const _Facet *","kind":"","declname":"__f","desc":""}],"static":false}]},"__chunk_insertion_sort":{"name":"__chunk_insertion_sort","kind":"function","type":["void"],"def":"void std::__chunk_insertion_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Distance","kind":"","declname":"__chunk_size","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__cmpexch_failure_order":{"name":"__cmpexch_failure_order","kind":"function","type":[""],"def":"constexpr memory_order std::__cmpexch_failure_order","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(memory_order __m) noexcept","desc":"","params":[{"type":"","kind":"","declname":"__m","desc":""}],"static":false}]},"__cmpexch_failure_order2":{"name":"__cmpexch_failure_order2","kind":"function","type":[""],"def":"constexpr memory_order std::__cmpexch_failure_order2","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(memory_order __m) noexcept","desc":"","params":[{"type":"","kind":"","declname":"__m","desc":""}],"static":false}]},"__convert_from_v":{"name":"__convert_from_v","kind":"function","type":["int"],"def":"int std::__convert_from_v","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const __c_locale &__cloc __attribute__((__unused__)), char *__out, const int __size __attribute__((__unused__)), const char *__fmt,...)","desc":"","params":[{"type":"const __c_locale &__cloc","kind":"","declname":"__attribute__","desc":""},{"type":"char *","kind":"","declname":"__out","desc":""},{"type":"const int __size","kind":"","declname":"__attribute__","desc":""},{"type":"const char *","kind":"","declname":"__fmt","desc":""},{"type":"...","kind":"","desc":""}],"static":false}]},"__convert_to_v":{"name":"__convert_to_v","kind":"function","type":["void"],"def":"void std::__convert_to_v","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *, long double &, ios_base::iostate &, const __c_locale &)","desc":"","params":[{"type":"const char *","kind":"","desc":""},{"type":"long double &","kind":"","desc":""},{"type":"","kind":"","operator":"&","desc":""},{"type":"const __c_locale &","kind":"","desc":""}],"static":false}]},"__copy_move_a":{"name":"__copy_move_a","kind":"function","type":["_OI"],"def":"_OI std::__copy_move_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II __first, _II __last, _OI __result)","desc":"","params":[{"type":"_II","kind":"","declname":"__first","desc":""},{"type":"_II","kind":"","declname":"__last","desc":""},{"type":"_OI","kind":"","declname":"__result","desc":""}],"static":false}]},"__copy_move_a2":{"name":"__copy_move_a2","kind":"function","type":["_OI"],"def":"_OI std::__copy_move_a2","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II __first, _II __last, _OI __result)","desc":"","params":[{"type":"_II","kind":"","declname":"__first","desc":""},{"type":"_II","kind":"","declname":"__last","desc":""},{"type":"_OI","kind":"","declname":"__result","desc":""}],"static":false}]},"__copy_move_backward_a":{"name":"__copy_move_backward_a","kind":"function","type":["_BI2"],"def":"_BI2 std::__copy_move_backward_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BI1 __first, _BI1 __last, _BI2 __result)","desc":"","params":[{"type":"_BI1","kind":"","declname":"__first","desc":""},{"type":"_BI1","kind":"","declname":"__last","desc":""},{"type":"_BI2","kind":"","declname":"__result","desc":""}],"static":false}]},"__copy_move_backward_a2":{"name":"__copy_move_backward_a2","kind":"function","type":["_BI2"],"def":"_BI2 std::__copy_move_backward_a2","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BI1 __first, _BI1 __last, _BI2 __result)","desc":"","params":[{"type":"_BI1","kind":"","declname":"__first","desc":""},{"type":"_BI1","kind":"","declname":"__last","desc":""},{"type":"_BI2","kind":"","declname":"__result","desc":""}],"static":false}]},"__copy_n":{"name":"__copy_n","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__copy_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _Size __n, _OutputIterator __result, random_access_iterator_tag)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"std::random_access_iterator_tag","kind":"","desc":""}],"static":false}]},"__count_if":{"name":"__count_if","kind":"function","type":["iterator_traits< _InputIterator >::difference_type"],"def":"iterator_traits<_InputIterator>::difference_type std::__count_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__deque_buf_size":{"name":"__deque_buf_size","kind":"function","type":["size_t"],"def":"size_t std::__deque_buf_size","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_t __size)","desc":"","params":[{"type":"size_t","kind":"","declname":"__size","desc":""}],"static":false}]},"__distance":{"name":"__distance","kind":"function","type":["iterator_traits< _RandomAccessIterator >::difference_type"],"def":"iterator_traits<_RandomAccessIterator>::difference_type std::__distance","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"std::random_access_iterator_tag","kind":"","desc":""}],"static":false}]},"__do_alloc_on_copy":{"name":"__do_alloc_on_copy","kind":"function","type":["void"],"def":"void std::__do_alloc_on_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Alloc &, const _Alloc &, false_type)","desc":"","params":[{"type":"_Alloc &","kind":"","desc":""},{"type":"const _Alloc &","kind":"","desc":""},{"type":"false_type","kind":"","desc":""}],"static":false}]},"__do_alloc_on_move":{"name":"__do_alloc_on_move","kind":"function","type":["void"],"def":"void std::__do_alloc_on_move","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Alloc &, _Alloc &, false_type)","desc":"","params":[{"type":"_Alloc &","kind":"","desc":""},{"type":"_Alloc &","kind":"","desc":""},{"type":"false_type","kind":"","desc":""}],"static":false}]},"__do_alloc_on_swap":{"name":"__do_alloc_on_swap","kind":"function","type":["void"],"def":"void std::__do_alloc_on_swap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Alloc &, _Alloc &, false_type)","desc":"","params":[{"type":"_Alloc &","kind":"","desc":""},{"type":"_Alloc &","kind":"","desc":""},{"type":"false_type","kind":"","desc":""}],"static":false}]},"__enable_shared_from_this_helper":{"name":"__enable_shared_from_this_helper","kind":"function","type":["void"],"def":"void std::__enable_shared_from_this_helper","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const __shared_count< _Lp > &,...) noexcept","desc":"","params":[{"type":"const __shared_count< _Lp > &","kind":"","desc":""},{"type":"...","kind":"","desc":""}],"static":false}]},"__equal_aux":{"name":"__equal_aux","kind":"function","type":["bool"],"def":"bool std::__equal_aux","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II1 __first1, _II1 __last1, _II2 __first2)","desc":"","params":[{"type":"_II1","kind":"","declname":"__first1","desc":""},{"type":"_II1","kind":"","declname":"__last1","desc":""},{"type":"_II2","kind":"","declname":"__first2","desc":""}],"static":false}]},"__equal_range":{"name":"__equal_range","kind":"function","type":["std::pair"],"def":"pair<_ForwardIterator, _ForwardIterator> std::__equal_range","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"const _Tp &","kind":"","declname":"__val","desc":""},{"type":"_CompareItTp","kind":"","declname":"__comp_it_val","desc":""},{"type":"_CompareTpIt","kind":"","declname":"__comp_val_it","desc":""}],"static":false}]},"__fill_a":{"name":"__fill_a","kind":"function","type":["__gnu_cxx::__enable_if< __is_byte< _Tp >::__value, void >::__type"],"def":"__gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type std::__fill_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp *__first, _Tp *__last, const _Tp &__c)","desc":"","params":[{"type":"_Tp *","kind":"","declname":"__first","desc":""},{"type":"_Tp *","kind":"","declname":"__last","desc":""},{"type":"const _Tp &","kind":"","declname":"__c","desc":""}],"static":false}]},"__fill_bvector":{"name":"__fill_bvector","kind":"function","type":["void"],"def":"void std::__fill_bvector","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Bit_iterator __first, _Bit_iterator __last, bool __x)","desc":"","params":[{"type":"_Bit_iterator","kind":"","declname":"__first","desc":""},{"type":"_Bit_iterator","kind":"","declname":"__last","desc":""},{"type":"bool","kind":"","declname":"__x","desc":""}],"static":false}]},"__fill_n_a":{"name":"__fill_n_a","kind":"function","type":["__gnu_cxx::__enable_if< __is_byte< _Tp >::__value, _Tp * >::__type"],"def":"__gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type std::__fill_n_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp *__first, _Size __n, const _Tp &__c)","desc":"","params":[{"type":"_Tp *","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""},{"type":"const _Tp &","kind":"","declname":"__c","desc":""}],"static":false}]},"__final_insertion_sort":{"name":"__final_insertion_sort","kind":"function","type":["void"],"def":"void std::__final_insertion_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"This is a helper function for the sort routine.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__find_end":{"name":"__find_end","kind":"function","type":["_BidirectionalIterator1"],"def":"_BidirectionalIterator1 std::__find_end","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate __comp)","desc":"","params":[{"type":"_BidirectionalIterator1","kind":"","declname":"__first1","desc":""},{"type":"_BidirectionalIterator1","kind":"","declname":"__last1","desc":""},{"type":"_BidirectionalIterator2","kind":"","declname":"__first2","desc":""},{"type":"_BidirectionalIterator2","kind":"","declname":"__last2","desc":""},{"type":"std::bidirectional_iterator_tag","kind":"","desc":""},{"type":"std::bidirectional_iterator_tag","kind":"","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__comp","desc":""}],"static":false}]},"__find_if":{"name":"__find_if","kind":"function","type":["_Iterator"],"def":"_Iterator std::__find_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Iterator __first, _Iterator __last, _Predicate __pred)","desc":"","params":[{"type":"_Iterator","kind":"","declname":"__first","desc":""},{"type":"_Iterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__find_if_not":{"name":"__find_if_not","kind":"function","type":["_InputIterator"],"def":"_InputIterator std::__find_if_not","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Provided for stable_partition to use.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__find_if_not_n":{"name":"__find_if_not_n","kind":"function","type":["_InputIterator"],"def":"_InputIterator std::__find_if_not_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _Distance &__len, _Predicate __pred)","desc":"Like find_if_not(), but uses and updates a count of the remaining range length instead of comparing against an end iterator.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_Distance &","kind":"","declname":"__len","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__gcd":{"name":"__gcd","kind":"function","type":["_EuclideanRingElement"],"def":"_EuclideanRingElement std::__gcd","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_EuclideanRingElement __m, _EuclideanRingElement __n)","desc":"","params":[{"type":"_EuclideanRingElement","kind":"","declname":"__m","desc":""},{"type":"_EuclideanRingElement","kind":"","declname":"__n","desc":""}],"static":false}]},"__get_nested_exception":{"name":"__get_nested_exception","kind":"function","type":["std::nested_exception"],"def":"const nested_exception* std::__get_nested_exception","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Ex &__ex)","desc":"","params":[{"type":"const _Ex &","kind":"","declname":"__ex","desc":""}],"static":false}]},"__heap_select":{"name":"__heap_select","kind":"function","type":["void"],"def":"void std::__heap_select","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)","desc":"This is a helper function for the sort routines.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__middle","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__iconv_adaptor":{"name":"__iconv_adaptor","kind":"function","type":["size_t"],"def":"size_t std::__iconv_adaptor","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_t(*__func)(iconv_t, _Tp, size_t *, char **, size_t *), iconv_t __cd, char **__inbuf, size_t *__inbytes, char **__outbuf, size_t *__outbytes)","desc":"","params":[{"type":"size_t(*)(iconv_t, _Tp, size_t *, char **, size_t *)","kind":"","declname":"__func","desc":""},{"type":"iconv_t","kind":"","declname":"__cd","desc":""},{"type":"char **","kind":"","declname":"__inbuf","desc":""},{"type":"size_t *","kind":"","declname":"__inbytes","desc":""},{"type":"char **","kind":"","declname":"__outbuf","desc":""},{"type":"size_t *","kind":"","declname":"__outbytes","desc":""}],"static":false}]},"__includes":{"name":"__includes","kind":"function","type":["bool"],"def":"bool std::__includes","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__inplace_merge":{"name":"__inplace_merge","kind":"function","type":["void"],"def":"void std::__inplace_merge","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)","desc":"","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__middle","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__inplace_stable_partition":{"name":"__inplace_stable_partition","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__inplace_stable_partition","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _Predicate __pred, _Distance __len)","desc":"This is a helper function... Requires __len != 0 and !__pred(*__first), same as __stable_partition_adaptive.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""},{"type":"_Distance","kind":"","declname":"__len","desc":""}],"static":false}]},"__inplace_stable_sort":{"name":"__inplace_stable_sort","kind":"function","type":["void"],"def":"void std::__inplace_stable_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"This is a helper function for the stable sorting routines.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__insertion_sort":{"name":"__insertion_sort","kind":"function","type":["void"],"def":"void std::__insertion_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"This is a helper function for the sort routine.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__introselect":{"name":"__introselect","kind":"function","type":["void"],"def":"void std::__introselect","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__nth","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Size","kind":"","declname":"__depth_limit","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__introsort_loop":{"name":"__introsort_loop","kind":"function","type":["void"],"def":"void std::__introsort_loop","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)","desc":"This is a helper function for the sort routine.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Size","kind":"","declname":"__depth_limit","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__is_heap":{"name":"__is_heap","kind":"function","type":["bool"],"def":"bool std::__is_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__is_heap_until":{"name":"__is_heap_until","kind":"function","type":["_Distance"],"def":"_Distance std::__is_heap_until","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _Distance __n, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_Distance","kind":"","declname":"__n","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__is_permutation":{"name":"__is_permutation","kind":"function","type":["bool"],"def":"bool std::__is_permutation","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)","desc":"","params":[{"type":"_ForwardIterator1","kind":"","declname":"__first1","desc":""},{"type":"_ForwardIterator1","kind":"","declname":"__last1","desc":""},{"type":"_ForwardIterator2","kind":"","declname":"__first2","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__is_sorted_until":{"name":"__is_sorted_until","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__is_sorted_until","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__iterator_category":{"name":"__iterator_category","kind":"function","type":["iterator_traits< _Iter >::iterator_category"],"def":"iterator_traits<_Iter>::iterator_category std::__iterator_category","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Iter &)","desc":"","params":[{"type":"const _Iter &","kind":"","desc":""}],"static":false}]},"__lexicographical_compare_aux":{"name":"__lexicographical_compare_aux","kind":"function","type":["bool"],"def":"bool std::__lexicographical_compare_aux","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)","desc":"","params":[{"type":"_II1","kind":"","declname":"__first1","desc":""},{"type":"_II1","kind":"","declname":"__last1","desc":""},{"type":"_II2","kind":"","declname":"__first2","desc":""},{"type":"_II2","kind":"","declname":"__last2","desc":""}],"static":false}]},"__lexicographical_compare_impl":{"name":"__lexicographical_compare_impl","kind":"function","type":["bool"],"def":"bool std::__lexicographical_compare_impl","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _Compare __comp)","desc":"","params":[{"type":"_II1","kind":"","declname":"__first1","desc":""},{"type":"_II1","kind":"","declname":"__last1","desc":""},{"type":"_II2","kind":"","declname":"__first2","desc":""},{"type":"_II2","kind":"","declname":"__last2","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__lg":{"name":"__lg","kind":"function","type":["constexpr unsigned long long"],"def":"constexpr unsigned long long std::__lg","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(unsigned long long __n)","desc":"","params":[{"type":"unsigned long long","kind":"","declname":"__n","desc":""}],"static":false}]},"__lower_bound":{"name":"__lower_bound","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__lower_bound","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"const _Tp &","kind":"","declname":"__val","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__make_heap":{"name":"__make_heap","kind":"function","type":["void"],"def":"void std::__make_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__make_move_if_noexcept_iterator":{"name":"__make_move_if_noexcept_iterator","kind":"function","type":["_ReturnType"],"def":"_ReturnType std::__make_move_if_noexcept_iterator","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Iterator __i)","desc":"","params":[{"type":"_Iterator","kind":"","declname":"__i","desc":""}],"static":false}]},"__make_shared":{"name":"__make_shared","kind":"function","type":["__shared_ptr< _Tp, _Lp >"],"def":"__shared_ptr<_Tp, _Lp> std::__make_shared","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}]},"__max_element":{"name":"__max_element","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__max_element","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__merge":{"name":"__merge","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__merge","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__merge_adaptive":{"name":"__merge_adaptive","kind":"function","type":["void"],"def":"void std::__merge_adaptive","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)","desc":"This is a helper function for the merge routines.","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__middle","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":""},{"type":"_Distance","kind":"","declname":"__len1","desc":""},{"type":"_Distance","kind":"","declname":"__len2","desc":""},{"type":"_Pointer","kind":"","declname":"__buffer","desc":""},{"type":"_Distance","kind":"","declname":"__buffer_size","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__merge_sort_loop":{"name":"__merge_sort_loop","kind":"function","type":["void"],"def":"void std::__merge_sort_loop","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator1","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator1","kind":"","declname":"__last","desc":""},{"type":"_RandomAccessIterator2","kind":"","declname":"__result","desc":""},{"type":"_Distance","kind":"","declname":"__step_size","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__merge_sort_with_buffer":{"name":"__merge_sort_with_buffer","kind":"function","type":["void"],"def":"void std::__merge_sort_with_buffer","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Pointer","kind":"","declname":"__buffer","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__merge_without_buffer":{"name":"__merge_without_buffer","kind":"function","type":["void"],"def":"void std::__merge_without_buffer","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Compare __comp)","desc":"This is a helper function for the merge routines.","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__middle","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":""},{"type":"_Distance","kind":"","declname":"__len1","desc":""},{"type":"_Distance","kind":"","declname":"__len2","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__min_element":{"name":"__min_element","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__min_element","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__minmax_element":{"name":"__minmax_element","kind":"function","type":["std::pair"],"def":"pair<_ForwardIterator, _ForwardIterator> std::__minmax_element","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__mismatch":{"name":"__mismatch","kind":"function","type":["std::pair"],"def":"pair<_InputIterator1, _InputIterator2> std::__mismatch","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":""}],"static":false}]},"__miter_base":{"name":"__miter_base","kind":"function","type":["_Miter_base< _Iterator >::iterator_type"],"def":"_Miter_base<_Iterator>::iterator_type std::__miter_base","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Iterator __it)","desc":"","params":[{"type":"_Iterator","kind":"","declname":"__it","desc":""}],"static":false}]},"__move_median_to_first":{"name":"__move_median_to_first","kind":"function","type":["void"],"def":"void std::__move_median_to_first","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator __c, _Compare __comp)","desc":"Swaps the median value of *__a, *__b and *__c under __comp to *__result.","params":[{"type":"_Iterator","kind":"","declname":"__result","desc":""},{"type":"_Iterator","kind":"","declname":"__a","desc":""},{"type":"_Iterator","kind":"","declname":"__b","desc":""},{"type":"_Iterator","kind":"","declname":"__c","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__move_merge":{"name":"__move_merge","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__move_merge","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first1, _InputIterator __last1, _InputIterator __first2, _InputIterator __last2, _OutputIterator __result, _Compare __comp)","desc":"This is a helper function for the __merge_sort_loop routines.","params":[{"type":"_InputIterator","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__move_merge_adaptive":{"name":"__move_merge_adaptive","kind":"function","type":["void"],"def":"void std::__move_merge_adaptive","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"This is a helper function for the __merge_adaptive routines.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__move_merge_adaptive_backward":{"name":"__move_merge_adaptive_backward","kind":"function","type":["void"],"def":"void std::__move_merge_adaptive_backward","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result, _Compare __comp)","desc":"This is a helper function for the __merge_adaptive routines.","params":[{"type":"_BidirectionalIterator1","kind":"","declname":"__first1","desc":""},{"type":"_BidirectionalIterator1","kind":"","declname":"__last1","desc":""},{"type":"_BidirectionalIterator2","kind":"","declname":"__first2","desc":""},{"type":"_BidirectionalIterator2","kind":"","declname":"__last2","desc":""},{"type":"_BidirectionalIterator3","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__next_permutation":{"name":"__next_permutation","kind":"function","type":["bool"],"def":"bool std::__next_permutation","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)","desc":"","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__niter_base":{"name":"__niter_base","kind":"function","type":["_Niter_base< _Iterator >::iterator_type"],"def":"_Niter_base<_Iterator>::iterator_type std::__niter_base","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Iterator __it)","desc":"","params":[{"type":"_Iterator","kind":"","declname":"__it","desc":""}],"static":false}]},"__ostream_fill":{"name":"__ostream_fill","kind":"function","type":["void"],"def":"void std::__ostream_fill","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(basic_ostream< _CharT, _Traits > &__out, streamsize __n)","desc":"","params":[{"type":"basic_ostream< _CharT, _Traits > &","kind":"","declname":"__out","desc":""},{"type":"","kind":"","declname":"__n","desc":""}],"static":false}]},"__ostream_insert":{"name":"__ostream_insert","kind":"function","type":["basic_ostream< _CharT, _Traits > &"],"def":"basic_ostream<_CharT, _Traits>& std::__ostream_insert","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(basic_ostream< _CharT, _Traits > &__out, const _CharT *__s, streamsize __n)","desc":"","params":[{"type":"basic_ostream< _CharT, _Traits > &","kind":"","declname":"__out","desc":""},{"type":"const _CharT *","kind":"","declname":"__s","desc":""},{"type":"","kind":"","declname":"__n","desc":""}],"static":false}]},"__ostream_write":{"name":"__ostream_write","kind":"function","type":["void"],"def":"void std::__ostream_write","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(basic_ostream< _CharT, _Traits > &__out, const _CharT *__s, streamsize __n)","desc":"","params":[{"type":"basic_ostream< _CharT, _Traits > &","kind":"","declname":"__out","desc":""},{"type":"const _CharT *","kind":"","declname":"__s","desc":""},{"type":"","kind":"","declname":"__n","desc":""}],"static":false}]},"__partial_sort":{"name":"__partial_sort","kind":"function","type":["void"],"def":"void std::__partial_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__middle","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__partial_sort_copy":{"name":"__partial_sort_copy","kind":"function","type":["_RandomAccessIterator"],"def":"_RandomAccessIterator std::__partial_sort_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__result_first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__result_last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__partition":{"name":"__partition","kind":"function","type":["_BidirectionalIterator"],"def":"_BidirectionalIterator std::__partition","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag)","desc":"This is a helper function...","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""},{"type":"std::bidirectional_iterator_tag","kind":"","desc":""}],"static":false}]},"__pop_heap":{"name":"__pop_heap","kind":"function","type":["void"],"def":"void std::__pop_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__prev_permutation":{"name":"__prev_permutation","kind":"function","type":["bool"],"def":"bool std::__prev_permutation","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)","desc":"","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__push_heap":{"name":"__push_heap","kind":"function","type":["void"],"def":"void std::__push_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_Distance","kind":"","declname":"__holeIndex","desc":""},{"type":"_Distance","kind":"","declname":"__topIndex","desc":""},{"type":"_Tp","kind":"","declname":"__value","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__remove_copy_if":{"name":"__remove_copy_if","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__remove_copy_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__remove_if":{"name":"__remove_if","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__remove_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__replace_copy_if":{"name":"__replace_copy_if","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__replace_copy_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp &__new_value)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""},{"type":"const _Tp &","kind":"","declname":"__new_value","desc":""}],"static":false}]},"__reverse":{"name":"__reverse","kind":"function","type":["void"],"def":"void std::__reverse","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"std::random_access_iterator_tag","kind":"","desc":""}],"static":false}]},"__rotate":{"name":"__rotate","kind":"function","type":["void"],"def":"void std::__rotate","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, random_access_iterator_tag)","desc":"This is a helper function for the rotate algorithm.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__middle","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"std::random_access_iterator_tag","kind":"","desc":""}],"static":false}]},"__rotate_adaptive":{"name":"__rotate_adaptive","kind":"function","type":["_BidirectionalIterator1"],"def":"_BidirectionalIterator1 std::__rotate_adaptive","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator1 __first, _BidirectionalIterator1 __middle, _BidirectionalIterator1 __last, _Distance __len1, _Distance __len2, _BidirectionalIterator2 __buffer, _Distance __buffer_size)","desc":"This is a helper function for the merge routines.","params":[{"type":"_BidirectionalIterator1","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator1","kind":"","declname":"__middle","desc":""},{"type":"_BidirectionalIterator1","kind":"","declname":"__last","desc":""},{"type":"_Distance","kind":"","declname":"__len1","desc":""},{"type":"_Distance","kind":"","declname":"__len2","desc":""},{"type":"_BidirectionalIterator2","kind":"","declname":"__buffer","desc":""},{"type":"_Distance","kind":"","declname":"__buffer_size","desc":""}],"static":false}]},"__search":{"name":"__search","kind":"function","type":["_ForwardIterator1"],"def":"_ForwardIterator1 std::__search","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)","desc":"","params":[{"type":"_ForwardIterator1","kind":"","declname":"__first1","desc":""},{"type":"_ForwardIterator1","kind":"","declname":"__last1","desc":""},{"type":"_ForwardIterator2","kind":"","declname":"__first2","desc":""},{"type":"_ForwardIterator2","kind":"","declname":"__last2","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__predicate","desc":""}],"static":false}]},"__search_n":{"name":"__search_n","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__search_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, _UnaryPredicate __unary_pred)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Integer","kind":"","declname":"__count","desc":""},{"type":"_UnaryPredicate","kind":"","declname":"__unary_pred","desc":""}],"static":false}]},"__search_n_aux":{"name":"__search_n_aux","kind":"function","type":["_RandomAccessIter"],"def":"_RandomAccessIter std::__search_n_aux","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, _UnaryPredicate __unary_pred, std::random_access_iterator_tag)","desc":"","params":[{"type":"_RandomAccessIter","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIter","kind":"","declname":"__last","desc":""},{"type":"_Integer","kind":"","declname":"__count","desc":""},{"type":"_UnaryPredicate","kind":"","declname":"__unary_pred","desc":""},{"type":"std::random_access_iterator_tag","kind":"","desc":""}],"static":false}]},"__set_difference":{"name":"__set_difference","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__set_difference","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__set_intersection":{"name":"__set_intersection","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__set_intersection","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__set_symmetric_difference":{"name":"__set_symmetric_difference","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__set_symmetric_difference","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__set_union":{"name":"__set_union","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::__set_union","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__sort":{"name":"__sort","kind":"function","type":["void"],"def":"void std::__sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__sort_heap":{"name":"__sort_heap","kind":"function","type":["void"],"def":"void std::__sort_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__stable_partition":{"name":"__stable_partition","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__stable_partition","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"__stable_partition_adaptive":{"name":"__stable_partition_adaptive","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__stable_partition_adaptive","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)","desc":"This is a helper function... Requires __first != __last and !__pred(__first) and __len == distance(__first, __last).","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""},{"type":"_Distance","kind":"","declname":"__len","desc":""},{"type":"_Pointer","kind":"","declname":"__buffer","desc":""},{"type":"_Distance","kind":"","declname":"__buffer_size","desc":""}],"static":false}]},"__stable_sort":{"name":"__stable_sort","kind":"function","type":["void"],"def":"void std::__stable_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__stable_sort_adaptive":{"name":"__stable_sort_adaptive","kind":"function","type":["void"],"def":"void std::__stable_sort_adaptive","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Pointer","kind":"","declname":"__buffer","desc":""},{"type":"_Distance","kind":"","declname":"__buffer_size","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__throw_bad_alloc":{"name":"__throw_bad_alloc","kind":"function","type":["void"],"def":"void std::__throw_bad_alloc","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(void) __attribute__((__noreturn__))","desc":"","params":[{"type":"void","kind":"","desc":""}],"static":false}]},"__throw_bad_cast":{"name":"__throw_bad_cast","kind":"function","type":["void"],"def":"void std::__throw_bad_cast","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(void) __attribute__((__noreturn__))","desc":"","params":[{"type":"void","kind":"","desc":""}],"static":false}]},"__throw_bad_exception":{"name":"__throw_bad_exception","kind":"function","type":["void"],"def":"void std::__throw_bad_exception","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(void) __attribute__((__noreturn__))","desc":"","params":[{"type":"void","kind":"","desc":""}],"static":false}]},"__throw_bad_function_call":{"name":"__throw_bad_function_call","kind":"function","type":["void"],"def":"void std::__throw_bad_function_call","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() __attribute__((__noreturn__))","desc":"","params":[],"static":false}]},"__throw_bad_typeid":{"name":"__throw_bad_typeid","kind":"function","type":["void"],"def":"void std::__throw_bad_typeid","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(void) __attribute__((__noreturn__))","desc":"","params":[{"type":"void","kind":"","desc":""}],"static":false}]},"__throw_bad_weak_ptr":{"name":"__throw_bad_weak_ptr","kind":"function","type":["void"],"def":"void std::__throw_bad_weak_ptr","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"","params":[],"static":false}]},"__throw_domain_error":{"name":"__throw_domain_error","kind":"function","type":["void"],"def":"void std::__throw_domain_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_future_error":{"name":"__throw_future_error","kind":"function","type":["void"],"def":"void std::__throw_future_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(int) __attribute__((__noreturn__))","desc":"","params":[{"type":"int","kind":"","desc":""}],"static":false}]},"__throw_invalid_argument":{"name":"__throw_invalid_argument","kind":"function","type":["void"],"def":"void std::__throw_invalid_argument","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_ios_failure":{"name":"__throw_ios_failure","kind":"function","type":["void"],"def":"void std::__throw_ios_failure","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_length_error":{"name":"__throw_length_error","kind":"function","type":["void"],"def":"void std::__throw_length_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_logic_error":{"name":"__throw_logic_error","kind":"function","type":["void"],"def":"void std::__throw_logic_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_out_of_range":{"name":"__throw_out_of_range","kind":"function","type":["void"],"def":"void std::__throw_out_of_range","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_out_of_range_fmt":{"name":"__throw_out_of_range_fmt","kind":"function","type":["void"],"def":"void std::__throw_out_of_range_fmt","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *,...) __attribute__((__noreturn__)) __attribute__((__format__(__printf__","desc":"","params":[{"type":"const char *","kind":"","desc":""},{"type":"...","kind":"","desc":""}],"static":false}]},"__throw_overflow_error":{"name":"__throw_overflow_error","kind":"function","type":["void"],"def":"void std::__throw_overflow_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_range_error":{"name":"__throw_range_error","kind":"function","type":["void"],"def":"void std::__throw_range_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_regex_error":{"name":"__throw_regex_error","kind":"function","type":["void"],"def":"void std::__throw_regex_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(regex_constants::error_type __ecode)","desc":"","params":[{"type":"","kind":"","declname":"__ecode","desc":""}],"static":false}]},"__throw_runtime_error":{"name":"__throw_runtime_error","kind":"function","type":["void void"],"def":"void void std::__throw_runtime_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_system_error":{"name":"__throw_system_error","kind":"function","type":["void"],"def":"void std::__throw_system_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(int) __attribute__((__noreturn__))","desc":"","params":[{"type":"int","kind":"","desc":""}],"static":false}]},"__throw_underflow_error":{"name":"__throw_underflow_error","kind":"function","type":["void"],"def":"void std::__throw_underflow_error","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const char *) __attribute__((__noreturn__))","desc":"","params":[{"type":"const char *","kind":"","desc":""}],"static":false}]},"__throw_with_nested":{"name":"__throw_with_nested","kind":"function","type":["void"],"def":"void std::__throw_with_nested","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Ex &&,...) __attribute__((__noreturn__))","desc":"","params":[{"type":"_Ex &&","kind":"","desc":""},{"type":"...","kind":"","desc":""}],"static":false}]},"__unguarded_insertion_sort":{"name":"__unguarded_insertion_sort","kind":"function","type":["void"],"def":"void std::__unguarded_insertion_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"This is a helper function for the sort routine.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__unguarded_linear_insert":{"name":"__unguarded_linear_insert","kind":"function","type":["void"],"def":"void std::__unguarded_linear_insert","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __last, _Compare __comp)","desc":"This is a helper function for the sort routine.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__unguarded_partition":{"name":"__unguarded_partition","kind":"function","type":["_RandomAccessIterator"],"def":"_RandomAccessIterator std::__unguarded_partition","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __pivot, _Compare __comp)","desc":"This is a helper function...","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__pivot","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__unguarded_partition_pivot":{"name":"__unguarded_partition_pivot","kind":"function","type":["_RandomAccessIterator"],"def":"_RandomAccessIterator std::__unguarded_partition_pivot","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"This is a helper function...","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__uninitialized_construct_buf":{"name":"__uninitialized_construct_buf","kind":"function","type":["void"],"def":"void std::__uninitialized_construct_buf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Pointer __first, _Pointer __last, _ForwardIterator __seed)","desc":"","params":[{"type":"_Pointer","kind":"","declname":"__first","desc":""},{"type":"_Pointer","kind":"","declname":"__last","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__seed","desc":""}],"static":false}]},"__uninitialized_copy_a":{"name":"__uninitialized_copy_a","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__uninitialized_copy_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator< _Tp > &)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"std::allocator","kind":"","operator":"< _Tp > &","desc":""}],"static":false}]},"__uninitialized_copy_move":{"name":"__uninitialized_copy_move","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__uninitialized_copy_move","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator &__alloc)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"_Allocator &","kind":"","declname":"__alloc","desc":""}],"static":false}]},"__uninitialized_copy_n":{"name":"__uninitialized_copy_n","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__uninitialized_copy_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _Size __n, _ForwardIterator __result, random_access_iterator_tag)","desc":"","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"std::random_access_iterator_tag","kind":"","desc":""}],"static":false}]},"__uninitialized_default":{"name":"__uninitialized_default","kind":"function","type":["void"],"def":"void std::__uninitialized_default","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""}],"static":false}]},"__uninitialized_default_a":{"name":"__uninitialized_default_a","kind":"function","type":["void"],"def":"void std::__uninitialized_default_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp > &)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"std::allocator","kind":"","operator":"< _Tp > &","desc":""}],"static":false}]},"__uninitialized_default_n":{"name":"__uninitialized_default_n","kind":"function","type":["void"],"def":"void std::__uninitialized_default_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _Size __n)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""}],"static":false}]},"__uninitialized_default_n_a":{"name":"__uninitialized_default_n_a","kind":"function","type":["void"],"def":"void std::__uninitialized_default_n_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _Size __n, allocator< _Tp > &)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""},{"type":"std::allocator","kind":"","operator":"< _Tp > &","desc":""}],"static":false}]},"__uninitialized_fill_a":{"name":"__uninitialized_fill_a","kind":"function","type":["void"],"def":"void std::__uninitialized_fill_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, allocator< _Tp2 > &)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"const _Tp &","kind":"","declname":"__x","desc":""},{"type":"std::allocator","kind":"","operator":"< _Tp2 > &","desc":""}],"static":false}]},"__uninitialized_fill_move":{"name":"__uninitialized_fill_move","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__uninitialized_fill_move","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &__x, _InputIterator __first, _InputIterator __last, _Allocator &__alloc)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__mid","desc":""},{"type":"const _Tp &","kind":"","declname":"__x","desc":""},{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_Allocator &","kind":"","declname":"__alloc","desc":""}],"static":false}]},"__uninitialized_fill_n_a":{"name":"__uninitialized_fill_n_a","kind":"function","type":["void"],"def":"void std::__uninitialized_fill_n_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _Size __n, const _Tp &__x, allocator< _Tp2 > &)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""},{"type":"const _Tp &","kind":"","declname":"__x","desc":""},{"type":"std::allocator","kind":"","operator":"< _Tp2 > &","desc":""}],"static":false}]},"__uninitialized_move_a":{"name":"__uninitialized_move_a","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__uninitialized_move_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator &__alloc)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"_Allocator &","kind":"","declname":"__alloc","desc":""}],"static":false}]},"__uninitialized_move_copy":{"name":"__uninitialized_move_copy","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__uninitialized_move_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator &__alloc)","desc":"","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"_Allocator &","kind":"","declname":"__alloc","desc":""}],"static":false}]},"__uninitialized_move_fill":{"name":"__uninitialized_move_fill","kind":"function","type":["void"],"def":"void std::__uninitialized_move_fill","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp &__x, _Allocator &__alloc)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator","kind":"","declname":"__last1","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__first2","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last2","desc":""},{"type":"const _Tp &","kind":"","declname":"__x","desc":""},{"type":"_Allocator &","kind":"","declname":"__alloc","desc":""}],"static":false}]},"__uninitialized_move_if_noexcept_a":{"name":"__uninitialized_move_if_noexcept_a","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__uninitialized_move_if_noexcept_a","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator &__alloc)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"_Allocator &","kind":"","declname":"__alloc","desc":""}],"static":false}]},"__unique":{"name":"__unique","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__unique","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":""}],"static":false}]},"__unique_copy":{"name":"__unique_copy","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__unique_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag)","desc":"","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":""},{"type":"std::input_iterator_tag","kind":"","desc":""},{"type":"std::forward_iterator_tag","kind":"","desc":""}],"static":false}]},"__unmatched_sub":{"name":"__unmatched_sub","kind":"function","type":["std::sub_match"],"def":"const sub_match<_Bi_iter>& std::__unmatched_sub","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"","params":[],"static":false}]},"__upper_bound":{"name":"__upper_bound","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::__upper_bound","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"const _Tp &","kind":"","declname":"__val","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"__use_alloc":{"name":"__use_alloc","kind":"function","type":["__uses_alloc_impl< _Tp, _Alloc, _Args...>"],"def":"__uses_alloc_impl<_Tp, _Alloc, _Args...> std::__use_alloc","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Alloc &__a)","desc":"","params":[{"type":"const _Alloc &","kind":"","declname":"__a","desc":""}],"static":false}]},"__valarray_copy":{"name":"__valarray_copy","kind":"function","type":["void"],"def":"void std::__valarray_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __src, size_t __n, _Array< size_t > __i, _Array< _Tp > __dst, _Array< size_t > __j)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__src","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__i","desc":""},{"type":"_Array< _Tp >","kind":"","declname":"__dst","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__j","desc":""}],"static":false}]},"__valarray_copy_construct":{"name":"__valarray_copy_construct","kind":"function","type":["void"],"def":"void std::__valarray_copy_construct","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, size_t __n, size_t __s, _Array< _Tp > __b)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""},{"type":"size_t","kind":"","declname":"__s","desc":""},{"type":"_Array< _Tp >","kind":"","declname":"__b","desc":""}],"static":false}]},"__valarray_default_construct":{"name":"__valarray_default_construct","kind":"function","type":["void"],"def":"void std::__valarray_default_construct","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp *__b, _Tp *__e)","desc":"","params":[{"type":"_Tp *","kind":"","declname":"__b","desc":""},{"type":"_Tp *","kind":"","declname":"__e","desc":""}],"static":false}]},"__valarray_destroy_elements":{"name":"__valarray_destroy_elements","kind":"function","type":["void"],"def":"void std::__valarray_destroy_elements","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp *__b, _Tp *__e)","desc":"","params":[{"type":"_Tp *","kind":"","declname":"__b","desc":""},{"type":"_Tp *","kind":"","declname":"__e","desc":""}],"static":false}]},"__valarray_fill":{"name":"__valarray_fill","kind":"function","type":["void"],"def":"void std::__valarray_fill","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< size_t > __i, size_t __n, const _Tp &__t)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__i","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""},{"type":"const _Tp &","kind":"","declname":"__t","desc":""}],"static":false}]},"__valarray_fill_construct":{"name":"__valarray_fill_construct","kind":"function","type":["void"],"def":"void std::__valarray_fill_construct","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp *__b, _Tp *__e, const _Tp __t)","desc":"","params":[{"type":"_Tp *","kind":"","declname":"__b","desc":""},{"type":"_Tp *","kind":"","declname":"__e","desc":""},{"type":"const _Tp","kind":"","declname":"__t","desc":""}],"static":false}]},"__valarray_get_memory":{"name":"__valarray_get_memory","kind":"function","type":["void *"],"def":"void* std::__valarray_get_memory","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_t __n)","desc":"","params":[{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"__valarray_get_storage":{"name":"__valarray_get_storage","kind":"function","type":["_Tp *__restrict__"],"def":"_Tp* __restrict__ std::__valarray_get_storage","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_t __n)","desc":"","params":[{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"__valarray_max":{"name":"__valarray_max","kind":"function","type":["_Ta::value_type"],"def":"_Ta::value_type std::__valarray_max","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Ta &__a)","desc":"","params":[{"type":"const _Ta &","kind":"","declname":"__a","desc":""}],"static":false}]},"__valarray_min":{"name":"__valarray_min","kind":"function","type":["_Ta::value_type"],"def":"_Ta::value_type std::__valarray_min","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Ta &__a)","desc":"","params":[{"type":"const _Ta &","kind":"","declname":"__a","desc":""}],"static":false}]},"__valarray_product":{"name":"__valarray_product","kind":"function","type":["_Tp"],"def":"_Tp std::__valarray_product","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Tp *__f, const _Tp *__l)","desc":"","params":[{"type":"const _Tp *","kind":"","declname":"__f","desc":""},{"type":"const _Tp *","kind":"","declname":"__l","desc":""}],"static":false}]},"__valarray_release_memory":{"name":"__valarray_release_memory","kind":"function","type":["void"],"def":"void std::__valarray_release_memory","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(void *__p)","desc":"","params":[{"type":"void *","kind":"","declname":"__p","desc":""}],"static":false}]},"__valarray_sum":{"name":"__valarray_sum","kind":"function","type":["_Tp"],"def":"_Tp std::__valarray_sum","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Tp *__f, const _Tp *__l)","desc":"","params":[{"type":"const _Tp *","kind":"","declname":"__f","desc":""},{"type":"const _Tp *","kind":"","declname":"__l","desc":""}],"static":false}]},"__write":{"name":"__write","kind":"function","type":["_OutIter"],"def":"_OutIter std::__write","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_OutIter __s, const _CharT *__ws, int __len)","desc":"","params":[{"type":"_OutIter","kind":"","declname":"__s","desc":""},{"type":"const _CharT *","kind":"","declname":"__ws","desc":""},{"type":"int","kind":"","declname":"__len","desc":""}],"static":false}]},"_Array_augmented___bitwise_and":{"name":"_Array_augmented___bitwise_and","kind":"function","type":["void"],"def":"void std::_Array_augmented___bitwise_and","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< size_t > __i, const _Expr< _Dom, _Tp > &__e, size_t __n)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__i","desc":""},{"type":"const _Expr< _Dom, _Tp > &","kind":"","declname":"__e","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"_Array_augmented___bitwise_or":{"name":"_Array_augmented___bitwise_or","kind":"function","type":["void"],"def":"void std::_Array_augmented___bitwise_or","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< bool > __m, const _Expr< _Dom, _Tp > &__e, size_t __n)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< bool >","kind":"","declname":"__m","desc":""},{"type":"const _Expr< _Dom, _Tp > &","kind":"","declname":"__e","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"_Array_augmented___bitwise_xor":{"name":"_Array_augmented___bitwise_xor","kind":"function","type":["void"],"def":"void std::_Array_augmented___bitwise_xor","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< size_t > __i, const _Expr< _Dom, _Tp > &__e, size_t __n)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__i","desc":""},{"type":"const _Expr< _Dom, _Tp > &","kind":"","declname":"__e","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"_Array_augmented___divides":{"name":"_Array_augmented___divides","kind":"function","type":["void"],"def":"void std::_Array_augmented___divides","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< size_t > __i, const _Expr< _Dom, _Tp > &__e, size_t __n)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__i","desc":""},{"type":"const _Expr< _Dom, _Tp > &","kind":"","declname":"__e","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"_Array_augmented___minus":{"name":"_Array_augmented___minus","kind":"function","type":["void"],"def":"void std::_Array_augmented___minus","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< size_t > __i, const _Expr< _Dom, _Tp > &__e, size_t __n)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__i","desc":""},{"type":"const _Expr< _Dom, _Tp > &","kind":"","declname":"__e","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"_Array_augmented___modulus":{"name":"_Array_augmented___modulus","kind":"function","type":["void"],"def":"void std::_Array_augmented___modulus","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< _Tp > __b, size_t __n, size_t __s)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< _Tp >","kind":"","declname":"__b","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""},{"type":"size_t","kind":"","declname":"__s","desc":""}],"static":false}]},"_Array_augmented___multiplies":{"name":"_Array_augmented___multiplies","kind":"function","type":["void"],"def":"void std::_Array_augmented___multiplies","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< _Tp > __b, size_t __n, size_t __s)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< _Tp >","kind":"","declname":"__b","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""},{"type":"size_t","kind":"","declname":"__s","desc":""}],"static":false}]},"_Array_augmented___plus":{"name":"_Array_augmented___plus","kind":"function","type":["void"],"def":"void std::_Array_augmented___plus","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< _Tp > __b, size_t __n, size_t __s)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< _Tp >","kind":"","declname":"__b","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""},{"type":"size_t","kind":"","declname":"__s","desc":""}],"static":false}]},"_Array_augmented___shift_left":{"name":"_Array_augmented___shift_left","kind":"function","type":["void"],"def":"void std::_Array_augmented___shift_left","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, _Array< size_t > __i, const _Expr< _Dom, _Tp > &__e, size_t __n)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"_Array< size_t >","kind":"","declname":"__i","desc":""},{"type":"const _Expr< _Dom, _Tp > &","kind":"","declname":"__e","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""}],"static":false}]},"_Array_augmented___shift_right":{"name":"_Array_augmented___shift_right","kind":"function","type":["void"],"def":"void std::_Array_augmented___shift_right","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Array< _Tp > __a, size_t __n, const _Tp &__t)","desc":"","params":[{"type":"_Array< _Tp >","kind":"","declname":"__a","desc":""},{"type":"size_t","kind":"","declname":"__n","desc":""},{"type":"const _Tp &","kind":"","declname":"__t","desc":""}],"static":false}]},"_Construct":{"name":"_Construct","kind":"function","type":["void"],"def":"void std::_Construct","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_T1 *__p, _Args &&...__args)","desc":"","params":[{"type":"_T1 *","kind":"","declname":"__p","desc":""},{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}]},"_Destroy":{"name":"_Destroy","kind":"function","type":["void"],"def":"void std::_Destroy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp > &)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"std::allocator","kind":"","operator":"< _Tp > &","desc":""}],"static":false}]},"_Fnv_hash_bytes":{"name":"_Fnv_hash_bytes","kind":"function","type":["size_t"],"def":"size_t std::_Fnv_hash_bytes","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const void *__ptr, size_t __len, size_t __seed)","desc":"","params":[{"type":"const void *","kind":"","declname":"__ptr","desc":""},{"type":"size_t","kind":"","declname":"__len","desc":""},{"type":"size_t","kind":"","declname":"__seed","desc":""}],"static":false}]},"_Hash_bytes":{"name":"_Hash_bytes","kind":"function","type":["size_t"],"def":"size_t std::_Hash_bytes","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const void *__ptr, size_t __len, size_t __seed)","desc":"","params":[{"type":"const void *","kind":"","declname":"__ptr","desc":""},{"type":"size_t","kind":"","declname":"__len","desc":""},{"type":"size_t","kind":"","declname":"__seed","desc":""}],"static":false}]},"_Rb_tree_black_count":{"name":"_Rb_tree_black_count","kind":"function","type":["unsigned int"],"def":"unsigned int std::_Rb_tree_black_count","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Rb_tree_node_base *__node, const _Rb_tree_node_base *__root)","desc":"","params":[{"type":"const _Rb_tree_node_base *","kind":"","declname":"__node","desc":""},{"type":"const _Rb_tree_node_base *","kind":"","declname":"__root","desc":""}],"static":false}]},"_Rb_tree_decrement":{"name":"_Rb_tree_decrement","kind":"function","type":["const _Rb_tree_node_base *"],"def":"const _Rb_tree_node_base* std::_Rb_tree_decrement","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Rb_tree_node_base *__x)","desc":"","params":[{"type":"const _Rb_tree_node_base *","kind":"","declname":"__x","desc":""}],"static":false}]},"_Rb_tree_increment":{"name":"_Rb_tree_increment","kind":"function","type":["const _Rb_tree_node_base *"],"def":"const _Rb_tree_node_base* std::_Rb_tree_increment","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Rb_tree_node_base *__x)","desc":"","params":[{"type":"const _Rb_tree_node_base *","kind":"","declname":"__x","desc":""}],"static":false}]},"_Rb_tree_insert_and_rebalance":{"name":"_Rb_tree_insert_and_rebalance","kind":"function","type":["void"],"def":"void std::_Rb_tree_insert_and_rebalance","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const bool __insert_left, _Rb_tree_node_base *__x, _Rb_tree_node_base *__p, _Rb_tree_node_base &__header)","desc":"","params":[{"type":"const bool","kind":"","declname":"__insert_left","desc":""},{"type":"_Rb_tree_node_base *","kind":"","declname":"__x","desc":""},{"type":"_Rb_tree_node_base *","kind":"","declname":"__p","desc":""},{"type":"_Rb_tree_node_base &","kind":"","declname":"__header","desc":""}],"static":false}]},"_Rb_tree_rebalance_for_erase":{"name":"_Rb_tree_rebalance_for_erase","kind":"function","type":["_Rb_tree_node_base *"],"def":"_Rb_tree_node_base* std::_Rb_tree_rebalance_for_erase","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Rb_tree_node_base *const __z, _Rb_tree_node_base &__header)","desc":"","params":[{"type":"_Rb_tree_node_base *const","kind":"","declname":"__z","desc":""},{"type":"_Rb_tree_node_base &","kind":"","declname":"__header","desc":""}],"static":false}]},"abs":{"name":"abs","kind":"function","type":["_Expr< _UnClos< _Abs, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Abs , _ValArray, _Tp>, _Tp> std::abs","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"accumulate":{"name":"accumulate","kind":"function","type":["_Tp"],"def":"_Tp std::accumulate","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)","desc":"Accumulate values in a range with operation.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_Tp","kind":"","declname":"__init","desc":""},{"type":"_BinaryOperation","kind":"","declname":"__binary_op","desc":""}],"static":false}]},"acos":{"name":"acos","kind":"function","type":["_Expr< _UnClos< _Acos, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Acos , _ValArray, _Tp>, _Tp> std::acos","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"addressof":{"name":"addressof","kind":"function","type":["_Tp *"],"def":"_Tp* std::addressof","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp &__r) noexcept","desc":"Returns the actual address of the object or function referenced by r, even in the presence of an overloaded operator&.","params":[{"type":"_Tp &","kind":"","declname":"__r","desc":"Reference to an object or function."}],"static":false}]},"adjacent_difference":{"name":"adjacent_difference","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::adjacent_difference","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)","desc":"Return differences between adjacent values.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_BinaryOperation","kind":"","declname":"__binary_op","desc":""}],"static":false}]},"adjacent_find":{"name":"adjacent_find","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::adjacent_find","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)","desc":"Find two adjacent values in a sequence using a predicate.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":"A binary predicate."}],"static":false}]},"advance":{"name":"advance","kind":"function","type":["void"],"def":"void std::advance","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator &__i, _Distance __n)","desc":"A generalization of pointer arithmetic.","params":[{"type":"_InputIterator &","kind":"","declname":"__i","desc":""},{"type":"_Distance","kind":"","declname":"__n","desc":""}],"static":false}]},"all_of":{"name":"all_of","kind":"function","type":["bool"],"def":"bool std::all_of","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Checks that a predicate is true for all the elements of a sequence.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"allocate_shared":{"name":"allocate_shared","kind":"function","type":["std::shared_ptr"],"def":"shared_ptr<_Tp> std::allocate_shared","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Alloc &__a, _Args &&...__args)","desc":"Create an object that is owned by a shared_ptr.","params":[{"type":"const _Alloc &","kind":"","declname":"__a","desc":""},{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}]},"any_of":{"name":"any_of","kind":"function","type":["bool"],"def":"bool std::any_of","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Checks that a predicate is false for at least an element of a sequence.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"asin":{"name":"asin","kind":"function","type":["_Expr< _UnClos< _Asin, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Asin , _ValArray, _Tp>, _Tp> std::asin","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"atan":{"name":"atan","kind":"function","type":["_Expr< _UnClos< _Atan, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Atan , _ValArray, _Tp>, _Tp> std::atan","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"atan2":{"name":"atan2","kind":"function","type":["_Expr< _BinClos< _Atan2, _Constant, _ValArray, _Tp, _Tp >, _Tp >"],"def":"_Expr<_BinClos< _Atan2 , _Constant, _ValArray, _Tp, _Tp>, _Tp> std::atan2","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Tp &__t, const valarray< _Tp > &__v)","desc":"","params":[{"type":"const _Tp &","kind":"","declname":"__t","desc":""},{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"back_inserter":{"name":"back_inserter","kind":"function","type":["std::back_insert_iterator"],"def":"back_insert_iterator<_Container> std::back_inserter","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Container &__x)","desc":"","params":[{"type":"_Container &","kind":"","declname":"__x","desc":"A container of arbitrary type."}],"static":false}]},"begin":{"name":"begin","kind":"function","type":["_Tp *"],"def":"_Tp* std::begin","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp(&__arr)[_Nm])","desc":"Return an iterator pointing to the first element of the array.","params":[{"type":"_Tp(&)","kind":"","declname":"__arr","desc":"Array."}],"static":false}]},"binary_search":{"name":"binary_search","kind":"function","type":["bool"],"def":"bool std::binary_search","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)","desc":"Determines whether an element exists in a range.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"const _Tp &","kind":"","declname":"__val","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"bind1st":{"name":"bind1st","kind":"function","type":["std::binder1st"],"def":"binder1st<_Operation> std::bind1st","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Operation &__fn, const _Tp &__x)","desc":"One of the                    \n                        \n.","params":[{"type":"const _Operation &","kind":"","declname":"__fn","desc":""},{"type":"const _Tp &","kind":"","declname":"__x","desc":""}],"static":false}]},"bind2nd":{"name":"bind2nd","kind":"function","type":["std::binder2nd"],"def":"binder2nd<_Operation> std::bind2nd","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Operation &__fn, const _Tp &__x)","desc":"One of the                    \n                        \n.","params":[{"type":"const _Operation &","kind":"","declname":"__fn","desc":""},{"type":"const _Tp &","kind":"","declname":"__x","desc":""}],"static":false}]},"boolalpha":{"name":"boolalpha","kind":"function","type":["std::ios_base"],"def":"ios_base& std::boolalpha","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::boolalpha).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"const_pointer_cast":{"name":"const_pointer_cast","kind":"function","type":["__shared_ptr< _Tp, _Lp >"],"def":"__shared_ptr<_Tp, _Lp> std::const_pointer_cast","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const __shared_ptr< _Tp1, _Lp > &__r) noexcept","desc":"const_pointer_cast","params":[{"type":"const __shared_ptr< _Tp1, _Lp > &","kind":"","declname":"__r","desc":""}],"static":false}]},"copy":{"name":"copy","kind":"function","type":["_OI"],"def":"_OI std::copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II __first, _II __last, _OI __result)","desc":"Copies the range [first,last) into result.","params":[{"type":"_II","kind":"","declname":"__first","desc":""},{"type":"_II","kind":"","declname":"__last","desc":""},{"type":"_OI","kind":"","declname":"__result","desc":""}],"static":false}]},"copy_backward":{"name":"copy_backward","kind":"function","type":["_BI2"],"def":"_BI2 std::copy_backward","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BI1 __first, _BI1 __last, _BI2 __result)","desc":"Copies the range [first,last) into result.","params":[{"type":"_BI1","kind":"","declname":"__first","desc":""},{"type":"_BI1","kind":"","declname":"__last","desc":""},{"type":"_BI2","kind":"","declname":"__result","desc":""}],"static":false}]},"copy_exception":{"name":"copy_exception","kind":"function","type":["exception_ptr"],"def":"exception_ptr std::copy_exception","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Ex __ex) noexcept 1","desc":"Obtain an exception_ptr pointing to a copy of the supplied object. This function is deprecated, use std::make_exception_ptr instead.","params":[{"type":"_Ex","kind":"","declname":"__ex","desc":""}],"static":false}]},"copy_if":{"name":"copy_if","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::copy_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)","desc":"Copy the elements of a sequence for which a predicate is true.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"copy_n":{"name":"copy_n","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::copy_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _Size __n, _OutputIterator __result)","desc":"Copies the range [first,first+n) into [result,result+n).","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_Size","kind":"","declname":"__n","desc":"The number of elements to copy."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":"An output iterator."}],"static":false}]},"cos":{"name":"cos","kind":"function","type":["_Expr< _UnClos< _Cos, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Cos , _ValArray, _Tp>, _Tp> std::cos","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"cosh":{"name":"cosh","kind":"function","type":["_Expr< _UnClos< _Cosh, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Cosh , _ValArray, _Tp>, _Tp> std::cosh","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"count":{"name":"count","kind":"function","type":["iterator_traits< _InputIterator >::difference_type"],"def":"iterator_traits<_InputIterator>::difference_type std::count","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, const _Tp &__value)","desc":"Count the number of copies of a value in a sequence.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"const _Tp &","kind":"","declname":"__value","desc":"The value to be counted."}],"static":false}]},"count_if":{"name":"count_if","kind":"function","type":["iterator_traits< _InputIterator >::difference_type"],"def":"iterator_traits<_InputIterator>::difference_type std::count_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Count the elements of a sequence for which a predicate is true.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"current_exception":{"name":"current_exception","kind":"function","type":["exception_ptr"],"def":"exception_ptr std::current_exception","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false}]},"dec":{"name":"dec","kind":"function","type":["std::ios_base"],"def":"ios_base& std::dec","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::dec, ios_base::basefield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"distance":{"name":"distance","kind":"function","type":["iterator_traits< _InputIterator >::difference_type"],"def":"iterator_traits<_InputIterator>::difference_type std::distance","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last)","desc":"A generalization of pointer arithmetic.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""}],"static":false}]},"dynamic_pointer_cast":{"name":"dynamic_pointer_cast","kind":"function","type":["__shared_ptr< _Tp, _Lp >"],"def":"__shared_ptr<_Tp, _Lp> std::dynamic_pointer_cast","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const __shared_ptr< _Tp1, _Lp > &__r) noexcept","desc":"dynamic_pointer_cast","params":[{"type":"const __shared_ptr< _Tp1, _Lp > &","kind":"","declname":"__r","desc":""}],"static":false}]},"end":{"name":"end","kind":"function","type":["_Tp *"],"def":"_Tp* std::end","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp(&__arr)[_Nm])","desc":"Return an iterator pointing to one past the last element of the array.","params":[{"type":"_Tp(&)","kind":"","declname":"__arr","desc":"Array."}],"static":false}]},"equal":{"name":"equal","kind":"function","type":["bool"],"def":"bool std::equal","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II1 __first1, _II1 __last1, _II2 __first2)","desc":"Tests a range for element-wise equality.","params":[{"type":"_II1","kind":"","declname":"__first1","desc":"An input iterator."},{"type":"_II1","kind":"","declname":"__last1","desc":"An input iterator."},{"type":"_II2","kind":"","declname":"__first2","desc":"An input iterator."}],"static":false}]},"equal_range":{"name":"equal_range","kind":"function","type":["std::pair"],"def":"pair<_ForwardIterator, _ForwardIterator> std::equal_range","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)","desc":"Finds the largest subrange in which                    \n                        \n could be inserted at any place in it without changing the ordering.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"const _Tp &","kind":"","declname":"__val","desc":"The search term."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A functor to use for comparisons."}],"static":false}]},"exp":{"name":"exp","kind":"function","type":["_Expr< _UnClos< _Exp, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Exp , _ValArray, _Tp>, _Tp> std::exp","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"fill":{"name":"fill","kind":"function","type":["void"],"def":"void std::fill","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)","desc":"Fills the range [first,last) with copies of value.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"const _Tp &","kind":"","declname":"__value","desc":"A reference-to-const of arbitrary type."}],"static":false}]},"fill_n":{"name":"fill_n","kind":"function","type":["_OI"],"def":"_OI std::fill_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_OI __first, _Size __n, const _Tp &__value)","desc":"Fills the range [first,first+n) with copies of value.","params":[{"type":"_OI","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""},{"type":"const _Tp &","kind":"","declname":"__value","desc":""}],"static":false}]},"find":{"name":"find","kind":"function","type":["_InputIterator"],"def":"_InputIterator std::find","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, const _Tp &__val)","desc":"Find the first occurrence of a value in a sequence.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"const _Tp &","kind":"","declname":"__val","desc":"The value to find."}],"static":false}]},"find_end":{"name":"find_end","kind":"function","type":["_ForwardIterator1"],"def":"_ForwardIterator1 std::find_end","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)","desc":"Find last matching subsequence in a sequence using a predicate.","params":[{"type":"_ForwardIterator1","kind":"","declname":"__first1","desc":""},{"type":"_ForwardIterator1","kind":"","declname":"__last1","desc":""},{"type":"_ForwardIterator2","kind":"","declname":"__first2","desc":""},{"type":"_ForwardIterator2","kind":"","declname":"__last2","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__comp","desc":""}],"static":false}]},"find_first_of":{"name":"find_first_of","kind":"function","type":["_InputIterator"],"def":"_InputIterator std::find_first_of","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)","desc":"Find element from a set in a sequence using a predicate.","params":[{"type":"_InputIterator","kind":"","declname":"__first1","desc":"Start of range to search."},{"type":"_InputIterator","kind":"","declname":"__last1","desc":"End of range to search."},{"type":"_ForwardIterator","kind":"","declname":"__first2","desc":"Start of match candidates."},{"type":"_ForwardIterator","kind":"","declname":"__last2","desc":"End of match candidates."},{"type":"_BinaryPredicate","kind":"","declname":"__comp","desc":"Predicate to use."}],"static":false}]},"find_if":{"name":"find_if","kind":"function","type":["_InputIterator"],"def":"_InputIterator std::find_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Find the first element in a sequence for which a predicate is true.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"find_if_not":{"name":"find_if_not","kind":"function","type":["_InputIterator"],"def":"_InputIterator std::find_if_not","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Find the first element in a sequence for which a predicate is false.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"fixed":{"name":"fixed","kind":"function","type":["std::ios_base"],"def":"ios_base& std::fixed","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::fixed, ios_base::floatfield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"for_each":{"name":"for_each","kind":"function","type":["_Function"],"def":"_Function std::for_each","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Function __f)","desc":"Apply a function to every element of a sequence.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Function","kind":"","declname":"__f","desc":"A unary function object."}],"static":false}]},"forward":{"name":"forward","kind":"function","type":["constexpr _Tp &&"],"def":"constexpr _Tp&& std::forward","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(typename std::remove_reference< _Tp >::type &&__t) noexcept","desc":"Forward an rvalue.","params":[{"type":"typename std::remove_reference< _Tp >::type &&","kind":"","declname":"__t","desc":""}],"static":false}]},"front_inserter":{"name":"front_inserter","kind":"function","type":["std::front_insert_iterator"],"def":"front_insert_iterator<_Container> std::front_inserter","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Container &__x)","desc":"","params":[{"type":"_Container &","kind":"","declname":"__x","desc":"A container of arbitrary type."}],"static":false}]},"generate":{"name":"generate","kind":"function","type":["void"],"def":"void std::generate","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)","desc":"Assign the result of a function object to each value in a sequence.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_Generator","kind":"","declname":"__gen","desc":"A function object taking no arguments and returning std::iterator_traits<_ForwardIterator>::value_type"}],"static":false}]},"generate_canonical":{"name":"generate_canonical","kind":"function","type":["_RealType"],"def":"_RealType std::generate_canonical","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_UniformRandomNumberGenerator &__g)","desc":"A function template for converting the output of a (integral) uniform random number generator to a floatng point result in the range [0-1).","params":[{"type":"_UniformRandomNumberGenerator &","kind":"","declname":"__g","desc":""}],"static":false}]},"generate_n":{"name":"generate_n","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::generate_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_OutputIterator __first, _Size __n, _Generator __gen)","desc":"Assign the result of a function object to each value in a sequence.","params":[{"type":"_OutputIterator","kind":"","declname":"__first","desc":""},{"type":"_Size","kind":"","declname":"__n","desc":""},{"type":"_Generator","kind":"","declname":"__gen","desc":""}],"static":false}]},"get_deleter":{"name":"get_deleter","kind":"function","type":["_Del *"],"def":"_Del* std::get_deleter","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const __shared_ptr< _Tp, _Lp > &__p) noexcept","desc":"20.7.2.2.10 shared_ptr get_deleter","params":[{"type":"const __shared_ptr< _Tp, _Lp > &","kind":"","declname":"__p","desc":""}],"static":false}]},"get_temporary_buffer":{"name":"get_temporary_buffer","kind":"function","type":["std::pair"],"def":"pair<_Tp*, ptrdiff_t> std::get_temporary_buffer","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ptrdiff_t __len) noexcept","desc":"Allocates a temporary buffer.","params":[{"type":"ptrdiff_t","kind":"","declname":"__len","desc":""}],"static":false}]},"getline":{"name":"getline","kind":"function","type":["basic_istream< wchar_t > &"],"def":"basic_istream<wchar_t>& std::getline","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(basic_istream< wchar_t > &__in, basic_string< wchar_t > &__str, wchar_t __delim)","desc":"","params":[{"type":"basic_istream< wchar_t > &","kind":"","declname":"__in","desc":""},{"type":"std::basic_string","kind":"","operator":"< wchar_t > &","declname":"__str","desc":""},{"type":"wchar_t","kind":"","declname":"__delim","desc":""}],"static":false}]},"has_facet":{"name":"has_facet","kind":"function","type":["bool"],"def":"bool std::has_facet","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const locale &)","desc":"","params":[{"type":"std::locale","kind":"","operator":"const                \n                        \n &","desc":""}],"static":false}]},"hex":{"name":"hex","kind":"function","type":["std::ios_base"],"def":"ios_base& std::hex","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::hex, ios_base::basefield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"includes":{"name":"includes","kind":"function","type":["bool"],"def":"bool std::includes","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)","desc":"Determines whether all elements of a sequence exists in a range using comparison.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":"Start of search range."},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":"End of search range."},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":"Start of sequence"},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":"End of sequence."},{"type":"_Compare","kind":"","declname":"__comp","desc":"Comparison function to use."}],"static":false}]},"inner_product":{"name":"inner_product","kind":"function","type":["_Tp"],"def":"_Tp std::inner_product","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)","desc":"Compute inner product of two ranges.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_Tp","kind":"","declname":"__init","desc":""},{"type":"_BinaryOperation1","kind":"","declname":"__binary_op1","desc":""},{"type":"_BinaryOperation2","kind":"","declname":"__binary_op2","desc":""}],"static":false}]},"inplace_merge":{"name":"inplace_merge","kind":"function","type":["void"],"def":"void std::inplace_merge","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)","desc":"Merges two sorted ranges in place.","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__middle","desc":""},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"inserter":{"name":"inserter","kind":"function","type":["std::insert_iterator"],"def":"insert_iterator<_Container> std::inserter","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Container &__x, _Iterator __i)","desc":"","params":[{"type":"_Container &","kind":"","declname":"__x","desc":"A container of arbitrary type."},{"type":"_Iterator","kind":"","declname":"__i","desc":""}],"static":false}]},"internal":{"name":"internal","kind":"function","type":["std::ios_base"],"def":"ios_base& std::internal","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::internal, ios_base::adjustfield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"iota":{"name":"iota","kind":"function","type":["void"],"def":"void std::iota","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)","desc":"Create a range of sequentially increasing values.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Tp","kind":"","declname":"__value","desc":""}],"static":false}]},"is_heap":{"name":"is_heap","kind":"function","type":["bool"],"def":"bool std::is_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"Determines whether a range is a heap using comparison functor.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":"Start of range."},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":"End of range."},{"type":"_Compare","kind":"","declname":"__comp","desc":"Comparison functor to use."}],"static":false}]},"is_heap_until":{"name":"is_heap_until","kind":"function","type":["_RandomAccessIterator"],"def":"_RandomAccessIterator std::is_heap_until","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"Search the end of a heap using comparison functor.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":"Start of range."},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":"End of range."},{"type":"_Compare","kind":"","declname":"__comp","desc":"Comparison functor to use."}],"static":false}]},"is_partitioned":{"name":"is_partitioned","kind":"function","type":["bool"],"def":"bool std::is_partitioned","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Checks whether the sequence is partitioned.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"is_permutation":{"name":"is_permutation","kind":"function","type":["bool"],"def":"bool std::is_permutation","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)","desc":"Checks whether a permutation of the second sequence is equal to the first sequence.","params":[{"type":"_ForwardIterator1","kind":"","declname":"__first1","desc":"Start of first range."},{"type":"_ForwardIterator1","kind":"","declname":"__last1","desc":"End of first range."},{"type":"_ForwardIterator2","kind":"","declname":"__first2","desc":"Start of second range."},{"type":"_BinaryPredicate","kind":"","declname":"__pred","desc":"A binary predicate."}],"static":false}]},"is_sorted":{"name":"is_sorted","kind":"function","type":["bool"],"def":"bool std::is_sorted","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"Determines whether the elements of a sequence are sorted according to a comparison functor.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A comparison functor."}],"static":false}]},"is_sorted_until":{"name":"is_sorted_until","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::is_sorted_until","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"Determines the end of a sorted sequence using comparison functor.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A comparison functor."}],"static":false}]},"isalnum":{"name":"isalnum","kind":"function","type":["bool"],"def":"bool std::isalnum","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::alnum, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"isalpha":{"name":"isalpha","kind":"function","type":["bool"],"def":"bool std::isalpha","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::alpha, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"iscntrl":{"name":"iscntrl","kind":"function","type":["bool"],"def":"bool std::iscntrl","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::cntrl, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"isdigit":{"name":"isdigit","kind":"function","type":["bool"],"def":"bool std::isdigit","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::digit, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"isgraph":{"name":"isgraph","kind":"function","type":["bool"],"def":"bool std::isgraph","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::graph, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"islower":{"name":"islower","kind":"function","type":["bool"],"def":"bool std::islower","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::lower, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"isprint":{"name":"isprint","kind":"function","type":["bool"],"def":"bool std::isprint","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::print, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"ispunct":{"name":"ispunct","kind":"function","type":["bool"],"def":"bool std::ispunct","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::punct, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"isspace":{"name":"isspace","kind":"function","type":["bool"],"def":"bool std::isspace","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::space, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"isupper":{"name":"isupper","kind":"function","type":["bool"],"def":"bool std::isupper","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::upper, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"isxdigit":{"name":"isxdigit","kind":"function","type":["bool"],"def":"bool std::isxdigit","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.is(ctype_base::xdigit, __c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"iter_swap":{"name":"iter_swap","kind":"function","type":["void"],"def":"void std::iter_swap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_FIter1, _FIter2)","desc":"","params":[{"type":"_FIter1","kind":"","desc":""},{"type":"_FIter2","kind":"","desc":""}],"static":false}]},"kill_dependency":{"name":"kill_dependency","kind":"function","type":["_Tp"],"def":"_Tp std::kill_dependency","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp __y) noexcept","desc":"kill_dependency","params":[{"type":"_Tp","kind":"","declname":"__y","desc":""}],"static":false}]},"left":{"name":"left","kind":"function","type":["std::ios_base"],"def":"ios_base& std::left","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::left, ios_base::adjustfield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"lexicographical_compare":{"name":"lexicographical_compare","kind":"function","type":["bool"],"def":"bool std::lexicographical_compare","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _Compare __comp)","desc":"Performs                    \n                        \n comparison on ranges.","params":[{"type":"_II1","kind":"","declname":"__first1","desc":"An input iterator."},{"type":"_II1","kind":"","declname":"__last1","desc":"An input iterator."},{"type":"_II2","kind":"","declname":"__first2","desc":"An input iterator."},{"type":"_II2","kind":"","declname":"__last2","desc":"An input iterator."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A                                    \n                                        \n."}],"static":false}]},"log":{"name":"log","kind":"function","type":["_Expr< _UnClos< _Log, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Log , _ValArray, _Tp>, _Tp> std::log","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"log10":{"name":"log10","kind":"function","type":["_Expr< _UnClos< _Log10, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Log10 , _ValArray, _Tp>, _Tp> std::log10","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"lower_bound":{"name":"lower_bound","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::lower_bound","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)","desc":"Finds the first position in which                    \n                        \n could be inserted without changing the ordering.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"const _Tp &","kind":"","declname":"__val","desc":"The search term."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A functor to use for comparisons."}],"static":false}]},"make_exception_ptr":{"name":"make_exception_ptr","kind":"function","type":["exception_ptr"],"def":"exception_ptr std::make_exception_ptr","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Ex __ex) noexcept","desc":"Obtain an exception_ptr pointing to a copy of the supplied object.","params":[{"type":"_Ex","kind":"","declname":"__ex","desc":""}],"static":false}]},"make_heap":{"name":"make_heap","kind":"function","type":["void"],"def":"void std::make_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"Construct a heap over a range using comparison functor.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":"Start of heap."},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":"End of heap."},{"type":"_Compare","kind":"","declname":"__comp","desc":"Comparison functor to use."}],"static":false}]},"make_move_iterator":{"name":"make_move_iterator","kind":"function","type":["std::move_iterator"],"def":"move_iterator<_Iterator> std::make_move_iterator","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Iterator __i)","desc":"","params":[{"type":"_Iterator","kind":"","declname":"__i","desc":""}],"static":false}]},"make_pair":{"name":"make_pair","kind":"function","type":["std::pair"],"def":"constexpr pair<typename __decay_and_strip<_T1>::__type, typename __decay_and_strip<_T2>::__type> std::make_pair","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_T1 &&__x, _T2 &&__y)","desc":"A convenience wrapper for creating a pair from two objects.","params":[{"type":"_T1 &&","kind":"","declname":"__x","desc":"The first object."},{"type":"_T2 &&","kind":"","declname":"__y","desc":"The second object."}],"static":false}]},"make_shared":{"name":"make_shared","kind":"function","type":["std::shared_ptr"],"def":"shared_ptr<_Tp> std::make_shared","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"Create an object that is owned by a shared_ptr.","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}]},"max":{"name":"max","kind":"function","type":["_Tp"],"def":"_Tp std::max","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< _Tp >, _Compare)","desc":"","params":[{"type":"initializer_list< _Tp >","kind":"","desc":""},{"type":"_Compare","kind":"","desc":""}],"static":false}]},"max_element":{"name":"max_element","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::max_element","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"Return the maximum element in a range using comparison functor.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"Start of range."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"End of range."},{"type":"_Compare","kind":"","declname":"__comp","desc":"Comparison functor."}],"static":false}]},"mem_fun":{"name":"mem_fun","kind":"function","type":["std::const_mem_fun1_t"],"def":"const_mem_fun1_t<_Ret, _Tp, _Arg> std::mem_fun","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Ret(_Tp::*__f)(_Arg) const)","desc":"","params":[{"type":"_Ret(_Tp::*)(_Arg) const","kind":"","declname":"__f","desc":""}],"static":false}]},"mem_fun_ref":{"name":"mem_fun_ref","kind":"function","type":["std::const_mem_fun1_ref_t"],"def":"const_mem_fun1_ref_t<_Ret, _Tp, _Arg> std::mem_fun_ref","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Ret(_Tp::*__f)(_Arg) const)","desc":"","params":[{"type":"_Ret(_Tp::*)(_Arg) const","kind":"","declname":"__f","desc":""}],"static":false}]},"merge":{"name":"merge","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::merge","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"Merges two sorted ranges.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"min":{"name":"min","kind":"function","type":["_Tp"],"def":"_Tp std::min","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< _Tp >, _Compare)","desc":"","params":[{"type":"initializer_list< _Tp >","kind":"","desc":""},{"type":"_Compare","kind":"","desc":""}],"static":false}]},"min_element":{"name":"min_element","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::min_element","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"Return the minimum element in a range using comparison functor.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"Start of range."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"End of range."},{"type":"_Compare","kind":"","declname":"__comp","desc":"Comparison functor."}],"static":false}]},"minmax":{"name":"minmax","kind":"function","type":["std::pair"],"def":"pair< _Tp, _Tp > std::minmax","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< _Tp >, _Compare)","desc":"","params":[{"type":"initializer_list< _Tp >","kind":"","desc":""},{"type":"_Compare","kind":"","desc":""}],"static":false}]},"minmax_element":{"name":"minmax_element","kind":"function","type":["std::pair"],"def":"pair<_ForwardIterator, _ForwardIterator> std::minmax_element","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)","desc":"Return a pair of iterators pointing to the minimum and maximum elements in a range.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"Start of range."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"End of range."},{"type":"_Compare","kind":"","declname":"__comp","desc":"Comparison functor."}],"static":false}]},"mismatch":{"name":"mismatch","kind":"function","type":["std::pair"],"def":"pair<_InputIterator1, _InputIterator2> std::mismatch","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)","desc":"Finds the places in ranges which don't match.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":"An input iterator."},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":"An input iterator."},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":"An input iterator."},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":"A binary predicate                                    \n                                        \n."}],"static":false}]},"move":{"name":"move","kind":"function","type":["_OI"],"def":"_OI std::move","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_II __first, _II __last, _OI __result)","desc":"Moves the range [first,last) into result.","params":[{"type":"_II","kind":"","declname":"__first","desc":""},{"type":"_II","kind":"","declname":"__last","desc":""},{"type":"_OI","kind":"","declname":"__result","desc":""}],"static":false}]},"move_backward":{"name":"move_backward","kind":"function","type":["_BI2"],"def":"_BI2 std::move_backward","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BI1 __first, _BI1 __last, _BI2 __result)","desc":"Moves the range [first,last) into result.","params":[{"type":"_BI1","kind":"","declname":"__first","desc":""},{"type":"_BI1","kind":"","declname":"__last","desc":""},{"type":"_BI2","kind":"","declname":"__result","desc":""}],"static":false}]},"move_if_noexcept":{"name":"move_if_noexcept","kind":"function","type":["constexpr conditional< __move_if_noexcept_cond< _Tp >::value, const _Tp &, _Tp && >::type"],"def":"constexpr conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type std::move_if_noexcept","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp &__x) noexcept","desc":"Conditionally convert a value to an rvalue.","params":[{"type":"_Tp &","kind":"","declname":"__x","desc":"A thing of arbitrary type."}],"static":false}]},"next":{"name":"next","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::next","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __x, typename iterator_traits< _ForwardIterator >::difference_type __n=1)","desc":"","params":[{"type":"_ForwardIterator","kind":"","declname":"__x","desc":""},{"type":"typename iterator_traits< _ForwardIterator >::difference_type","kind":"","declname":"__n","desc":""}],"static":false}]},"next_permutation":{"name":"next_permutation","kind":"function","type":["bool"],"def":"bool std::next_permutation","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)","desc":"Permute range into the next                    \n                        \n ordering using comparison functor.","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":"Start of range."},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":"End of range."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A comparison functor."}],"static":false}]},"noboolalpha":{"name":"noboolalpha","kind":"function","type":["std::ios_base"],"def":"ios_base& std::noboolalpha","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.unsetf(ios_base::boolalpha).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"none_of":{"name":"none_of","kind":"function","type":["bool"],"def":"bool std::none_of","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _Predicate __pred)","desc":"Checks that a predicate is false for all the elements of a sequence.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"noshowbase":{"name":"noshowbase","kind":"function","type":["std::ios_base"],"def":"ios_base& std::noshowbase","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.unsetf(ios_base::showbase).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"noshowpoint":{"name":"noshowpoint","kind":"function","type":["std::ios_base"],"def":"ios_base& std::noshowpoint","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.unsetf(ios_base::showpoint).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"noshowpos":{"name":"noshowpos","kind":"function","type":["std::ios_base"],"def":"ios_base& std::noshowpos","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.unsetf(ios_base::showpos).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"noskipws":{"name":"noskipws","kind":"function","type":["std::ios_base"],"def":"ios_base& std::noskipws","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.unsetf(ios_base::skipws).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"not1":{"name":"not1","kind":"function","type":["std::unary_negate"],"def":"unary_negate<_Predicate> std::not1","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Predicate &__pred)","desc":"One of the                    \n                        \n.","params":[{"type":"const _Predicate &","kind":"","declname":"__pred","desc":""}],"static":false}]},"not2":{"name":"not2","kind":"function","type":["std::binary_negate"],"def":"binary_negate<_Predicate> std::not2","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Predicate &__pred)","desc":"One of the                    \n                        \n.","params":[{"type":"const _Predicate &","kind":"","declname":"__pred","desc":""}],"static":false}]},"nounitbuf":{"name":"nounitbuf","kind":"function","type":["std::ios_base"],"def":"ios_base& std::nounitbuf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.unsetf(ios_base::unitbuf).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"nouppercase":{"name":"nouppercase","kind":"function","type":["std::ios_base"],"def":"ios_base& std::nouppercase","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.unsetf(ios_base::uppercase).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"nth_element":{"name":"nth_element","kind":"function","type":["void"],"def":"void std::nth_element","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)","desc":"Sort a sequence just enough to find a particular position using a predicate for comparison.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__nth","desc":"Another iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A comparison functor."}],"static":false}]},"oct":{"name":"oct","kind":"function","type":["std::ios_base"],"def":"ios_base& std::oct","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::oct, ios_base::basefield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"partial_sort":{"name":"partial_sort","kind":"function","type":["void"],"def":"void std::partial_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)","desc":"Sort the smallest elements of a sequence using a predicate for comparison.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__middle","desc":"Another iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A comparison functor."}],"static":false}]},"partial_sort_copy":{"name":"partial_sort_copy","kind":"function","type":["_RandomAccessIterator"],"def":"_RandomAccessIterator std::partial_sort_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)","desc":"Copy the smallest elements of a sequence using a predicate for comparison.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"Another input iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__result_first","desc":"A random-access iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__result_last","desc":"Another random-access iterator."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A comparison functor."}],"static":false}]},"partial_sum":{"name":"partial_sum","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::partial_sum","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)","desc":"Return list of partial sums.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_BinaryOperation","kind":"","declname":"__binary_op","desc":""}],"static":false}]},"partition":{"name":"partition","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::partition","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)","desc":"Move elements for which a predicate is true to the beginning of a sequence.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate functor."}],"static":false}]},"partition_copy":{"name":"partition_copy","kind":"function","type":["std::pair"],"def":"pair<_OutputIterator1, _OutputIterator2> std::partition_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _Predicate __pred)","desc":"Copy the elements of a sequence to separate output sequences depending on the truth value of a predicate.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_OutputIterator1","kind":"","declname":"__out_true","desc":"An output iterator."},{"type":"_OutputIterator2","kind":"","declname":"__out_false","desc":"An output iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"partition_point":{"name":"partition_point","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::partition_point","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)","desc":"Find the partition point of a partitioned range.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."}],"static":false}]},"pop_heap":{"name":"pop_heap","kind":"function","type":["void"],"def":"void std::pop_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RAIter, _RAIter, _Compare)","desc":"","params":[{"type":"_RAIter","kind":"","desc":""},{"type":"_RAIter","kind":"","desc":""},{"type":"_Compare","kind":"","desc":""}],"static":false}]},"pow":{"name":"pow","kind":"function","type":["_Expr< _BinClos< _Pow, _ValArray, _ValArray, _Tp, _Tp >, _Tp >"],"def":"_Expr<_BinClos< _Pow , _ValArray, _ValArray, _Tp, _Tp>, _Tp> std::pow","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v, const valarray< _Tp > &__w)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""},{"type":"const valarray< _Tp > &","kind":"","declname":"__w","desc":""}],"static":false}]},"prev":{"name":"prev","kind":"function","type":["_BidirectionalIterator"],"def":"_BidirectionalIterator std::prev","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator >::difference_type __n=1)","desc":"","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__x","desc":""},{"type":"typename iterator_traits< _BidirectionalIterator >::difference_type","kind":"","declname":"__n","desc":""}],"static":false}]},"prev_permutation":{"name":"prev_permutation","kind":"function","type":["bool"],"def":"bool std::prev_permutation","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)","desc":"Permute range into the previous                    \n                        \n ordering using comparison functor.","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":"Start of range."},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":"End of range."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A comparison functor."}],"static":false}]},"ptr_fun":{"name":"ptr_fun","kind":"function","type":["std::pointer_to_binary_function"],"def":"pointer_to_binary_function<_Arg1, _Arg2, _Result> std::ptr_fun","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Result(*__x)(_Arg1, _Arg2))","desc":"One of the                    \n                        \n.","params":[{"type":"_Result(*)(_Arg1, _Arg2)","kind":"","declname":"__x","desc":""}],"static":false}]},"push_heap":{"name":"push_heap","kind":"function","type":["void"],"def":"void std::push_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RAIter, _RAIter, _Compare)","desc":"","params":[{"type":"_RAIter","kind":"","desc":""},{"type":"_RAIter","kind":"","desc":""},{"type":"_Compare","kind":"","desc":""}],"static":false}]},"random_shuffle":{"name":"random_shuffle","kind":"function","type":["void"],"def":"void std::random_shuffle","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &&__rand)","desc":"Shuffle the elements of a sequence using a random number generator.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_RandomNumberGenerator &&","kind":"","declname":"__rand","desc":"The RNG functor or function."}],"static":false}]},"remove":{"name":"remove","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::remove","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)","desc":"Remove elements from a sequence.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"const _Tp &","kind":"","declname":"__value","desc":""}],"static":false}]},"remove_copy":{"name":"remove_copy","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::remove_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__value)","desc":"Copy a sequence, removing elements of a given value.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":"An output iterator."},{"type":"const _Tp &","kind":"","declname":"__value","desc":"The value to be removed."}],"static":false}]},"remove_copy_if":{"name":"remove_copy_if","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::remove_copy_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)","desc":"Copy a sequence, removing elements for which a predicate is true.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"remove_if":{"name":"remove_if","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::remove_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)","desc":"Remove elements from a sequence using a predicate.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""},{"type":"_Predicate","kind":"","declname":"__pred","desc":""}],"static":false}]},"replace":{"name":"replace","kind":"function","type":["void"],"def":"void std::replace","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__old_value, const _Tp &__new_value)","desc":"Replace each occurrence of one value in a sequence with another value.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"const _Tp &","kind":"","declname":"__old_value","desc":"The value to be replaced."},{"type":"const _Tp &","kind":"","declname":"__new_value","desc":"The replacement value."}],"static":false}]},"replace_copy":{"name":"replace_copy","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::replace_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp &__old_value, const _Tp &__new_value)","desc":"Copy a sequence, replacing each element of one value with another value.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":"An output iterator."},{"type":"const _Tp &","kind":"","declname":"__old_value","desc":"The value to be replaced."},{"type":"const _Tp &","kind":"","declname":"__new_value","desc":"The replacement value."}],"static":false}]},"replace_copy_if":{"name":"replace_copy_if","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::replace_copy_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp &__new_value)","desc":"Copy a sequence, replacing each value for which a predicate returns true with another value.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":"An output iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."},{"type":"const _Tp &","kind":"","declname":"__new_value","desc":"The replacement value."}],"static":false}]},"replace_if":{"name":"replace_if","kind":"function","type":["void"],"def":"void std::replace_if","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp &__new_value)","desc":"Replace each value in a sequence for which a predicate returns true with another value.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate."},{"type":"const _Tp &","kind":"","declname":"__new_value","desc":"The replacement value."}],"static":false}]},"rethrow_exception":{"name":"rethrow_exception","kind":"function","type":["void"],"def":"void std::rethrow_exception","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(exception_ptr) __attribute__((__noreturn__))","desc":"Throw the object pointed to by the exception_ptr.","params":[{"type":"exception_ptr","kind":"","desc":""}],"static":false}]},"rethrow_if_nested":{"name":"rethrow_if_nested","kind":"function","type":["void"],"def":"void std::rethrow_if_nested","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const nested_exception &__ex)","desc":"Overload, See N2619.","params":[{"type":"std::nested_exception","kind":"","operator":"const                \n                        \n &","declname":"__ex","desc":""}],"static":false}]},"return_temporary_buffer":{"name":"return_temporary_buffer","kind":"function","type":["void"],"def":"void std::return_temporary_buffer","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Tp *__p)","desc":"The companion to get_temporary_buffer().","params":[{"type":"_Tp *","kind":"","declname":"__p","desc":"A buffer previously allocated by get_temporary_buffer."}],"static":false}]},"reverse":{"name":"reverse","kind":"function","type":["void"],"def":"void std::reverse","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __last)","desc":"Reverse a sequence.","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":"A bidirectional iterator."},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":"A bidirectional iterator."}],"static":false}]},"reverse_copy":{"name":"reverse_copy","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::reverse_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)","desc":"Copy a sequence, reversing its elements.","params":[{"type":"_BidirectionalIterator","kind":"","declname":"__first","desc":"A bidirectional iterator."},{"type":"_BidirectionalIterator","kind":"","declname":"__last","desc":"A bidirectional iterator."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":"An output iterator."}],"static":false}]},"right":{"name":"right","kind":"function","type":["std::ios_base"],"def":"ios_base& std::right","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::right, ios_base::adjustfield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"rotate":{"name":"rotate","kind":"function","type":["void"],"def":"void std::rotate","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)","desc":"Rotate the elements of a sequence.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__middle","desc":""},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":""}],"static":false}]},"rotate_copy":{"name":"rotate_copy","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::rotate_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)","desc":"Copy a sequence, rotating its elements.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__middle","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":"An output iterator."}],"static":false}]},"scientific":{"name":"scientific","kind":"function","type":["std::ios_base"],"def":"ios_base& std::scientific","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::scientific, ios_base::floatfield).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"search":{"name":"search","kind":"function","type":["_ForwardIterator1"],"def":"_ForwardIterator1 std::search","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)","desc":"Search a sequence for a matching sub-sequence using a predicate.","params":[{"type":"_ForwardIterator1","kind":"","declname":"__first1","desc":""},{"type":"_ForwardIterator1","kind":"","declname":"__last1","desc":""},{"type":"_ForwardIterator2","kind":"","declname":"__first2","desc":""},{"type":"_ForwardIterator2","kind":"","declname":"__last2","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__predicate","desc":""}],"static":false}]},"search_n":{"name":"search_n","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::search_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp &__val, _BinaryPredicate __binary_pred)","desc":"Search a sequence for a number of consecutive values using a predicate.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_Integer","kind":"","declname":"__count","desc":"The number of consecutive values."},{"type":"const _Tp &","kind":"","declname":"__val","desc":"The value to find."},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":"A binary predicate."}],"static":false}]},"set_difference":{"name":"set_difference","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::set_difference","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"Return the difference of two sorted ranges using comparison functor.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":"Start of first range."},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":"End of first range."},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":"Start of second range."},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":"End of second range."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":"The comparison functor."}],"static":false}]},"set_intersection":{"name":"set_intersection","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::set_intersection","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"Return the intersection of two sorted ranges using comparison functor.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":"Start of first range."},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":"End of first range."},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":"Start of second range."},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":"End of second range."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":"The comparison functor."}],"static":false}]},"set_symmetric_difference":{"name":"set_symmetric_difference","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::set_symmetric_difference","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"Return the symmetric difference of two sorted ranges using comparison functor.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":"Start of first range."},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":"End of first range."},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":"Start of second range."},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":"End of second range."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":"The comparison functor."}],"static":false}]},"set_union":{"name":"set_union","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::set_union","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","desc":"Return the union of two sorted ranges using a comparison functor.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":"Start of first range."},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":"End of first range."},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":"Start of second range."},{"type":"_InputIterator2","kind":"","declname":"__last2","desc":"End of second range."},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":"The comparison functor."}],"static":false}]},"showbase":{"name":"showbase","kind":"function","type":["std::ios_base"],"def":"ios_base& std::showbase","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::showbase).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"showpoint":{"name":"showpoint","kind":"function","type":["std::ios_base"],"def":"ios_base& std::showpoint","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::showpoint).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"showpos":{"name":"showpos","kind":"function","type":["std::ios_base"],"def":"ios_base& std::showpos","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::showpos).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"shuffle":{"name":"shuffle","kind":"function","type":["void"],"def":"void std::shuffle","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator &&__g)","desc":"Shuffle the elements of a sequence using a uniform random number generator.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_UniformRandomNumberGenerator &&","kind":"","declname":"__g","desc":"A UniformRandomNumberGenerator (26.5.1.3)."}],"static":false}]},"sin":{"name":"sin","kind":"function","type":["_Expr< _UnClos< _Sin, _Expr, _Dom >, typename _Dom::value_type >"],"def":"_Expr<_UnClos< _Sin , _Expr, _Dom>, typename _Dom::value_type> std::sin","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Expr< _Dom, typename _Dom::value_type > &__e)","desc":"","params":[{"type":"const _Expr< _Dom, typename _Dom::value_type > &","kind":"","declname":"__e","desc":""}],"static":false}]},"sinh":{"name":"sinh","kind":"function","type":["_Expr< _UnClos< _Sinh, _Expr, _Dom >, typename _Dom::value_type >"],"def":"_Expr<_UnClos< _Sinh , _Expr, _Dom>, typename _Dom::value_type> std::sinh","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Expr< _Dom, typename _Dom::value_type > &__e)","desc":"","params":[{"type":"const _Expr< _Dom, typename _Dom::value_type > &","kind":"","declname":"__e","desc":""}],"static":false}]},"skipws":{"name":"skipws","kind":"function","type":["std::ios_base"],"def":"ios_base& std::skipws","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::skipws).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"sort":{"name":"sort","kind":"function","type":["void"],"def":"void std::sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"Sort the elements of a sequence using a predicate for comparison.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"sort_heap":{"name":"sort_heap","kind":"function","type":["void"],"def":"void std::sort_heap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RAIter, _RAIter, _Compare)","desc":"","params":[{"type":"_RAIter","kind":"","desc":""},{"type":"_RAIter","kind":"","desc":""},{"type":"_Compare","kind":"","desc":""}],"static":false}]},"sqrt":{"name":"sqrt","kind":"function","type":["_Expr< _UnClos< _Sqrt, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Sqrt , _ValArray, _Tp>, _Tp> std::sqrt","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"stable_partition":{"name":"stable_partition","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::stable_partition","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)","desc":"Move elements for which a predicate is true to the beginning of a sequence, preserving relative ordering.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_Predicate","kind":"","declname":"__pred","desc":"A predicate functor."}],"static":false}]},"stable_sort":{"name":"stable_sort","kind":"function","type":["void"],"def":"void std::stable_sort","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)","desc":"Sort the elements of a sequence using a predicate for comparison, preserving the relative order of equivalent elements.","params":[{"type":"_RandomAccessIterator","kind":"","declname":"__first","desc":""},{"type":"_RandomAccessIterator","kind":"","declname":"__last","desc":""},{"type":"_Compare","kind":"","declname":"__comp","desc":""}],"static":false}]},"static_pointer_cast":{"name":"static_pointer_cast","kind":"function","type":["__shared_ptr< _Tp, _Lp >"],"def":"__shared_ptr<_Tp, _Lp> std::static_pointer_cast","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const __shared_ptr< _Tp1, _Lp > &__r) noexcept","desc":"static_pointer_cast","params":[{"type":"const __shared_ptr< _Tp1, _Lp > &","kind":"","declname":"__r","desc":""}],"static":false}]},"swap":{"name":"swap","kind":"function","type":["void"],"def":"void std::swap","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(basic_string< _CharT, _Traits, _Alloc > &__lhs, basic_string< _CharT, _Traits, _Alloc > &__rhs)","desc":"Swap contents of two strings.","params":[{"type":"std::basic_string","kind":"","operator":"< _CharT, _Traits, _Alloc > &","declname":"__lhs","desc":"First string."},{"type":"std::basic_string","kind":"","operator":"< _CharT, _Traits, _Alloc > &","declname":"__rhs","desc":"Second string."}],"static":false}]},"swap_ranges":{"name":"swap_ranges","kind":"function","type":["_FIter2"],"def":"_FIter2 std::swap_ranges","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_FIter1, _FIter1, _FIter2)","desc":"","params":[{"type":"_FIter1","kind":"","desc":""},{"type":"_FIter1","kind":"","desc":""},{"type":"_FIter2","kind":"","desc":""}],"static":false}]},"tan":{"name":"tan","kind":"function","type":["_Expr< _UnClos< _Tan, _Expr, _Dom >, typename _Dom::value_type >"],"def":"_Expr<_UnClos< _Tan , _Expr, _Dom>, typename _Dom::value_type> std::tan","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Expr< _Dom, typename _Dom::value_type > &__e)","desc":"","params":[{"type":"const _Expr< _Dom, typename _Dom::value_type > &","kind":"","declname":"__e","desc":""}],"static":false}]},"tanh":{"name":"tanh","kind":"function","type":["_Expr< _UnClos< _Tanh, _ValArray, _Tp >, _Tp >"],"def":"_Expr<_UnClos< _Tanh , _ValArray, _Tp>, _Tp> std::tanh","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const valarray< _Tp > &__v)","desc":"","params":[{"type":"const valarray< _Tp > &","kind":"","declname":"__v","desc":""}],"static":false}]},"throw_with_nested":{"name":"throw_with_nested","kind":"function","type":["void"],"def":"void std::throw_with_nested","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Ex __ex)","desc":"If                    \n                        \n is derived from nested_exception,                    \n                        \n. Else, an implementation-defined object derived from both.","params":[{"type":"_Ex","kind":"","declname":"__ex","desc":""}],"static":false}]},"tolower":{"name":"tolower","kind":"function","type":["_CharT"],"def":"_CharT std::tolower","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.tolower(__c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"toupper":{"name":"toupper","kind":"function","type":["_CharT"],"def":"_CharT std::toupper","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_CharT __c, const locale &__loc)","desc":"Convenience interface to ctype.toupper(__c).","params":[{"type":"_CharT","kind":"","declname":"__c","desc":""},{"type":"std::locale","kind":"","operator":"const                \n                        \n &","declname":"__loc","desc":""}],"static":false}]},"transform":{"name":"transform","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::transform","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)","desc":"Perform an operation on corresponding elements of two sequences.","params":[{"type":"_InputIterator1","kind":"","declname":"__first1","desc":""},{"type":"_InputIterator1","kind":"","declname":"__last1","desc":""},{"type":"_InputIterator2","kind":"","declname":"__first2","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_BinaryOperation","kind":"","declname":"__binary_op","desc":""}],"static":false}]},"uninitialized_copy":{"name":"uninitialized_copy","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::uninitialized_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)","desc":"Copies the range [first,last) into result.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":"An output iterator."}],"static":false}]},"uninitialized_copy_n":{"name":"uninitialized_copy_n","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::uninitialized_copy_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _Size __n, _ForwardIterator __result)","desc":"Copies the range [first,first+n) into result.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_Size","kind":"","declname":"__n","desc":"The number of elements to copy."},{"type":"_ForwardIterator","kind":"","declname":"__result","desc":"An output iterator."}],"static":false}]},"uninitialized_fill":{"name":"uninitialized_fill","kind":"function","type":["void"],"def":"void std::uninitialized_fill","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x)","desc":"Copies the value x into the range [first,last).","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"const _Tp &","kind":"","declname":"__x","desc":"The source value."}],"static":false}]},"uninitialized_fill_n":{"name":"uninitialized_fill_n","kind":"function","type":["void"],"def":"void std::uninitialized_fill_n","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _Size __n, const _Tp &__x)","desc":"Copies the value x into the range [first,first+n).","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_Size","kind":"","declname":"__n","desc":"The number of copies to make."},{"type":"const _Tp &","kind":"","declname":"__x","desc":"The source value."}],"static":false}]},"unique":{"name":"unique","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::unique","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)","desc":"Remove consecutive values from a sequence using a predicate.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"A forward iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"A forward iterator."},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":"A binary predicate."}],"static":false}]},"unique_copy":{"name":"unique_copy","kind":"function","type":["_OutputIterator"],"def":"_OutputIterator std::unique_copy","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)","desc":"Copy a sequence, removing consecutive values using a predicate.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"_OutputIterator","kind":"","declname":"__result","desc":""},{"type":"_BinaryPredicate","kind":"","declname":"__binary_pred","desc":""}],"static":false}]},"unitbuf":{"name":"unitbuf","kind":"function","type":["std::ios_base"],"def":"ios_base& std::unitbuf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::unitbuf).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"upper_bound":{"name":"upper_bound","kind":"function","type":["_ForwardIterator"],"def":"_ForwardIterator std::upper_bound","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)","desc":"Finds the last position in which                    \n                        \n could be inserted without changing the ordering.","params":[{"type":"_ForwardIterator","kind":"","declname":"__first","desc":"An iterator."},{"type":"_ForwardIterator","kind":"","declname":"__last","desc":"Another iterator."},{"type":"const _Tp &","kind":"","declname":"__val","desc":"The search term."},{"type":"_Compare","kind":"","declname":"__comp","desc":"A functor to use for comparisons."}],"static":false}]},"uppercase":{"name":"uppercase","kind":"function","type":["std::ios_base"],"def":"ios_base& std::uppercase","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(ios_base &__base)","desc":"Calls base.setf(ios_base::uppercase).","params":[{"type":"std::ios_base","kind":"","operator":"&","declname":"__base","desc":""}],"static":false}]},"use_facet":{"name":"use_facet","kind":"function","type":["const _Facet &"],"def":"const _Facet& std::use_facet","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const locale &)","desc":"","params":[{"type":"std::locale","kind":"","operator":"const                \n                        \n &","desc":""}],"static":false}]}},"Classes":{"std::allocator":{"name":"std::allocator","members":{"allocator":{"name":"allocator","kind":"function","type":[""],"specialkind":"constructor","def":"std::allocator< _Tp >::allocator","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const allocator &__a)","desc":"","params":[{"type":"allocator","kind":"","operator":"const\n                \n &","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const allocator< _Tp1 > &)","desc":"","params":[{"type":"allocator","kind":"","operator":"const\n                \n< _Tp1 > &","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"address":{"name":"address","kind":"function","type":["pointer"],"specialkind":"none","def":"pointer __gnu_cxx::new_allocator< _Tp >::address","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(reference __x) const noexcept","desc":"","params":[{"type":"reference","kind":"","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_reference __x) const noexcept","desc":"","params":[{"type":"const_reference","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"allocate":{"name":"allocate","kind":"function","type":["pointer"],"specialkind":"none","def":"pointer __gnu_cxx::new_allocator< _Tp >::allocate","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const void *=0)","desc":"","params":[{"type":"size_type","kind":"","declname":"__n","desc":""},{"type":"const void *","kind":"","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"construct":{"name":"construct","kind":"function","type":["void"],"specialkind":"none","def":"void __gnu_cxx::new_allocator< _Tp >::construct","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Up *__p, _Args &&...__args)","desc":"","params":[{"type":"_Up *","kind":"","declname":"__p","desc":""},{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"deallocate":{"name":"deallocate","kind":"function","type":["void"],"specialkind":"none","def":"void __gnu_cxx::new_allocator< _Tp >::deallocate","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(pointer __p, size_type)","desc":"","params":[{"type":"pointer","kind":"","declname":"__p","desc":""},{"type":"size_type","kind":"","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"destroy":{"name":"destroy","kind":"function","type":["void"],"specialkind":"none","def":"void __gnu_cxx::new_allocator< _Tp >::destroy","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Up *__p)","desc":"","params":[{"type":"_Up *","kind":"","declname":"__p","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"max_size":{"name":"max_size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type __gnu_cxx::new_allocator< _Tp >::max_size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]}},"desc":{"emphasis":"standard","__text":"The\n            \n allocator, as per [20.4]."},"id":"classstd_1_1allocator","kind":"class","apilevel":["pro"],"drawercat":["pro"]},"std::deque":{"name":"std::deque","members":{"deque":{"name":"deque","kind":"function","type":[""],"specialkind":"constructor","def":"std::deque< _Tp, _Alloc >::deque","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"Creates a deque with no elements.","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const allocator_type &__a)","desc":"Creates a deque with no elements.","params":[{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n)","desc":"Creates a deque with default constructed elements.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"The number of elements to initially create."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const value_type &__value, const allocator_type &__a=allocator_type())","desc":"Creates a deque with copies of an exemplar element.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"The number of elements to initially create."},{"type":"const value_type &","kind":"","declname":"__value","desc":"An element to copy."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const deque &__x)","desc":"Deque copy constructor.","params":[{"type":"","kind":"","operator":"const\n                \n &","declname":"__x","desc":"A deque of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(deque &&__x)","desc":"Deque move constructor.","params":[{"type":"","kind":"","operator":"&&","declname":"__x","desc":"A deque of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l, const allocator_type &__a=allocator_type())","desc":"Builds a deque from an initializer list.","params":[{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, const allocator_type &__a=allocator_type())","desc":"Builds a deque from a range.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"assign":{"name":"assign","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::assign","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const value_type &__val)","desc":"Assigns a given value to a deque.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"Number of elements to be assigned."},{"type":"const value_type &","kind":"","declname":"__val","desc":"Value to be assigned."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last)","desc":"Assigns a range to a deque.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l)","desc":"Assigns an initializer list to a deque.","params":[{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"at":{"name":"at","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::deque< _Tp, _Alloc >::at","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n)","desc":"Provides access to the data contained in the deque.","params":[{"type":"size_type","kind":"","declname":"__n","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n) const","desc":"Provides access to the data contained in the deque.","params":[{"type":"size_type","kind":"","declname":"__n","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"back":{"name":"back","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::deque< _Tp, _Alloc >::back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"begin":{"name":"begin","kind":"function","type":[""],"specialkind":"none","def":"iterator std::deque< _Tp, _Alloc >::begin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cbegin":{"name":"cbegin","kind":"function","type":[""],"specialkind":"none","def":"const_iterator std::deque< _Tp, _Alloc >::cbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cend":{"name":"cend","kind":"function","type":[""],"specialkind":"none","def":"const_iterator std::deque< _Tp, _Alloc >::cend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"clear":{"name":"clear","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::clear","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crbegin":{"name":"crbegin","kind":"function","type":[""],"specialkind":"none","def":"const_reverse_iterator std::deque< _Tp, _Alloc >::crbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crend":{"name":"crend","kind":"function","type":[""],"specialkind":"none","def":"const_reverse_iterator std::deque< _Tp, _Alloc >::crend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace":{"name":"emplace","kind":"function","type":[""],"specialkind":"none","def":"iterator std::deque< _Tp, _Alloc >::emplace","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, _Args &&...__args)","desc":"Inserts an object in deque before specified iterator.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the deque."},{"type":"_Args &&...","kind":"","declname":"__args","desc":"Arguments."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace_back":{"name":"emplace_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::emplace_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace_front":{"name":"emplace_front","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::emplace_front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"empty":{"name":"empty","kind":"function","type":["bool"],"specialkind":"none","def":"bool std::deque< _Tp, _Alloc >::empty","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"end":{"name":"end","kind":"function","type":[""],"specialkind":"none","def":"iterator std::deque< _Tp, _Alloc >::end","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"erase":{"name":"erase","kind":"function","type":[""],"specialkind":"none","def":"iterator std::deque< _Tp, _Alloc >::erase","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position)","desc":"Remove element at given position.","params":[{"type":"","kind":"","declname":"__position","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __first, const_iterator __last)","desc":"Remove a range of elements.","params":[{"type":"","kind":"","declname":"__first","desc":""},{"type":"","kind":"","declname":"__last","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"front":{"name":"front","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::deque< _Tp, _Alloc >::front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"get_allocator":{"name":"get_allocator","kind":"function","type":["allocator_type"],"specialkind":"none","def":"allocator_type std::deque< _Tp, _Alloc >::get_allocator","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"Get a copy of the memory allocation object.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"insert":{"name":"insert","kind":"function","type":[""],"specialkind":"none","def":"iterator std::deque< _Tp, _Alloc >::insert","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, const value_type &__x)","desc":"Inserts given value into deque before specified iterator.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the deque."},{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, value_type &&__x)","desc":"Inserts given rvalue into deque before specified iterator.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the deque."},{"type":"value_type &&","kind":"","declname":"__x","desc":"Data to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __p, initializer_list< value_type > __l)","desc":"Inserts an initializer list into the deque.","params":[{"type":"","kind":"","declname":"__p","desc":"An iterator into the deque."},{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":"An initializer_list."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, size_type __n, const value_type &__x)","desc":"Inserts a number of copies of given data into the deque.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the deque."},{"type":"size_type","kind":"","declname":"__n","desc":"Number of elements to be inserted."},{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, _InputIterator __first, _InputIterator __last)","desc":"Inserts a range into the deque.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the deque."},{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"max_size":{"name":"max_size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::deque< _Tp, _Alloc >::max_size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"pop_back":{"name":"pop_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::pop_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"Removes last element.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"pop_front":{"name":"pop_front","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::pop_front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"Removes first element.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"push_back":{"name":"push_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::push_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Add data to the end of the deque.","params":[{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be added."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(value_type &&__x)","desc":"","params":[{"type":"value_type &&","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"push_front":{"name":"push_front","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::push_front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Add data to the front of the deque.","params":[{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be added."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(value_type &&__x)","desc":"","params":[{"type":"value_type &&","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rbegin":{"name":"rbegin","kind":"function","type":[""],"specialkind":"none","def":"reverse_iterator std::deque< _Tp, _Alloc >::rbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rend":{"name":"rend","kind":"function","type":[""],"specialkind":"none","def":"reverse_iterator std::deque< _Tp, _Alloc >::rend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"resize":{"name":"resize","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::resize","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __new_size)","desc":"Resizes the deque to the specified number of elements.","params":[{"type":"size_type","kind":"","declname":"__new_size","desc":"Number of elements the deque should contain."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __new_size, const value_type &__x)","desc":"Resizes the deque to the specified number of elements.","params":[{"type":"size_type","kind":"","declname":"__new_size","desc":"Number of elements the deque should contain."},{"type":"const value_type &","kind":"","declname":"__x","desc":"Data with which new elements should be populated."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"shrink_to_fit":{"name":"shrink_to_fit","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::shrink_to_fit","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"size":{"name":"size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::deque< _Tp, _Alloc >::size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"swap":{"name":"swap","kind":"function","type":["void"],"specialkind":"none","def":"void std::deque< _Tp, _Alloc >::swap","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(deque &__x) noexcept","desc":"Swaps data with another deque.","params":[{"type":"","kind":"","operator":"&","declname":"__x","desc":"A deque of the same element and allocator types."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]}},"desc":"A standard container using fixed-size memory allocation and constant-time manipulation of elements at either end.","id":"classstd_1_1deque","kind":"class","apilevel":["pro"],"drawercat":["pro"]},"std::list":{"name":"std::list","members":{"list":{"name":"list","kind":"function","type":[""],"specialkind":"constructor","def":"std::list< _Tp, _Alloc >::list","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept(is_nothrow_default_constructible< _Node_alloc_type >::value)","desc":"Creates a list with no elements.","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const allocator_type &__a) noexcept","desc":"Creates a list with no elements.","params":[{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n)","desc":"Creates a list with default constructed elements.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"The number of elements to initially create."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const value_type &__value, const allocator_type &__a=allocator_type())","desc":"Creates a list with copies of an exemplar element.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"The number of elements to initially create."},{"type":"const value_type &","kind":"","declname":"__value","desc":"An element to copy."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const list &__x)","desc":"List copy constructor.","params":[{"type":"","kind":"","operator":"const                \n                        \n &","declname":"__x","desc":"A list of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(list &&__x) noexcept","desc":"List move constructor.","params":[{"type":"","kind":"","operator":"&&","declname":"__x","desc":"A list of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l, const allocator_type &__a=allocator_type())","desc":"Builds a list from an initializer_list.","params":[{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":"An initializer_list of value_type."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, const allocator_type &__a=allocator_type())","desc":"Builds a list from a range.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"assign":{"name":"assign","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::assign","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const value_type &__val)","desc":"Assigns a given value to a list.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"Number of elements to be assigned."},{"type":"const value_type &","kind":"","declname":"__val","desc":"Value to be assigned."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last)","desc":"Assigns a range to a list.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l)","desc":"Assigns an initializer_list to a list.","params":[{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":"An initializer_list of value_type."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"back":{"name":"back","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::list< _Tp, _Alloc >::back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"begin":{"name":"begin","kind":"function","type":[""],"specialkind":"none","def":"iterator std::list< _Tp, _Alloc >::begin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cbegin":{"name":"cbegin","kind":"function","type":[""],"specialkind":"none","def":"const_iterator std::list< _Tp, _Alloc >::cbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cend":{"name":"cend","kind":"function","type":[""],"specialkind":"none","def":"const_iterator std::list< _Tp, _Alloc >::cend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"clear":{"name":"clear","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::clear","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crbegin":{"name":"crbegin","kind":"function","type":[""],"specialkind":"none","def":"const_reverse_iterator std::list< _Tp, _Alloc >::crbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crend":{"name":"crend","kind":"function","type":[""],"specialkind":"none","def":"const_reverse_iterator std::list< _Tp, _Alloc >::crend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace":{"name":"emplace","kind":"function","type":[""],"specialkind":"none","def":"iterator std::list< _Tp, _Alloc >::emplace","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, _Args &&...__args)","desc":"Constructs object in list before specified iterator.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the list."},{"type":"_Args &&...","kind":"","declname":"__args","desc":"Arguments."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace_back":{"name":"emplace_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::emplace_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace_front":{"name":"emplace_front","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::emplace_front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"empty":{"name":"empty","kind":"function","type":["bool"],"specialkind":"none","def":"bool std::list< _Tp, _Alloc >::empty","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"end":{"name":"end","kind":"function","type":[""],"specialkind":"none","def":"iterator std::list< _Tp, _Alloc >::end","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"erase":{"name":"erase","kind":"function","type":[""],"specialkind":"none","def":"iterator std::list< _Tp, _Alloc >::erase","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position) noexcept","desc":"Remove element at given position.","params":[{"type":"","kind":"","declname":"__position","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __first, const_iterator __last) noexcept","desc":"Remove a range of elements.","params":[{"type":"","kind":"","declname":"__first","desc":""},{"type":"","kind":"","declname":"__last","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"front":{"name":"front","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::list< _Tp, _Alloc >::front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"get_allocator":{"name":"get_allocator","kind":"function","type":["allocator_type"],"specialkind":"none","def":"allocator_type std::list< _Tp, _Alloc >::get_allocator","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"Get a copy of the memory allocation object.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"insert":{"name":"insert","kind":"function","type":[""],"specialkind":"none","def":"iterator std::list< _Tp, _Alloc >::insert","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, const value_type &__x)","desc":"Inserts given value into list before specified iterator.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the list."},{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, value_type &&__x)","desc":"Inserts given rvalue into list before specified iterator.","params":[{"type":"","kind":"","declname":"__position","desc":"A const_iterator into the list."},{"type":"value_type &&","kind":"","declname":"__x","desc":"Data to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __p, initializer_list< value_type > __l)","desc":"Inserts the contents of an initializer_list into list before specified const_iterator.","params":[{"type":"","kind":"","declname":"__p","desc":""},{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, size_type __n, const value_type &__x)","desc":"Inserts a number of copies of given data into the list.","params":[{"type":"","kind":"","declname":"__position","desc":""},{"type":"size_type","kind":"","declname":"__n","desc":""},{"type":"const value_type &","kind":"","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, _InputIterator __first, _InputIterator __last)","desc":"Inserts a range into the list.","params":[{"type":"","kind":"","declname":"__position","desc":""},{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"max_size":{"name":"max_size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::list< _Tp, _Alloc >::max_size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"merge":{"name":"merge","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::merge","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(list &&__x)","desc":"Merge sorted lists.","params":[{"type":"","kind":"","operator":"&&","declname":"__x","desc":"Sorted list to merge."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(list &__x)","desc":"","params":[{"type":"","kind":"","operator":"&","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(list &&__x, _StrictWeakOrdering __comp)","desc":"Merge sorted lists according to comparison function.","params":[{"type":"","kind":"","operator":"&&","declname":"__x","desc":""},{"type":"_StrictWeakOrdering","kind":"","declname":"__comp","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(list &__x, _StrictWeakOrdering __comp)","desc":"","params":[{"type":"","kind":"","operator":"&","declname":"__x","desc":""},{"type":"_StrictWeakOrdering","kind":"","declname":"__comp","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"pop_back":{"name":"pop_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::pop_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"Removes last element.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"pop_front":{"name":"pop_front","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::pop_front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"Removes first element.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"push_back":{"name":"push_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::push_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Add data to the end of the list.","params":[{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be added."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(value_type &&__x)","desc":"","params":[{"type":"value_type &&","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"push_front":{"name":"push_front","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::push_front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Add data to the front of the list.","params":[{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be added."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(value_type &&__x)","desc":"","params":[{"type":"value_type &&","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rbegin":{"name":"rbegin","kind":"function","type":[""],"specialkind":"none","def":"reverse_iterator std::list< _Tp, _Alloc >::rbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"remove":{"name":"remove","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::remove","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Tp &__value)","desc":"Remove all elements equal to value.","params":[{"type":"const _Tp &","kind":"","declname":"__value","desc":"The value to remove."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"remove_if":{"name":"remove_if","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::remove_if","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Predicate)","desc":"Remove all elements satisfying a predicate.","params":[{"type":"_Predicate","kind":"","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rend":{"name":"rend","kind":"function","type":[""],"specialkind":"none","def":"reverse_iterator std::list< _Tp, _Alloc >::rend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"resize":{"name":"resize","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::resize","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __new_size)","desc":"Resizes the list to the specified number of elements.","params":[{"type":"size_type","kind":"","declname":"__new_size","desc":"Number of elements the list should contain."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __new_size, const value_type &__x)","desc":"Resizes the list to the specified number of elements.","params":[{"type":"size_type","kind":"","declname":"__new_size","desc":"Number of elements the list should contain."},{"type":"const value_type &","kind":"","declname":"__x","desc":"Data with which new elements should be populated."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"reverse":{"name":"reverse","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::reverse","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"Reverse the elements in list.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"size":{"name":"size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::list< _Tp, _Alloc >::size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"sort":{"name":"sort","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::sort","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"Sort the elements.","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_StrictWeakOrdering)","desc":"Sort the elements according to comparison function.","params":[{"type":"_StrictWeakOrdering","kind":"","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"splice":{"name":"splice","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::splice","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, list &&__x) noexcept","desc":"Insert contents of another list.","params":[{"type":"","kind":"","declname":"__position","desc":""},{"type":"","kind":"","operator":"&&","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, list &__x) noexcept","desc":"","params":[{"type":"","kind":"","declname":"__position","desc":""},{"type":"","kind":"","operator":"&","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, list &&__x, const_iterator __i) noexcept","desc":"Insert element from another list.","params":[{"type":"","kind":"","declname":"__position","desc":"Const_iterator referencing the element to insert before."},{"type":"","kind":"","operator":"&&","declname":"__x","desc":"Source list."},{"type":"","kind":"","declname":"__i","desc":"Const_iterator referencing the element to move."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, list &__x, const_iterator __i) noexcept","desc":"Insert element from another list.","params":[{"type":"","kind":"","declname":"__position","desc":"Const_iterator referencing the element to insert before."},{"type":"","kind":"","operator":"&","declname":"__x","desc":"Source list."},{"type":"","kind":"","declname":"__i","desc":"Const_iterator referencing the element to move."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, list &&__x, const_iterator __first, const_iterator __last) noexcept","desc":"Insert range from another list.","params":[{"type":"","kind":"","declname":"__position","desc":""},{"type":"","kind":"","operator":"&&","declname":"__x","desc":""},{"type":"","kind":"","declname":"__first","desc":""},{"type":"","kind":"","declname":"__last","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, list &__x, const_iterator __first, const_iterator __last) noexcept","desc":"Insert range from another list.","params":[{"type":"","kind":"","declname":"__position","desc":""},{"type":"","kind":"","operator":"&","declname":"__x","desc":""},{"type":"","kind":"","declname":"__first","desc":""},{"type":"","kind":"","declname":"__last","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"swap":{"name":"swap","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::swap","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(list &__x)","desc":"Swaps data with another list.","params":[{"type":"","kind":"","operator":"&","declname":"__x","desc":"A list of the same element and allocator types."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"unique":{"name":"unique","kind":"function","type":["void"],"specialkind":"none","def":"void std::list< _Tp, _Alloc >::unique","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"Remove consecutive duplicate elements.","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_BinaryPredicate)","desc":"Remove consecutive elements satisfying a predicate.","params":[{"type":"_BinaryPredicate","kind":"","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]}},"desc":"A standard container with linear time access to elements, and fixed time insertion/deletion at any point in the sequence.","id":"classstd_1_1list","kind":"class","apilevel":["pro"],"drawercat":["pro"]},"std::map":{"name":"std::map","members":{"map":{"name":"map","kind":"function","type":[""],"specialkind":"constructor","def":"std::map< _Key, _Tp, _Compare, _Alloc >::map","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"Default constructor creates no elements.","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Compare &__comp, const allocator_type &__a=allocator_type())","desc":"Creates a map with no elements.","params":[{"type":"const _Compare &","kind":"","declname":"__comp","desc":"A comparison object."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const map &__x)","desc":"Map copy constructor.","params":[{"type":"map","kind":"","operator":"const\n                \n &","declname":"__x","desc":"A map of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(map &&__x) noexcept(is_nothrow_copy_constructible< _Compare >::value)","desc":"Map move constructor.","params":[{"type":"map","kind":"","operator":"&&","declname":"__x","desc":"A map of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l, const _Compare &__comp=_Compare(), const allocator_type &__a=allocator_type())","desc":"Builds a map from an initializer_list.","params":[{"type":"value_type","kind":"","operator":"initializer_list<\n                \n >","declname":"__l","desc":"An initializer_list."},{"type":"const _Compare &","kind":"","declname":"__comp","desc":"A comparison object."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const allocator_type &__a)","desc":"Allocator-extended default constructor.","params":[{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const map &__m, const allocator_type &__a)","desc":"Allocator-extended copy constructor.","params":[{"type":"map","kind":"","operator":"const\n                \n &","declname":"__m","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(map &&__m, const allocator_type &__a) noexcept(is_nothrow_copy_constructible< _Compare >::value &&_Alloc_traits::_S_always_equal())","desc":"Allocator-extended move constructor.","params":[{"type":"map","kind":"","operator":"&&","declname":"__m","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l, const allocator_type &__a)","desc":"Allocator-extended initialier-list constructor.","params":[{"type":"value_type","kind":"","operator":"initializer_list<\n                \n >","declname":"__l","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, const allocator_type &__a)","desc":"Allocator-extended range constructor.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last)","desc":"Builds a map from a range.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, const _Compare &__comp, const allocator_type &__a=allocator_type())","desc":"Builds a map from a range.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"An input iterator."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"An input iterator."},{"type":"const _Compare &","kind":"","declname":"__comp","desc":"A comparison functor."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"at":{"name":"at","kind":"function","type":["mapped_type &"],"specialkind":"none","def":"mapped_type& std::map< _Key, _Tp, _Compare, _Alloc >::at","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__k)","desc":"Access to map data.","params":[{"type":"const key_type &","kind":"","declname":"__k","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__k) const","desc":"","params":[{"type":"const key_type &","kind":"","declname":"__k","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"begin":{"name":"begin","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::map< _Key, _Tp, _Compare, _Alloc >::begin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cbegin":{"name":"cbegin","kind":"function","type":["const_iterator"],"specialkind":"none","def":"const_iterator std::map< _Key, _Tp, _Compare, _Alloc >::cbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cend":{"name":"cend","kind":"function","type":["const_iterator"],"specialkind":"none","def":"const_iterator std::map< _Key, _Tp, _Compare, _Alloc >::cend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"clear":{"name":"clear","kind":"function","type":["void"],"specialkind":"none","def":"void std::map< _Key, _Tp, _Compare, _Alloc >::clear","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"count":{"name":"count","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::map< _Key, _Tp, _Compare, _Alloc >::count","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x) const","desc":"Finds the number of elements with given key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of (key, value) pairs to be located."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crbegin":{"name":"crbegin","kind":"function","type":["const_reverse_iterator"],"specialkind":"none","def":"const_reverse_iterator std::map< _Key, _Tp, _Compare, _Alloc >::crbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crend":{"name":"crend","kind":"function","type":["const_reverse_iterator"],"specialkind":"none","def":"const_reverse_iterator std::map< _Key, _Tp, _Compare, _Alloc >::crend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace":{"name":"emplace","kind":"function","type":["std::pair"],"specialkind":"none","def":"std::pair<iterator, bool> std::map< _Key, _Tp, _Compare, _Alloc >::emplace","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"Attempts to build and insert a std::pair into the map.","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace_hint":{"name":"emplace_hint","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::map< _Key, _Tp, _Compare, _Alloc >::emplace_hint","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __pos, _Args &&...__args)","desc":"Attempts to build and insert a std::pair into the map.","params":[{"type":"const_iterator","kind":"","declname":"__pos","desc":""},{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"empty":{"name":"empty","kind":"function","type":["bool"],"specialkind":"none","def":"bool std::map< _Key, _Tp, _Compare, _Alloc >::empty","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"end":{"name":"end","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::map< _Key, _Tp, _Compare, _Alloc >::end","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"equal_range":{"name":"equal_range","kind":"function","type":["std::pair"],"specialkind":"none","def":"std::pair<iterator, iterator> std::map< _Key, _Tp, _Compare, _Alloc >::equal_range","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x)","desc":"Finds a subsequence matching given key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x) const","desc":"Finds a subsequence matching given key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"erase":{"name":"erase","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::map< _Key, _Tp, _Compare, _Alloc >::erase","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position)","desc":"Erases an element from a map.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":"An iterator pointing to the element to be erased."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(iterator __position)","desc":"","params":[{"type":"iterator","kind":"","declname":"__position","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x)","desc":"Erases elements according to the provided key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of element to be erased."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __first, const_iterator __last)","desc":"Erases a [first,last) range of elements from a map.","params":[{"type":"const_iterator","kind":"","declname":"__first","desc":"Iterator pointing to the start of the range to be erased."},{"type":"const_iterator","kind":"","declname":"__last","desc":"Iterator pointing to the end of the range to be erased."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"find":{"name":"find","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::map< _Key, _Tp, _Compare, _Alloc >::find","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x)","desc":"Tries to locate an element in a map.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of (key, value) pair to be located."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x) const","desc":"Tries to locate an element in a map.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of (key, value) pair to be located."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"get_allocator":{"name":"get_allocator","kind":"function","type":["allocator_type"],"specialkind":"none","def":"allocator_type std::map< _Key, _Tp, _Compare, _Alloc >::get_allocator","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"Get a copy of the memory allocation object.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"insert":{"name":"insert","kind":"function","type":["std::pair"],"specialkind":"none","def":"std::pair<iterator, bool> std::map< _Key, _Tp, _Compare, _Alloc >::insert","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Attempts to insert a std::pair into the map.","params":[{"type":"value_type","kind":"","operator":"const\n                \n &","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Pair &&__x)","desc":"","params":[{"type":"_Pair &&","kind":"","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(std::initializer_list< value_type > __list)","desc":"Attempts to insert a list of std::pairs into the map.","params":[{"type":"value_type","kind":"","operator":"std::initializer_list<\n                \n >","declname":"__list","desc":"A std::initializer_list<value_type> of pairs to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, const value_type &__x)","desc":"Attempts to insert a std::pair into the map.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":""},{"type":"value_type","kind":"","operator":"const\n                \n &","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, _Pair &&__x)","desc":"","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":""},{"type":"_Pair &&","kind":"","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last)","desc":"Template function that attempts to insert a range of elements.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":"Iterator pointing to the start of the range to be inserted."},{"type":"_InputIterator","kind":"","declname":"__last","desc":"Iterator pointing to the end of the range."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"key_comp":{"name":"key_comp","kind":"function","type":["key_compare"],"specialkind":"none","def":"key_compare std::map< _Key, _Tp, _Compare, _Alloc >::key_comp","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"lower_bound":{"name":"lower_bound","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::map< _Key, _Tp, _Compare, _Alloc >::lower_bound","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x)","desc":"Finds the beginning of a subsequence matching given key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of (key, value) pair to be located."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x) const","desc":"Finds the beginning of a subsequence matching given key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of (key, value) pair to be located."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"max_size":{"name":"max_size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::map< _Key, _Tp, _Compare, _Alloc >::max_size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rbegin":{"name":"rbegin","kind":"function","type":["reverse_iterator"],"specialkind":"none","def":"reverse_iterator std::map< _Key, _Tp, _Compare, _Alloc >::rbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rend":{"name":"rend","kind":"function","type":["reverse_iterator"],"specialkind":"none","def":"reverse_iterator std::map< _Key, _Tp, _Compare, _Alloc >::rend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"size":{"name":"size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::map< _Key, _Tp, _Compare, _Alloc >::size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"swap":{"name":"swap","kind":"function","type":["void"],"specialkind":"none","def":"void std::map< _Key, _Tp, _Compare, _Alloc >::swap","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(map &__x) noexcept(_Alloc_traits::_S_nothrow_swap())","desc":"Swaps data with another map.","params":[{"type":"map","kind":"","operator":"&","declname":"__x","desc":"A map of the same element and allocator types."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"upper_bound":{"name":"upper_bound","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::map< _Key, _Tp, _Compare, _Alloc >::upper_bound","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x)","desc":"Finds the end of a subsequence matching given key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of (key, value) pair to be located."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const key_type &__x) const","desc":"Finds the end of a subsequence matching given key.","params":[{"type":"const key_type &","kind":"","declname":"__x","desc":"Key of (key, value) pair to be located."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"value_comp":{"name":"value_comp","kind":"function","type":["value_compare"],"specialkind":"none","def":"value_compare std::map< _Key, _Tp, _Compare, _Alloc >::value_comp","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]}},"desc":"A standard container made up of (key,value) pairs, which can be retrieved based on a key, in logarithmic time.","id":"classstd_1_1map","kind":"class","apilevel":["pro"],"drawercat":["pro"]},"std::queue":{"name":"std::queue","members":{"queue":{"name":"queue","kind":"function","type":[""],"specialkind":"constructor","def":"std::queue< _Tp, _Sequence >::queue","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Sequence &__c)","desc":"Default constructor creates no elements.","params":[{"type":"const _Sequence &","kind":"","declname":"__c","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Sequence &&__c=_Sequence())","desc":"","params":[{"type":"_Sequence &&","kind":"","declname":"__c","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"back":{"name":"back","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::queue< _Tp, _Sequence >::back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace":{"name":"emplace","kind":"function","type":["void"],"specialkind":"none","def":"void std::queue< _Tp, _Sequence >::emplace","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"empty":{"name":"empty","kind":"function","type":["bool"],"specialkind":"none","def":"bool std::queue< _Tp, _Sequence >::empty","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"front":{"name":"front","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::queue< _Tp, _Sequence >::front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"pop":{"name":"pop","kind":"function","type":["void"],"specialkind":"none","def":"void std::queue< _Tp, _Sequence >::pop","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"Removes first element.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"push":{"name":"push","kind":"function","type":["void"],"specialkind":"none","def":"void std::queue< _Tp, _Sequence >::push","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Add data to the end of the queue.","params":[{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be added."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(value_type &&__x)","desc":"","params":[{"type":"value_type &&","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"size":{"name":"size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::queue< _Tp, _Sequence >::size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"swap":{"name":"swap","kind":"function","type":["void"],"specialkind":"none","def":"void std::queue< _Tp, _Sequence >::swap","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(queue &__q) noexcept(noexcept(swap(c, __q.c)))","desc":"","params":[{"type":"","kind":"","operator":"&","declname":"__q","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]}},"desc":"A standard container giving FIFO behavior.","id":"classstd_1_1queue","kind":"class","apilevel":["pro"],"drawercat":["pro"]},"std::stack":{"name":"std::stack","members":{"stack":{"name":"stack","kind":"function","type":[""],"specialkind":"constructor","def":"std::stack< _Tp, _Sequence >::stack","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const _Sequence &__c)","desc":"Default constructor creates no elements.","params":[{"type":"const _Sequence &","kind":"","declname":"__c","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Sequence &&__c=_Sequence())","desc":"","params":[{"type":"_Sequence &&","kind":"","declname":"__c","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace":{"name":"emplace","kind":"function","type":["void"],"specialkind":"none","def":"void std::stack< _Tp, _Sequence >::emplace","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"empty":{"name":"empty","kind":"function","type":["bool"],"specialkind":"none","def":"bool std::stack< _Tp, _Sequence >::empty","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"pop":{"name":"pop","kind":"function","type":["void"],"specialkind":"none","def":"void std::stack< _Tp, _Sequence >::pop","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"Removes first element.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"push":{"name":"push","kind":"function","type":["void"],"specialkind":"none","def":"void std::stack< _Tp, _Sequence >::push","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Add data to the top of the stack.","params":[{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be added."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(value_type &&__x)","desc":"","params":[{"type":"value_type &&","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"size":{"name":"size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::stack< _Tp, _Sequence >::size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"swap":{"name":"swap","kind":"function","type":["void"],"specialkind":"none","def":"void std::stack< _Tp, _Sequence >::swap","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(stack &__s) noexcept(noexcept(swap(c, __s.c)))","desc":"","params":[{"type":"","kind":"","operator":"&","declname":"__s","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"top":{"name":"top","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::stack< _Tp, _Sequence >::top","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]}},"desc":"A standard container giving FILO behavior.","id":"classstd_1_1stack","kind":"class","apilevel":["pro"],"drawercat":["pro"]},"std::vector":{"name":"std::vector","members":{"vector":{"name":"vector","kind":"function","type":[""],"specialkind":"constructor","def":"std::vector< _Tp, _Alloc >::vector","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept(is_nothrow_default_constructible< _Alloc >::value)","desc":"Creates a vector with no elements.","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const allocator_type &__a) noexcept","desc":"Creates a vector with no elements.","params":[{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator object."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const allocator_type &__a=allocator_type())","desc":"Creates a vector with default constructed elements.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"The number of elements to initially create."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const value_type &__value, const allocator_type &__a=allocator_type())","desc":"Creates a vector with copies of an exemplar element.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"The number of elements to initially create."},{"type":"const value_type &","kind":"","declname":"__value","desc":"An element to copy."},{"type":"const allocator_type &","kind":"","declname":"__a","desc":"An allocator."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const vector &__x)","desc":"Vector copy constructor.","params":[{"type":"","kind":"","operator":"const                \n                        \n &","declname":"__x","desc":"A vector of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(vector &&__x) noexcept","desc":"Vector move constructor.","params":[{"type":"","kind":"","operator":"&&","declname":"__x","desc":"A vector of identical element and allocator types."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const vector &__x, const allocator_type &__a)","desc":"Copy constructor with alternative allocator.","params":[{"type":"","kind":"","operator":"const                \n                        \n &","declname":"__x","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(vector &&__rv, const allocator_type &__m) noexcept(_Alloc_traits::_S_always_equal())","desc":"Move constructor with alternative allocator.","params":[{"type":"","kind":"","operator":"&&","declname":"__rv","desc":""},{"type":"const allocator_type &","kind":"","declname":"__m","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l, const allocator_type &__a=allocator_type())","desc":"Builds a vector from an initializer list.","params":[{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last, const allocator_type &__a=allocator_type())","desc":"Builds a vector from a range.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""},{"type":"const allocator_type &","kind":"","declname":"__a","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"assign":{"name":"assign","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::assign","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n, const value_type &__val)","desc":"Assigns a given value to a vector.","params":[{"type":"size_type","kind":"","declname":"__n","desc":"Number of elements to be assigned."},{"type":"const value_type &","kind":"","declname":"__val","desc":"Value to be assigned."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_InputIterator __first, _InputIterator __last)","desc":"Assigns a range to a vector.","params":[{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(initializer_list< value_type > __l)","desc":"Assigns an initializer list to a vector.","params":[{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"at":{"name":"at","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::vector< _Tp, _Alloc >::at","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n)","desc":"Provides access to the data contained in the vector.","params":[{"type":"size_type","kind":"","declname":"__n","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n) const","desc":"Provides access to the data contained in the vector.","params":[{"type":"size_type","kind":"","declname":"__n","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"back":{"name":"back","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::vector< _Tp, _Alloc >::back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"begin":{"name":"begin","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::vector< _Tp, _Alloc >::begin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"capacity":{"name":"capacity","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::vector< _Tp, _Alloc >::capacity","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cbegin":{"name":"cbegin","kind":"function","type":["const_iterator"],"specialkind":"none","def":"const_iterator std::vector< _Tp, _Alloc >::cbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"cend":{"name":"cend","kind":"function","type":["const_iterator"],"specialkind":"none","def":"const_iterator std::vector< _Tp, _Alloc >::cend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"clear":{"name":"clear","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::clear","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crbegin":{"name":"crbegin","kind":"function","type":[""],"specialkind":"none","def":"const_reverse_iterator std::vector< _Tp, _Alloc >::crbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"crend":{"name":"crend","kind":"function","type":[""],"specialkind":"none","def":"const_reverse_iterator std::vector< _Tp, _Alloc >::crend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"data":{"name":"data","kind":"function","type":["_Tp *"],"specialkind":"none","def":"_Tp* std::vector< _Tp, _Alloc >::data","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace":{"name":"emplace","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::vector< _Tp, _Alloc >::emplace","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, _Args &&...__args)","desc":"Inserts an object in vector before specified iterator.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":"A const_iterator into the vector."},{"type":"_Args &&...","kind":"","declname":"__args","desc":"Arguments."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"emplace_back":{"name":"emplace_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::emplace_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(_Args &&...__args)","desc":"","params":[{"type":"_Args &&...","kind":"","declname":"__args","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"empty":{"name":"empty","kind":"function","type":["bool"],"specialkind":"none","def":"bool std::vector< _Tp, _Alloc >::empty","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"end":{"name":"end","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::vector< _Tp, _Alloc >::end","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"erase":{"name":"erase","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::vector< _Tp, _Alloc >::erase","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position)","desc":"Remove element at given position.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __first, const_iterator __last)","desc":"Remove a range of elements.","params":[{"type":"const_iterator","kind":"","declname":"__first","desc":""},{"type":"const_iterator","kind":"","declname":"__last","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"front":{"name":"front","kind":"function","type":["reference"],"specialkind":"none","def":"reference std::vector< _Tp, _Alloc >::front","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"insert":{"name":"insert","kind":"function","type":["iterator"],"specialkind":"none","def":"iterator std::vector< _Tp, _Alloc >::insert","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, const value_type &__x)","desc":"Inserts given value into vector before specified iterator.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":"A const_iterator into the vector."},{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, value_type &&__x)","desc":"Inserts given rvalue into vector before specified iterator.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":"A const_iterator into the vector."},{"type":"value_type &&","kind":"","declname":"__x","desc":"Data to be inserted."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, initializer_list< value_type > __l)","desc":"Inserts an initializer_list into the vector.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":""},{"type":"initializer_list< value_type >","kind":"","declname":"__l","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, size_type __n, const value_type &__x)","desc":"Inserts a number of copies of given data into the vector.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":""},{"type":"size_type","kind":"","declname":"__n","desc":""},{"type":"const value_type &","kind":"","declname":"__x","desc":""}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const_iterator __position, _InputIterator __first, _InputIterator __last)","desc":"Inserts a range into the vector.","params":[{"type":"const_iterator","kind":"","declname":"__position","desc":""},{"type":"_InputIterator","kind":"","declname":"__first","desc":""},{"type":"_InputIterator","kind":"","declname":"__last","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"max_size":{"name":"max_size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::vector< _Tp, _Alloc >::max_size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"pop_back":{"name":"pop_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::pop_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"Removes last element.","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"push_back":{"name":"push_back","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::push_back","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(const value_type &__x)","desc":"Add data to the end of the vector.","params":[{"type":"const value_type &","kind":"","declname":"__x","desc":"Data to be added."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(value_type &&__x)","desc":"","params":[{"type":"value_type &&","kind":"","declname":"__x","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rbegin":{"name":"rbegin","kind":"function","type":[""],"specialkind":"none","def":"reverse_iterator std::vector< _Tp, _Alloc >::rbegin","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"rend":{"name":"rend","kind":"function","type":[""],"specialkind":"none","def":"reverse_iterator std::vector< _Tp, _Alloc >::rend","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() noexcept","desc":"","params":[],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"reserve":{"name":"reserve","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::reserve","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __n)","desc":"Attempt to preallocate enough memory for specified number of elements.","params":[{"type":"size_type","kind":"","declname":"__n","desc":""}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"resize":{"name":"resize","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::resize","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __new_size)","desc":"Resizes the vector to the specified number of elements.","params":[{"type":"size_type","kind":"","declname":"__new_size","desc":"Number of elements the vector should contain."}],"static":false},{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(size_type __new_size, const value_type &__x)","desc":"Resizes the vector to the specified number of elements.","params":[{"type":"size_type","kind":"","declname":"__new_size","desc":"Number of elements the vector should contain."},{"type":"const value_type &","kind":"","declname":"__x","desc":"Data with which new elements should be populated."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"shrink_to_fit":{"name":"shrink_to_fit","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::shrink_to_fit","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"()","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"size":{"name":"size","kind":"function","type":["size_type"],"specialkind":"none","def":"size_type std::vector< _Tp, _Alloc >::size","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"() const noexcept","desc":"","params":[],"static":false}],"apilevel":["pro"],"drawercat":["pro"]},"swap":{"name":"swap","kind":"function","type":["void"],"specialkind":"none","def":"void std::vector< _Tp, _Alloc >::swap","static":false,"overloads":[{"apilevel":["pro"],"drawercat":["pro"],"argsstring":"(vector &__x) noexcept(_Alloc_traits::_S_nothrow_swap())","desc":"Swaps data with another vector.","params":[{"type":"","kind":"","operator":"&","declname":"__x","desc":"A vector of the same element and allocator types."}],"static":false}],"apilevel":["pro"],"drawercat":["pro"]}},"desc":"A standard container which offers fixed time access to individual elements in any order.","id":"classstd_1_1vector","kind":"class","apilevel":["pro"],"drawercat":["pro"]}},"files":{"stdio.h":{"name":"stdio.h","members":{"tmpfile":{"name":"tmpfile","kind":"function","type":[""],"def":"FILE* tmpfile","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(void)","desc":""}]},"tmpnam":{"name":"tmpnam","kind":"function","type":["char *"],"def":"char* tmpnam","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *)","desc":""}]},"tempnam":{"name":"tempnam","kind":"function","type":["char *"],"def":"char* tempnam","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, const char *)","desc":""}]},"fclose":{"name":"fclose","kind":"function","type":["int"],"def":"int fclose","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fflush":{"name":"fflush","kind":"function","type":["int"],"def":"int fflush","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"freopen":{"name":"freopen","kind":"function","type":[""],"def":"FILE* freopen","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict, const char *__restrict, FILE *__restrict)","desc":""}]},"setbuf":{"name":"setbuf","kind":"function","type":["void"],"def":"void setbuf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *__restrict, char *__restrict)","desc":""}]},"setvbuf":{"name":"setvbuf","kind":"function","type":["int"],"def":"int setvbuf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *__restrict, char *__restrict, int, size_t)","desc":""}]},"fprintf":{"name":"fprintf","kind":"function","type":["int"],"def":"int fprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"fscanf":{"name":"fscanf","kind":"function","type":["int"],"def":"int fscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__scanf__, 2, 3)))","desc":""}]},"printf":{"name":"printf","kind":"function","type":["int"],"def":"int printf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 1, 2)))","desc":""}]},"scanf":{"name":"scanf","kind":"function","type":["int"],"def":"int scanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict,...) _ATTRIBUTE((__format__(__scanf__, 1, 2)))","desc":""}]},"sscanf":{"name":"sscanf","kind":"function","type":["int"],"def":"int sscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__scanf__, 2, 3)))","desc":""}]},"vfprintf":{"name":"vfprintf","kind":"function","type":["int"],"def":"int vfprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"vprintf":{"name":"vprintf","kind":"function","type":["int"],"def":"int vprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 1, 0)))","desc":""}]},"vsprintf":{"name":"vsprintf","kind":"function","type":["int"],"def":"int vsprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"fgetc":{"name":"fgetc","kind":"function","type":["int"],"def":"int fgetc","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fgets":{"name":"fgets","kind":"function","type":["char *"],"def":"char* fgets","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *__restrict, int, FILE *__restrict)","desc":""}]},"fputc":{"name":"fputc","kind":"function","type":["int"],"def":"int fputc","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, FILE *)","desc":""}]},"fputs":{"name":"fputs","kind":"function","type":["int"],"def":"int fputs","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict, FILE *__restrict)","desc":""}]},"getc":{"name":"getc","kind":"function","type":["int"],"def":"int getc","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"getchar":{"name":"getchar","kind":"function","type":["int"],"def":"int getchar","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(void)","desc":""}]},"gets":{"name":"gets","kind":"function","type":["char *"],"def":"char* gets","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *)","desc":""}]},"putc":{"name":"putc","kind":"function","type":["int"],"def":"int putc","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, FILE *)","desc":""}]},"putchar":{"name":"putchar","kind":"function","type":["int"],"def":"int putchar","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int)","desc":""}]},"puts":{"name":"puts","kind":"function","type":["int"],"def":"int puts","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *)","desc":""}]},"ungetc":{"name":"ungetc","kind":"function","type":["int"],"def":"int ungetc","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, FILE *)","desc":""}]},"fread":{"name":"fread","kind":"function","type":["size_t"],"def":"size_t fread","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(_PTR __restrict, size_t _size, size_t _n, FILE *__restrict)","desc":""}]},"fwrite":{"name":"fwrite","kind":"function","type":["size_t"],"def":"size_t fwrite","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const _PTR __restrict, size_t _size, size_t _n, FILE *)","desc":""}]},"fgetpos":{"name":"fgetpos","kind":"function","type":["int"],"def":"int fgetpos","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, _fpos_t *)","desc":""}]},"fseek":{"name":"fseek","kind":"function","type":["int"],"def":"int fseek","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, long, int)","desc":""}]},"fsetpos":{"name":"fsetpos","kind":"function","type":["int"],"def":"int fsetpos","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, const _fpos_t *)","desc":""}]},"ftell":{"name":"ftell","kind":"function","type":["long"],"def":"long ftell","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"rewind":{"name":"rewind","kind":"function","type":["void"],"def":"void rewind","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"clearerr":{"name":"clearerr","kind":"function","type":["void"],"def":"void clearerr","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"feof":{"name":"feof","kind":"function","type":["int"],"def":"int feof","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"ferror":{"name":"ferror","kind":"function","type":["int"],"def":"int ferror","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"perror":{"name":"perror","kind":"function","type":["void"],"def":"void perror","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *)","desc":""}]},"fopen":{"name":"fopen","kind":"function","type":[""],"def":"FILE* fopen","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict _name, const char *__restrict _type)","desc":""}]},"sprintf":{"name":"sprintf","kind":"function","type":["int"],"def":"int sprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"remove":{"name":"remove","kind":"function","type":["int"],"def":"int remove","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *)","desc":""}]},"rename":{"name":"rename","kind":"function","type":["int"],"def":"int rename","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, const char *)","desc":""}]},"_rename":{"name":"_rename","kind":"function","type":["int"],"def":"int _rename","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, const char *)","desc":""}]},"fseeko":{"name":"fseeko","kind":"function","type":["int"],"def":"int fseeko","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, _off_t, int)","desc":""}]},"ftello":{"name":"ftello","kind":"function","type":["_off_t"],"def":"off_t ftello","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fcloseall":{"name":"fcloseall","kind":"function","type":["int"],"def":"int fcloseall","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(_VOID)","desc":""}]},"asiprintf":{"name":"asiprintf","kind":"function","type":["int"],"def":"int asiprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char **, const char *,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"asniprintf":{"name":"asniprintf","kind":"function","type":["char *"],"def":"char* asniprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *, size_t *, const char *,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"asnprintf":{"name":"asnprintf","kind":"function","type":["char *"],"def":"char* asnprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *__restrict, size_t *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"asprintf":{"name":"asprintf","kind":"function","type":["int"],"def":"int asprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char **__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"diprintf":{"name":"diprintf","kind":"function","type":["int"],"def":"int diprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, const char *,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"fiprintf":{"name":"fiprintf","kind":"function","type":["int"],"def":"int fiprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, const char *,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"fiscanf":{"name":"fiscanf","kind":"function","type":["int"],"def":"int fiscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, const char *,...) _ATTRIBUTE((__format__(__scanf__, 2, 3)))","desc":""}]},"iprintf":{"name":"iprintf","kind":"function","type":["int"],"def":"int iprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *,...) _ATTRIBUTE((__format__(__printf__, 1, 2)))","desc":""}]},"iscanf":{"name":"iscanf","kind":"function","type":["int"],"def":"int iscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *,...) _ATTRIBUTE((__format__(__scanf__, 1, 2)))","desc":""}]},"siprintf":{"name":"siprintf","kind":"function","type":["int"],"def":"int siprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *, const char *,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"siscanf":{"name":"siscanf","kind":"function","type":["int"],"def":"int siscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, const char *,...) _ATTRIBUTE((__format__(__scanf__, 2, 3)))","desc":""}]},"snprintf":{"name":"snprintf","kind":"function","type":["int"],"def":"int snprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *__restrict, size_t, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"sniprintf":{"name":"sniprintf","kind":"function","type":["int"],"def":"int sniprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *, size_t, const char *,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"vasiprintf":{"name":"vasiprintf","kind":"function","type":["int"],"def":"int vasiprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char **, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"vasniprintf":{"name":"vasniprintf","kind":"function","type":["char *"],"def":"char* vasniprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *, size_t *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"vasnprintf":{"name":"vasnprintf","kind":"function","type":["char *"],"def":"char* vasnprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *, size_t *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"vasprintf":{"name":"vasprintf","kind":"function","type":["int"],"def":"int vasprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char **, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"vdiprintf":{"name":"vdiprintf","kind":"function","type":["int"],"def":"int vdiprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"vfiprintf":{"name":"vfiprintf","kind":"function","type":["int"],"def":"int vfiprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"vfiscanf":{"name":"vfiscanf","kind":"function","type":["int"],"def":"int vfiscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, const char *, __VALIST) _ATTRIBUTE((__format__(__scanf__, 2, 0)))","desc":""}]},"vfscanf":{"name":"vfscanf","kind":"function","type":["int"],"def":"int vfscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__scanf__, 2, 0)))","desc":""}]},"viprintf":{"name":"viprintf","kind":"function","type":["int"],"def":"int viprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 1, 0)))","desc":""}]},"viscanf":{"name":"viscanf","kind":"function","type":["int"],"def":"int viscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, __VALIST) _ATTRIBUTE((__format__(__scanf__, 1, 0)))","desc":""}]},"vscanf":{"name":"vscanf","kind":"function","type":["int"],"def":"int vscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, __VALIST) _ATTRIBUTE((__format__(__scanf__, 1, 0)))","desc":""}]},"vsiprintf":{"name":"vsiprintf","kind":"function","type":["int"],"def":"int vsiprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"vsiscanf":{"name":"vsiscanf","kind":"function","type":["int"],"def":"int vsiscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, const char *, __VALIST) _ATTRIBUTE((__format__(__scanf__, 2, 0)))","desc":""}]},"vsniprintf":{"name":"vsniprintf","kind":"function","type":["int"],"def":"int vsniprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *, size_t, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"vsnprintf":{"name":"vsnprintf","kind":"function","type":["int"],"def":"int vsnprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *__restrict, size_t, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"vsscanf":{"name":"vsscanf","kind":"function","type":["int"],"def":"int vsscanf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__scanf__, 2, 0)))","desc":""}]},"fdopen":{"name":"fdopen","kind":"function","type":[""],"def":"FILE* fdopen","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, const char *)","desc":""}]},"fileno":{"name":"fileno","kind":"function","type":["int"],"def":"int fileno","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"getw":{"name":"getw","kind":"function","type":["int"],"def":"int getw","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"pclose":{"name":"pclose","kind":"function","type":["int"],"def":"int pclose","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"popen":{"name":"popen","kind":"function","type":[""],"def":"FILE* popen","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, const char *)","desc":""}]},"putw":{"name":"putw","kind":"function","type":["int"],"def":"int putw","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, FILE *)","desc":""}]},"setbuffer":{"name":"setbuffer","kind":"function","type":["void"],"def":"void setbuffer","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, char *, int)","desc":""}]},"setlinebuf":{"name":"setlinebuf","kind":"function","type":["int"],"def":"int setlinebuf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"getc_unlocked":{"name":"getc_unlocked","kind":"function","type":["int"],"def":"int getc_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"getchar_unlocked":{"name":"getchar_unlocked","kind":"function","type":["int"],"def":"int getchar_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(void)","desc":""}]},"flockfile":{"name":"flockfile","kind":"function","type":["void"],"def":"void flockfile","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"ftrylockfile":{"name":"ftrylockfile","kind":"function","type":["int"],"def":"int ftrylockfile","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"funlockfile":{"name":"funlockfile","kind":"function","type":["void"],"def":"void funlockfile","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"putc_unlocked":{"name":"putc_unlocked","kind":"function","type":["int"],"def":"int putc_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, FILE *)","desc":""}]},"putchar_unlocked":{"name":"putchar_unlocked","kind":"function","type":["int"],"def":"int putchar_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int)","desc":""}]},"dprintf":{"name":"dprintf","kind":"function","type":["int"],"def":"int dprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"fmemopen":{"name":"fmemopen","kind":"function","type":[""],"def":"FILE* fmemopen","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(void *__restrict, size_t, const char *__restrict)","desc":""}]},"open_memstream":{"name":"open_memstream","kind":"function","type":[""],"def":"FILE* open_memstream","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char **, size_t *)","desc":""}]},"renameat":{"name":"renameat","kind":"function","type":["int"],"def":"int renameat","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, const char *, int, const char *)","desc":""}]},"vdprintf":{"name":"vdprintf","kind":"function","type":["int"],"def":"int vdprintf","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"_asiprintf_r":{"name":"_asiprintf_r","kind":"function","type":["int"],"def":"int _asiprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char **, const char *,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_asniprintf_r":{"name":"_asniprintf_r","kind":"function","type":["char *"],"def":"char* _asniprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *, size_t *, const char *,...) _ATTRIBUTE((__format__(__printf__, 4, 5)))","desc":""}]},"_asnprintf_r":{"name":"_asnprintf_r","kind":"function","type":["char *"],"def":"char* _asnprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *__restrict, size_t *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 4, 5)))","desc":""}]},"_asprintf_r":{"name":"_asprintf_r","kind":"function","type":["int"],"def":"int _asprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char **__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_diprintf_r":{"name":"_diprintf_r","kind":"function","type":["int"],"def":"int _diprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, const char *,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_dprintf_r":{"name":"_dprintf_r","kind":"function","type":["int"],"def":"int _dprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_fclose_r":{"name":"_fclose_r","kind":"function","type":["int"],"def":"int _fclose_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_fcloseall_r":{"name":"_fcloseall_r","kind":"function","type":["int"],"def":"int _fcloseall_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *)","desc":""}]},"_fdopen_r":{"name":"_fdopen_r","kind":"function","type":[""],"def":"FILE* _fdopen_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, const char *)","desc":""}]},"_fflush_r":{"name":"_fflush_r","kind":"function","type":["int"],"def":"int _fflush_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_fgetc_r":{"name":"_fgetc_r","kind":"function","type":["int"],"def":"int _fgetc_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_fgetc_unlocked_r":{"name":"_fgetc_unlocked_r","kind":"function","type":["int"],"def":"int _fgetc_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_fgets_r":{"name":"_fgets_r","kind":"function","type":["char *"],"def":"char* _fgets_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *__restrict, int, FILE *__restrict)","desc":""}]},"_fgets_unlocked_r":{"name":"_fgets_unlocked_r","kind":"function","type":["char *"],"def":"char* _fgets_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *__restrict, int, FILE *__restrict)","desc":""}]},"_fgetpos_r":{"name":"_fgetpos_r","kind":"function","type":["int"],"def":"int _fgetpos_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *__restrict, _fpos_t *__restrict)","desc":""}]},"_fsetpos_r":{"name":"_fsetpos_r","kind":"function","type":["int"],"def":"int _fsetpos_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, const _fpos_t *)","desc":""}]},"_fiprintf_r":{"name":"_fiprintf_r","kind":"function","type":["int"],"def":"int _fiprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, const char *,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_fiscanf_r":{"name":"_fiscanf_r","kind":"function","type":["int"],"def":"int _fiscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, const char *,...) _ATTRIBUTE((__format__(__scanf__, 3, 4)))","desc":""}]},"_fmemopen_r":{"name":"_fmemopen_r","kind":"function","type":[""],"def":"FILE* _fmemopen_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, void *__restrict, size_t, const char *__restrict)","desc":""}]},"_fopen_r":{"name":"_fopen_r","kind":"function","type":[""],"def":"FILE* _fopen_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, const char *__restrict)","desc":""}]},"_freopen_r":{"name":"_freopen_r","kind":"function","type":[""],"def":"FILE* _freopen_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, const char *__restrict, FILE *__restrict)","desc":""}]},"_fprintf_r":{"name":"_fprintf_r","kind":"function","type":["int"],"def":"int _fprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_fpurge_r":{"name":"_fpurge_r","kind":"function","type":["int"],"def":"int _fpurge_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_fputc_r":{"name":"_fputc_r","kind":"function","type":["int"],"def":"int _fputc_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, FILE *)","desc":""}]},"_fputc_unlocked_r":{"name":"_fputc_unlocked_r","kind":"function","type":["int"],"def":"int _fputc_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, FILE *)","desc":""}]},"_fputs_r":{"name":"_fputs_r","kind":"function","type":["int"],"def":"int _fputs_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, FILE *__restrict)","desc":""}]},"_fputs_unlocked_r":{"name":"_fputs_unlocked_r","kind":"function","type":["int"],"def":"int _fputs_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, FILE *__restrict)","desc":""}]},"_fread_r":{"name":"_fread_r","kind":"function","type":["size_t"],"def":"size_t _fread_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, _PTR __restrict, size_t _size, size_t _n, FILE *__restrict)","desc":""}]},"_fread_unlocked_r":{"name":"_fread_unlocked_r","kind":"function","type":["size_t"],"def":"size_t _fread_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, _PTR __restrict, size_t _size, size_t _n, FILE *__restrict)","desc":""}]},"_fscanf_r":{"name":"_fscanf_r","kind":"function","type":["int"],"def":"int _fscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__scanf__, 3, 4)))","desc":""}]},"_fseek_r":{"name":"_fseek_r","kind":"function","type":["int"],"def":"int _fseek_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, long, int)","desc":""}]},"_fseeko_r":{"name":"_fseeko_r","kind":"function","type":["int"],"def":"int _fseeko_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, _off_t, int)","desc":""}]},"_ftell_r":{"name":"_ftell_r","kind":"function","type":["long"],"def":"long _ftell_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_ftello_r":{"name":"_ftello_r","kind":"function","type":["_off_t"],"def":"_off_t _ftello_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_rewind_r":{"name":"_rewind_r","kind":"function","type":["void"],"def":"void _rewind_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_fwrite_r":{"name":"_fwrite_r","kind":"function","type":["size_t"],"def":"size_t _fwrite_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const _PTR __restrict, size_t _size, size_t _n, FILE *__restrict)","desc":""}]},"_fwrite_unlocked_r":{"name":"_fwrite_unlocked_r","kind":"function","type":["size_t"],"def":"size_t _fwrite_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const _PTR __restrict, size_t _size, size_t _n, FILE *__restrict)","desc":""}]},"_getc_r":{"name":"_getc_r","kind":"function","type":["int"],"def":"int _getc_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_getc_unlocked_r":{"name":"_getc_unlocked_r","kind":"function","type":["int"],"def":"int _getc_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_getchar_r":{"name":"_getchar_r","kind":"function","type":["int"],"def":"int _getchar_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *)","desc":""}]},"_getchar_unlocked_r":{"name":"_getchar_unlocked_r","kind":"function","type":["int"],"def":"int _getchar_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *)","desc":""}]},"_gets_r":{"name":"_gets_r","kind":"function","type":["char *"],"def":"char* _gets_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *)","desc":""}]},"_iprintf_r":{"name":"_iprintf_r","kind":"function","type":["int"],"def":"int _iprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"_iscanf_r":{"name":"_iscanf_r","kind":"function","type":["int"],"def":"int _iscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *,...) _ATTRIBUTE((__format__(__scanf__, 2, 3)))","desc":""}]},"_open_memstream_r":{"name":"_open_memstream_r","kind":"function","type":[""],"def":"FILE* _open_memstream_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char **, size_t *)","desc":""}]},"_perror_r":{"name":"_perror_r","kind":"function","type":["void"],"def":"void _perror_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *)","desc":""}]},"_printf_r":{"name":"_printf_r","kind":"function","type":["int"],"def":"int _printf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 2, 3)))","desc":""}]},"_putc_r":{"name":"_putc_r","kind":"function","type":["int"],"def":"int _putc_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, FILE *)","desc":""}]},"_putc_unlocked_r":{"name":"_putc_unlocked_r","kind":"function","type":["int"],"def":"int _putc_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, FILE *)","desc":""}]},"_putchar_unlocked_r":{"name":"_putchar_unlocked_r","kind":"function","type":["int"],"def":"int _putchar_unlocked_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int)","desc":""}]},"_putchar_r":{"name":"_putchar_r","kind":"function","type":["int"],"def":"int _putchar_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int)","desc":""}]},"_puts_r":{"name":"_puts_r","kind":"function","type":["int"],"def":"int _puts_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *)","desc":""}]},"_remove_r":{"name":"_remove_r","kind":"function","type":["int"],"def":"int _remove_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *)","desc":""}]},"_rename_r":{"name":"_rename_r","kind":"function","type":["int"],"def":"int _rename_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *_old, const char *_new)","desc":""}]},"_scanf_r":{"name":"_scanf_r","kind":"function","type":["int"],"def":"int _scanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict,...) _ATTRIBUTE((__format__(__scanf__, 2, 3)))","desc":""}]},"_siprintf_r":{"name":"_siprintf_r","kind":"function","type":["int"],"def":"int _siprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *, const char *,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_siscanf_r":{"name":"_siscanf_r","kind":"function","type":["int"],"def":"int _siscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *, const char *,...) _ATTRIBUTE((__format__(__scanf__, 3, 4)))","desc":""}]},"_sniprintf_r":{"name":"_sniprintf_r","kind":"function","type":["int"],"def":"int _sniprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *, size_t, const char *,...) _ATTRIBUTE((__format__(__printf__, 4, 5)))","desc":""}]},"_snprintf_r":{"name":"_snprintf_r","kind":"function","type":["int"],"def":"int _snprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *__restrict, size_t, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 4, 5)))","desc":""}]},"_sprintf_r":{"name":"_sprintf_r","kind":"function","type":["int"],"def":"int _sprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__printf__, 3, 4)))","desc":""}]},"_sscanf_r":{"name":"_sscanf_r","kind":"function","type":["int"],"def":"int _sscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, const char *__restrict,...) _ATTRIBUTE((__format__(__scanf__, 3, 4)))","desc":""}]},"_tempnam_r":{"name":"_tempnam_r","kind":"function","type":["char *"],"def":"char* _tempnam_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *, const char *)","desc":""}]},"_tmpfile_r":{"name":"_tmpfile_r","kind":"function","type":[""],"def":"FILE* _tmpfile_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *)","desc":""}]},"_tmpnam_r":{"name":"_tmpnam_r","kind":"function","type":["char *"],"def":"char* _tmpnam_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *)","desc":""}]},"_ungetc_r":{"name":"_ungetc_r","kind":"function","type":["int"],"def":"int _ungetc_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, FILE *)","desc":""}]},"_vasiprintf_r":{"name":"_vasiprintf_r","kind":"function","type":["int"],"def":"int _vasiprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char **, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vasniprintf_r":{"name":"_vasniprintf_r","kind":"function","type":["char *"],"def":"char* _vasniprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *, size_t *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 4, 0)))","desc":""}]},"_vasnprintf_r":{"name":"_vasnprintf_r","kind":"function","type":["char *"],"def":"char* _vasnprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *, size_t *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 4, 0)))","desc":""}]},"_vasprintf_r":{"name":"_vasprintf_r","kind":"function","type":["int"],"def":"int _vasprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char **, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vdiprintf_r":{"name":"_vdiprintf_r","kind":"function","type":["int"],"def":"int _vdiprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vdprintf_r":{"name":"_vdprintf_r","kind":"function","type":["int"],"def":"int _vdprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vfiprintf_r":{"name":"_vfiprintf_r","kind":"function","type":["int"],"def":"int _vfiprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vfiscanf_r":{"name":"_vfiscanf_r","kind":"function","type":["int"],"def":"int _vfiscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, const char *, __VALIST) _ATTRIBUTE((__format__(__scanf__, 3, 0)))","desc":""}]},"_vfprintf_r":{"name":"_vfprintf_r","kind":"function","type":["int"],"def":"int _vfprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vfscanf_r":{"name":"_vfscanf_r","kind":"function","type":["int"],"def":"int _vfscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__scanf__, 3, 0)))","desc":""}]},"_viprintf_r":{"name":"_viprintf_r","kind":"function","type":["int"],"def":"int _viprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"_viscanf_r":{"name":"_viscanf_r","kind":"function","type":["int"],"def":"int _viscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *, __VALIST) _ATTRIBUTE((__format__(__scanf__, 2, 0)))","desc":""}]},"_vprintf_r":{"name":"_vprintf_r","kind":"function","type":["int"],"def":"int _vprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 2, 0)))","desc":""}]},"_vscanf_r":{"name":"_vscanf_r","kind":"function","type":["int"],"def":"int _vscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__scanf__, 2, 0)))","desc":""}]},"_vsiprintf_r":{"name":"_vsiprintf_r","kind":"function","type":["int"],"def":"int _vsiprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vsiscanf_r":{"name":"_vsiscanf_r","kind":"function","type":["int"],"def":"int _vsiscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *, const char *, __VALIST) _ATTRIBUTE((__format__(__scanf__, 3, 0)))","desc":""}]},"_vsniprintf_r":{"name":"_vsniprintf_r","kind":"function","type":["int"],"def":"int _vsniprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *, size_t, const char *, __VALIST) _ATTRIBUTE((__format__(__printf__, 4, 0)))","desc":""}]},"_vsnprintf_r":{"name":"_vsnprintf_r","kind":"function","type":["int"],"def":"int _vsnprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *__restrict, size_t, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 4, 0)))","desc":""}]},"_vsprintf_r":{"name":"_vsprintf_r","kind":"function","type":["int"],"def":"int _vsprintf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, char *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__printf__, 3, 0)))","desc":""}]},"_vsscanf_r":{"name":"_vsscanf_r","kind":"function","type":["int"],"def":"int _vsscanf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *__restrict, const char *__restrict, __VALIST) _ATTRIBUTE((__format__(__scanf__, 3, 0)))","desc":""}]},"fpurge":{"name":"fpurge","kind":"function","type":["int"],"def":"int fpurge","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"__getdelim":{"name":"__getdelim","kind":"function","type":["ssize_t"],"def":"ssize_t __getdelim","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char **, size_t *, int, FILE *)","desc":""}]},"__getline":{"name":"__getline","kind":"function","type":["ssize_t"],"def":"ssize_t __getline","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char **, size_t *, FILE *)","desc":""}]},"clearerr_unlocked":{"name":"clearerr_unlocked","kind":"function","type":["void"],"def":"void clearerr_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"feof_unlocked":{"name":"feof_unlocked","kind":"function","type":["int"],"def":"int feof_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"ferror_unlocked":{"name":"ferror_unlocked","kind":"function","type":["int"],"def":"int ferror_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fileno_unlocked":{"name":"fileno_unlocked","kind":"function","type":["int"],"def":"int fileno_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fflush_unlocked":{"name":"fflush_unlocked","kind":"function","type":["int"],"def":"int fflush_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fgetc_unlocked":{"name":"fgetc_unlocked","kind":"function","type":["int"],"def":"int fgetc_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fputc_unlocked":{"name":"fputc_unlocked","kind":"function","type":["int"],"def":"int fputc_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, FILE *)","desc":""}]},"fread_unlocked":{"name":"fread_unlocked","kind":"function","type":["size_t"],"def":"size_t fread_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(_PTR __restrict, size_t _size, size_t _n, FILE *__restrict)","desc":""}]},"fwrite_unlocked":{"name":"fwrite_unlocked","kind":"function","type":["size_t"],"def":"size_t fwrite_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const _PTR __restrict, size_t _size, size_t _n, FILE *)","desc":""}]},"fgets_unlocked":{"name":"fgets_unlocked","kind":"function","type":["char *"],"def":"char* fgets_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(char *__restrict, int, FILE *__restrict)","desc":""}]},"fputs_unlocked":{"name":"fputs_unlocked","kind":"function","type":["int"],"def":"int fputs_unlocked","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *__restrict, FILE *__restrict)","desc":""}]},"fdopen64":{"name":"fdopen64","kind":"function","type":[""],"def":"FILE* fdopen64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(int, const char *)","desc":""}]},"fopen64":{"name":"fopen64","kind":"function","type":[""],"def":"FILE* fopen64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const char *, const char *)","desc":""}]},"freopen64":{"name":"freopen64","kind":"function","type":[""],"def":"FILE* freopen64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(_CONST char *, _CONST char *, FILE *)","desc":""}]},"ftello64":{"name":"ftello64","kind":"function","type":["_off64_t"],"def":"_off64_t ftello64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *)","desc":""}]},"fseeko64":{"name":"fseeko64","kind":"function","type":["_off64_t"],"def":"_off64_t fseeko64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, _off64_t, int)","desc":""}]},"fgetpos64":{"name":"fgetpos64","kind":"function","type":["int"],"def":"int fgetpos64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, _fpos64_t *)","desc":""}]},"fsetpos64":{"name":"fsetpos64","kind":"function","type":["int"],"def":"int fsetpos64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(FILE *, const _fpos64_t *)","desc":""}]},"tmpfile64":{"name":"tmpfile64","kind":"function","type":[""],"def":"FILE* tmpfile64","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(void)","desc":""}]},"_fdopen64_r":{"name":"_fdopen64_r","kind":"function","type":[""],"def":"FILE* _fdopen64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, const char *)","desc":""}]},"_fopen64_r":{"name":"_fopen64_r","kind":"function","type":[""],"def":"FILE* _fopen64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const char *, const char *)","desc":""}]},"_freopen64_r":{"name":"_freopen64_r","kind":"function","type":[""],"def":"FILE* _freopen64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, _CONST char *, _CONST char *, FILE *)","desc":""}]},"_ftello64_r":{"name":"_ftello64_r","kind":"function","type":["_off64_t"],"def":"_off64_t _ftello64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"_fseeko64_r":{"name":"_fseeko64_r","kind":"function","type":["_off64_t"],"def":"_off64_t _fseeko64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, _off64_t, int)","desc":""}]},"_fgetpos64_r":{"name":"_fgetpos64_r","kind":"function","type":["int"],"def":"int _fgetpos64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, _fpos64_t *)","desc":""}]},"_fsetpos64_r":{"name":"_fsetpos64_r","kind":"function","type":["int"],"def":"int _fsetpos64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *, const _fpos64_t *)","desc":""}]},"_tmpfile64_r":{"name":"_tmpfile64_r","kind":"function","type":[""],"def":"FILE* _tmpfile64_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *)","desc":""}]},"__srget_r":{"name":"__srget_r","kind":"function","type":["int"],"def":"int __srget_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, FILE *)","desc":""}]},"__swbuf_r":{"name":"__swbuf_r","kind":"function","type":["int"],"def":"int __swbuf_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, int, FILE *)","desc":""}]},"funopen":{"name":"funopen","kind":"function","type":[""],"def":"FILE* funopen","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(const _PTR __cookie, int(*__readfn)(_PTR __c, char *__buf, _READ_WRITE_BUFSIZE_TYPE __n), int(*__writefn)(_PTR __c, const char *__buf, _READ_WRITE_BUFSIZE_TYPE __n), _fpos64_t(*__seekfn)(_PTR __c, _fpos64_t __off, int __whence), int(*__closefn)(_PTR __c))","desc":""}]},"_funopen_r":{"name":"_funopen_r","kind":"function","type":[""],"def":"FILE* _funopen_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, const _PTR __cookie, int(*__readfn)(_PTR __c, char *__buf, _READ_WRITE_BUFSIZE_TYPE __n), int(*__writefn)(_PTR __c, const char *__buf, _READ_WRITE_BUFSIZE_TYPE __n), _fpos64_t(*__seekfn)(_PTR __c, _fpos64_t __off, int __whence), int(*__closefn)(_PTR __c))","desc":""}]},"fopencookie":{"name":"fopencookie","kind":"function","type":[""],"def":"FILE* fopencookie","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(void *__cookie, const char *__mode, cookie_io_functions_t __functions)","desc":""}]},"_fopencookie_r":{"name":"_fopencookie_r","kind":"function","type":[""],"def":"FILE* _fopencookie_r","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"argsstring":"(struct _reent *, void *__cookie, const char *__mode, cookie_io_functions_t __functions)","desc":""}]},"__sgetc_r":{"name":"__sgetc_r","kind":"function","type":["_ELIDABLE_INLINE int"],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"desc":""}]},"__sputc_r":{"name":"__sputc_r","kind":"function","type":["_ELIDABLE_INLINE int"],"def":"","apilevel":["pro"],"drawercat":["pro"],"static":false,"overloads":[{"desc":""}]}},"desc":"","id":"stdio_8h","kind":"file"}},"desc":"ISO C++ entities toplevel namespace is std.","id":"namespacestd","kind":"namespace"}}}